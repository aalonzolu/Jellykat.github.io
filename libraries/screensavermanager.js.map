{"version":3,"sources":["libraries/screensavermanager.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","define","_exports","_events","_playbackManager","_pluginManager","_inputManager","_connectionManager","userSettings","_getRequireWildcardCache","WeakMap","cache","_interopRequireDefault","__esModule","default","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","from","test","length","i","F","s","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","arr","len","arr2","defineProperty","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","hasOwnProperty","desc","set","lastFunctionalEvent","getFunctionalEventIdleTime","Date","getTime","events","on","playbackManager","stopInfo","state","NowPlayingItem","MediaType","_default","ScreenSaverManager","activeScreenSaver","_this","this","hide","console","debug","window","removeEventListener","isShowing","show","isLoggedIn","apiClient","connectionManager","currentApiClient","screensaver","getScreensaverPlugin","option","_step","_iterator","pluginManager","ofType","plugin","id","showScreenSaver","Error","hideOnClick","addEventListener","hideOnMouse","hideOnKey","setInterval","onInterval","inputManager","idleTime","isPlayingVideo"],"mappings":"AAAA,SAASA,QAAQC,KAAmV,OAAtOD,QAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAASH,QAAQC,KAAO,cAAcA,KAA2B,SAASD,QAAQC,KAAO,OAAOA,KAAyB,mBAAXC,QAAyBD,IAAIG,cAAgBF,QAAUD,MAAQC,OAAOG,UAAY,gBAAkBJ,MAAyBA,KAEnXK,OAAO,CAAC,UAAW,SAAU,kBAAmB,gBAAiB,eAAgB,oBAAqB,iBAAiB,SAAUC,SAAUC,QAASC,iBAAkBC,eAAgBC,cAAeC,mBAAoBC,cACvN,aAaA,SAASC,2BAA6B,GAAuB,mBAAZC,QAAwB,OAAO,KAAM,IAAIC,MAAQ,IAAID,QAA6F,OAAlFD,yBAA2B,SAASA,2BAA6B,OAAOE,OAAiBA,MAI1M,SAASC,uBAAuBhB,KAAO,OAAOA,KAAOA,IAAIiB,WAAajB,IAAM,CAAEkB,QAASlB,KAEvF,SAASmB,2BAA2BC,EAAGC,gBAAkB,IAAIC,GAAI,GAAsB,oBAAXrB,QAAgD,MAAtBmB,EAAEnB,OAAOC,UAAmB,CAAE,GAAIqB,MAAMC,QAAQJ,KAAOE,GAE7J,SAASG,4BAA4BL,EAAGM,QAAU,IAAKN,EAAG,OAAQ,GAAiB,iBAANA,EAAgB,OAAOO,kBAAkBP,EAAGM,QAAS,IAAIE,EAAIC,OAAOzB,UAAU0B,SAASC,KAAKX,GAAGY,MAAM,GAAI,GAAc,WAANJ,GAAkBR,EAAEjB,cAAayB,EAAIR,EAAEjB,YAAY8B,MAAM,GAAU,QAANL,GAAqB,QAANA,EAAa,OAAOL,MAAMW,KAAKd,GAAI,GAAU,cAANQ,GAAqB,2CAA2CO,KAAKP,GAAI,OAAOD,kBAAkBP,EAAGM,QAFpPD,CAA4BL,KAAOC,gBAAkBD,GAAyB,iBAAbA,EAAEgB,OAAqB,CAAMd,KAAIF,EAAIE,IAAI,IAAIe,EAAI,EAAOC,EAAI,SAASA,MAAQ,MAAO,CAAEC,EAAGD,EAAGV,EAAG,SAASA,IAAM,OAAIS,GAAKjB,EAAEgB,OAAe,CAAEI,MAAM,GAAe,CAAEA,MAAM,EAAOC,MAAOrB,EAAEiB,OAAWK,EAAG,SAASA,EAAEC,IAAM,MAAMA,IAAOC,EAAGN,GAAO,MAAM,IAAIO,UAAU,yIAA4I,IAA6CC,IAAzCC,kBAAmB,EAAMC,QAAS,EAAY,MAAO,CAAET,EAAG,SAASA,IAAMjB,GAAKF,EAAEnB,OAAOC,aAAgB0B,EAAG,SAASA,IAAM,IAAIqB,KAAO3B,GAAG4B,OAAsC,OAA9BH,iBAAmBE,KAAKT,KAAaS,MAASP,EAAG,SAASA,EAAES,KAAOH,QAAS,EAAMF,IAAMK,KAAQP,EAAG,SAASA,IAAM,IAAWG,kBAAiC,MAAbzB,GAAG8B,QAAgB9B,GAAG8B,SAAY,QAAU,GAAIJ,OAAQ,MAAMF,OAIl9B,SAASnB,kBAAkB0B,IAAKC,MAAkB,MAAPA,KAAeA,IAAMD,IAAIjB,UAAQkB,IAAMD,IAAIjB,QAAQ,IAAK,IAAIC,EAAI,EAAGkB,KAAO,IAAIhC,MAAM+B,KAAMjB,EAAIiB,IAAKjB,IAAOkB,KAAKlB,GAAKgB,IAAIhB,GAAM,OAAOkB,KArBhL1B,OAAO2B,eAAelD,SAAU,aAAc,CAC5CmC,OAAO,IAETnC,SAASY,aAAU,EARrBX,QAAAS,uBAAAT,SACAC,iBAAAQ,uBAAAR,kBACAC,eAAAO,uBAAAP,gBACAC,cAAAM,uBAAAN,eACAC,mBAAAK,uBAAAL,oBACAC,aAaE,SAAS6C,wBAAwBzD,KAAO,GAAIA,KAAOA,IAAIiB,WAAc,OAAOjB,IAAO,GAAY,OAARA,KAAiC,WAAjBD,QAAQC,MAAoC,mBAARA,IAAsB,MAAO,CAAEkB,QAASlB,KAAS,IAAIe,MAAQF,2BAA4B,GAAIE,OAASA,MAAM2C,IAAI1D,KAAQ,OAAOe,MAAM4C,IAAI3D,KAAQ,IAAI4D,OAAS,GAAQC,sBAAwBhC,OAAO2B,gBAAkB3B,OAAOiC,yBAA0B,IAAK,IAAIC,OAAO/D,IAAO,GAAI6B,OAAOzB,UAAU4D,eAAejC,KAAK/B,IAAK+D,KAAM,CAAE,IAAIE,KAAOJ,sBAAwBhC,OAAOiC,yBAAyB9D,IAAK+D,KAAO,KAAUE,OAASA,KAAKN,KAAOM,KAAKC,KAAQrC,OAAO2B,eAAeI,OAAQG,IAAKE,MAAgBL,OAAOG,KAAO/D,IAAI+D,KAAYH,OAAO1C,QAAUlB,IAASe,OAASA,MAAMmD,IAAIlE,IAAK4D,QAAW,OAAOA,OAbluBH,CAAA7C,cAQA,IAAIuD,oBAAsB,EAE1B,SAASC,6BACL,OAAO,IAAIC,MAAOC,UAAYH,oBAGlCI,QAAAA,QAAOC,GAAGC,iBAAAA,QAAiB,gBAAgB,SAAU/B,EAAGgC,UACpD,IAAMC,MAAQD,SAASC,MACnBA,MAAMC,gBAAoD,SAAlCD,MAAMC,eAAeC,YAC7CV,qBAAsB,IAAIE,MAAOC,cA+IvC,IAAIQ,SAtCS,IAlFf,SAASC,qBAAqB,IACtBC,kBADsBC,MAAAC,KAwB1B,SAASC,OACDH,oBACAI,QAAQC,MAAM,sBACdL,kBAAkBG,OAClBH,kBAAoB,MAGxBM,OAAOC,oBAAoB,QAASJ,MAAM,GAC1CG,OAAOC,oBAAoB,YAAaJ,MAAM,GAC9CG,OAAOC,oBAAoB,UAAWJ,MAAM,GAGhDD,KAAKM,UAAY,WACb,OAA4B,MAArBR,mBAGXE,KAAKO,KAAO,WACR,IAAIC,WACEC,UAAYC,mBAAAA,QAAkBC,mBAEhCF,WAAaA,UAAUD,eACvBA,YAAa,GAGjB,IAAMI,YAnEd,SAASC,qBAAqBL,YAC1B,IAAIM,OACJ,IACIA,OAASpF,aAAa+C,IAAI,eAAe,GAC3C,MAAOb,KACLkD,OAASN,WAAa,sBAAwB,kBAGlD,IARsCO,MAAAC,UAAA/E,2BAQtBgF,eAAAA,QAAcC,OAAO,gBARC,IAUtC,IAAAF,UAAA3D,MAAA0D,MAAAC,UAAAtE,KAAAY,MAA8B,CAAA,IAAnB6D,OAAmBJ,MAAAxD,MAC1B,GAAI4D,OAAOC,KAAON,OACd,OAAOK,QAZuB,MAAAvD,KAAAoD,UAAAxD,EAAAI,KAAA,QAAAoD,UAAAtD,IAgBtC,OAAO,KAmDiBmD,CAAqBL,YAErCI,aA/CR,SAASS,gBAAgBT,aACrB,GAAId,kBACA,MAAM,IAAIwB,MAAM,8CAGpBpB,QAAQC,MAAM,uBAAyBS,YAAY7D,MAEnD6D,YAAYL,OACZT,kBAAoBc,aAEY,IAA5BA,YAAYW,aACZnB,OAAOoB,iBAAiB,QAASvB,MAAM,IAEX,IAA5BW,YAAYa,aACZrB,OAAOoB,iBAAiB,YAAavB,MAAM,IAEjB,IAA1BW,YAAYc,WACZtB,OAAOoB,iBAAiB,UAAWvB,MAAM,GA+BzCoB,CAAgBT,cAIxBZ,KAAKC,KAAO,WACRA,QAuBJ0B,aApBmB,SAAbC,aACE7B,MAAKO,aAILuB,cAAAA,QAAaC,WAnGd,MAuGC5C,2BAvGD,MA2GCK,iBAAAA,QAAgBwC,kBAIpBhC,MAAKQ,SAGe,MA2C1BnF,SAASY,QAAU4D","file":"screensavermanager.js","sourcesContent":["import events from 'events';\nimport playbackManager from 'playbackManager';\nimport pluginManager from 'pluginManager';\nimport inputManager from 'inputManager';\nimport connectionManager from 'connectionManager';\nimport * as userSettings from 'userSettings';\n\nfunction getMinIdleTime() {\n    // Returns the minimum amount of idle time required before the screen saver can be displayed\n    //time units used Millisecond\n    return 180000;\n}\n\nlet lastFunctionalEvent = 0;\n\nfunction getFunctionalEventIdleTime() {\n    return new Date().getTime() - lastFunctionalEvent;\n}\n\nevents.on(playbackManager, 'playbackstop', function (e, stopInfo) {\n    const state = stopInfo.state;\n    if (state.NowPlayingItem && state.NowPlayingItem.MediaType == 'Video') {\n        lastFunctionalEvent = new Date().getTime();\n    }\n});\n\nfunction getScreensaverPlugin(isLoggedIn) {\n    let option;\n    try {\n        option = userSettings.get('screensaver', false);\n    } catch (err) {\n        option = isLoggedIn ? 'backdropscreensaver' : 'logoscreensaver';\n    }\n\n    const plugins = pluginManager.ofType('screensaver');\n\n    for (const plugin of plugins) {\n        if (plugin.id === option) {\n            return plugin;\n        }\n    }\n\n    return null;\n}\n\nfunction ScreenSaverManager() {\n    let activeScreenSaver;\n\n    function showScreenSaver(screensaver) {\n        if (activeScreenSaver) {\n            throw new Error('An existing screensaver is already active.');\n        }\n\n        console.debug('Showing screensaver ' + screensaver.name);\n\n        screensaver.show();\n        activeScreenSaver = screensaver;\n\n        if (screensaver.hideOnClick !== false) {\n            window.addEventListener('click', hide, true);\n        }\n        if (screensaver.hideOnMouse !== false) {\n            window.addEventListener('mousemove', hide, true);\n        }\n        if (screensaver.hideOnKey !== false) {\n            window.addEventListener('keydown', hide, true);\n        }\n    }\n\n    function hide() {\n        if (activeScreenSaver) {\n            console.debug('Hiding screensaver');\n            activeScreenSaver.hide();\n            activeScreenSaver = null;\n        }\n\n        window.removeEventListener('click', hide, true);\n        window.removeEventListener('mousemove', hide, true);\n        window.removeEventListener('keydown', hide, true);\n    }\n\n    this.isShowing = () => {\n        return activeScreenSaver != null;\n    };\n\n    this.show = function () {\n        let isLoggedIn;\n        const apiClient = connectionManager.currentApiClient();\n\n        if (apiClient && apiClient.isLoggedIn()) {\n            isLoggedIn = true;\n        }\n\n        const screensaver = getScreensaverPlugin(isLoggedIn);\n\n        if (screensaver) {\n            showScreenSaver(screensaver);\n        }\n    };\n\n    this.hide = function () {\n        hide();\n    };\n\n    const onInterval = () => {\n        if (this.isShowing()) {\n            return;\n        }\n\n        if (inputManager.idleTime() < getMinIdleTime()) {\n            return;\n        }\n\n        if (getFunctionalEventIdleTime < getMinIdleTime()) {\n            return;\n        }\n\n        if (playbackManager.isPlayingVideo()) {\n            return;\n        }\n\n        this.show();\n    };\n\n    setInterval(onInterval, 10000);\n}\n\nexport default new ScreenSaverManager;\n"]}