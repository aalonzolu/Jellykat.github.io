{"version":3,"sources":["scripts/taskbutton.js"],"names":["define","_exports","_events","_serverNotifications","_connectionManager","_globalize","_embyButton","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_default","options","pollTasks","connectionManager","getApiClient","serverId","getScheduledTasks","IsEnabled","then","updateTasks","tasks","task","filter","t","Key","taskKey","panel","classList","remove","add","State","button","removeAttribute","setAttribute","Id","progress","CurrentProgressPercentage","toFixed","progressElem","lastResultElem","lastResult","LastExecutionResult","Status","html","globalize","translate","onButtonClick","onScheduledTaskMessageConfirmed","id","startScheduledTask","this","getAttribute","onScheduledTasksUpdate","e","apiClient","info","pollInterval","ApiClient","onPollIntervalFired","isMessageChannelOpen","mode","removeEventListener","events","off","serverNotifications","stopInterval","sendMessage","clearInterval","addEventListener","startInterval","setInterval","on"],"mappings":"AAAAA,OAAO,CAAC,UAAW,SAAU,sBAAuB,oBAAqB,YAAa,gBAAgB,SAAUC,SAAUC,QAASC,qBAAsBC,mBAAoBC,WAAYC,aACvL,aAWA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KATvFG,OAAOC,eAAeX,SAAU,aAAc,CAC5CY,OAAO,IAETZ,SAASS,QACI,SAAAI,SAAUC,SACrB,SAASC,YACLC,mBAAAA,QAAkBC,aAAaC,UAAUC,kBAAkB,CACvDC,WAAW,IACZC,KAAKC,aAGZ,SAASA,YAAYC,OACjB,IAAMC,KAAOD,MAAME,QAAO,SAAUC,GAChC,OAAOA,EAAEC,KAAOb,QAAQc,WACzB,GAUH,GARId,QAAQe,QACJL,KACAV,QAAQe,MAAMC,UAAUC,OAAO,QAE/BjB,QAAQe,MAAMC,UAAUE,IAAI,SAI/BR,KAAL,CAIkB,QAAdA,KAAKS,MACLC,OAAOC,gBAAgB,YAEvBD,OAAOE,aAAa,WAAY,YAGpCF,OAAOE,aAAa,cAAeZ,KAAKa,IACxC,IAAMC,UAAYd,KAAKe,2BAA6B,GAAGC,QAAQ,GAY/D,GAVI1B,QAAQ2B,eACR3B,QAAQ2B,aAAa7B,MAAQ0B,SAEX,WAAdd,KAAKS,MACLnB,QAAQ2B,aAAaX,UAAUC,OAAO,QAEtCjB,QAAQ2B,aAAaX,UAAUE,IAAI,SAIvClB,QAAQ4B,eAAgB,CACxB,IAAMC,WAAanB,KAAKoB,oBAAsBpB,KAAKoB,oBAAoBC,OAAS,GAE9D,UAAdF,WACA7B,QAAQ4B,eAAeI,KAAK,iCAAmCC,WAAAA,QAAUC,UAAU,eAAiB,YAC/E,aAAdL,WACP7B,QAAQ4B,eAAeI,KAAK,iCAAmCC,WAAAA,QAAUC,UAAU,kBAAoB,YAClF,WAAdL,WACP7B,QAAQ4B,eAAeI,KAAK,gCAAkCC,WAAAA,QAAUC,UAAU,gCAAkC,WAEpHlC,QAAQ4B,eAAeI,KAAKH,cASxC,SAASM,iBAJT,SAASC,gCAAgCC,IACrCnC,mBAAAA,QAAkBC,aAAaC,UAAUkC,mBAAmBD,IAAI9B,KAAKN,WAIrEmC,CAAgCG,KAAKC,aAAa,gBAGtD,SAASC,uBAAuBC,EAAGC,UAAWC,MACtCD,UAAUvC,aAAeA,UACzBI,YAAYoC,MAIpB,IAAIC,aACEzB,OAASpB,QAAQoB,OACjBhB,SAAW0C,UAAU1C,WAE3B,SAAS2C,sBACA7C,mBAAAA,QAAkBC,aAAaC,UAAU4C,wBAC1C/C,YAsBJD,QAAQe,OACRf,QAAQe,MAAMC,UAAUE,IAAI,QAGZ,OAAhBlB,QAAQiD,MACR7B,OAAO8B,oBAAoB,QAASf,eACpCgB,QAAAA,QAAOC,IAAIC,qBAAAA,QAAqB,qBAAsBZ,wBAd1D,SAASa,eACLpD,mBAAAA,QAAkBC,aAAaC,UAAUmD,YAAY,0BAEjDV,cACAW,cAAcX,cAWlBS,KAEAlC,OAAOqC,iBAAiB,QAAStB,eACjClC,YA5BJ,SAASyD,gBACL,IAAMf,UAAYzC,mBAAAA,QAAkBC,aAAaC,UAE7CyC,cACAW,cAAcX,cAElBF,UAAUY,YAAY,0BAA2B,aACjDV,aAAec,YAAYZ,oBAAqB,KAsBhDW,GACAP,QAAAA,QAAOS,GAAGP,qBAAAA,QAAqB,qBAAsBZ,0BAtH7DtD,QAAAK,uBAAAL,SACAC,qBAAAI,uBAAAJ,sBACAC,mBAAAG,uBAAAH,oBACAC,WAAAE,uBAAAF","file":"taskbutton.js","sourcesContent":["\nimport events from 'events';\nimport serverNotifications from 'serverNotifications';\nimport connectionManager from 'connectionManager';\nimport globalize from 'globalize';\nimport 'emby-button';\n\nexport default function (options) {\n    function pollTasks() {\n        connectionManager.getApiClient(serverId).getScheduledTasks({\n            IsEnabled: true\n        }).then(updateTasks);\n    }\n\n    function updateTasks(tasks) {\n        const task = tasks.filter(function (t) {\n            return t.Key == options.taskKey;\n        })[0];\n\n        if (options.panel) {\n            if (task) {\n                options.panel.classList.remove('hide');\n            } else {\n                options.panel.classList.add('hide');\n            }\n        }\n\n        if (!task) {\n            return;\n        }\n\n        if (task.State == 'Idle') {\n            button.removeAttribute('disabled');\n        } else {\n            button.setAttribute('disabled', 'disabled');\n        }\n\n        button.setAttribute('data-taskid', task.Id);\n        const progress = (task.CurrentProgressPercentage || 0).toFixed(1);\n\n        if (options.progressElem) {\n            options.progressElem.value = progress;\n\n            if (task.State == 'Running') {\n                options.progressElem.classList.remove('hide');\n            } else {\n                options.progressElem.classList.add('hide');\n            }\n        }\n\n        if (options.lastResultElem) {\n            const lastResult = task.LastExecutionResult ? task.LastExecutionResult.Status : '';\n\n            if (lastResult == 'Failed') {\n                options.lastResultElem.html('<span style=\"color:#FF0000;\">(' + globalize.translate('LabelFailed') + ')</span>');\n            } else if (lastResult == 'Cancelled') {\n                options.lastResultElem.html('<span style=\"color:#0026FF;\">(' + globalize.translate('LabelCancelled') + ')</span>');\n            } else if (lastResult == 'Aborted') {\n                options.lastResultElem.html('<span style=\"color:#FF0000;\">' + globalize.translate('LabelAbortedByServerShutdown') + '</span>');\n            } else {\n                options.lastResultElem.html(lastResult);\n            }\n        }\n    }\n\n    function onScheduledTaskMessageConfirmed(id) {\n        connectionManager.getApiClient(serverId).startScheduledTask(id).then(pollTasks);\n    }\n\n    function onButtonClick() {\n        onScheduledTaskMessageConfirmed(this.getAttribute('data-taskid'));\n    }\n\n    function onScheduledTasksUpdate(e, apiClient, info) {\n        if (apiClient.serverId() === serverId) {\n            updateTasks(info);\n        }\n    }\n\n    let pollInterval;\n    const button = options.button;\n    const serverId = ApiClient.serverId();\n\n    function onPollIntervalFired() {\n        if (!connectionManager.getApiClient(serverId).isMessageChannelOpen()) {\n            pollTasks();\n        }\n    }\n\n    function startInterval() {\n        const apiClient = connectionManager.getApiClient(serverId);\n\n        if (pollInterval) {\n            clearInterval(pollInterval);\n        }\n        apiClient.sendMessage('ScheduledTasksInfoStart', '1000,1000');\n        pollInterval = setInterval(onPollIntervalFired, 5000);\n    }\n\n    function stopInterval() {\n        connectionManager.getApiClient(serverId).sendMessage('ScheduledTasksInfoStop');\n\n        if (pollInterval) {\n            clearInterval(pollInterval);\n        }\n    }\n\n    if (options.panel) {\n        options.panel.classList.add('hide');\n    }\n\n    if (options.mode == 'off') {\n        button.removeEventListener('click', onButtonClick);\n        events.off(serverNotifications, 'ScheduledTasksInfo', onScheduledTasksUpdate);\n        stopInterval();\n    } else {\n        button.addEventListener('click', onButtonClick);\n        pollTasks();\n        startInterval();\n        events.on(serverNotifications, 'ScheduledTasksInfo', onScheduledTasksUpdate);\n    }\n}\n"]}