{"version":3,"sources":["scripts/livetvcomponents.js"],"names":["define","_layoutManager","_datetime","_cardBuilder","_interopRequireDefault","obj","__esModule","default","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","from","test","length","i","F","s","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","arr","len","arr2","enableScrollX","layoutManager","desktop","window","LiveTvHelpers","getTimersHtml","timers","options","_step","groups","currentGroupName","currentGroup","_iterator","map","t","Type","item","dateText","indexByDate","StartDate","premiereDate","datetime","parseISO8601Date","toLocaleDateString","weekday","month","day","console","error","push","items","html","_i","_groups","group","scrollXClass","tv","cardBuilder","getCardsHtml","shape","showParentTitleOrTitle","showAirTime","showAirEndTime","showChannelName","cardLayout","centerText","action","cardFooterAside","preferThumb","defaultShape","coverImage","allowBottomPadding","overlayText","showChannelLogo","Promise","resolve"],"mappings":"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","file":"livetvcomponents.js","sourcesContent":["import layoutManager from 'layoutManager';\nimport datetime from 'datetime';\nimport cardBuilder from 'cardBuilder';\n\nfunction enableScrollX() {\n    return !layoutManager.desktop;\n}\n\nfunction getBackdropShape() {\n    return enableScrollX() ? 'overflowBackdrop' : 'backdrop';\n}\n\nfunction getTimersHtml(timers, options) {\n    options = options || {};\n\n    const items = timers.map(function (t) {\n        t.Type = 'Timer';\n        return t;\n    });\n\n    const groups = [];\n    let currentGroupName = '';\n    let currentGroup = [];\n\n    for (const item of items) {\n        let dateText = '';\n\n        if (options.indexByDate !== false && item.StartDate) {\n            try {\n                const premiereDate = datetime.parseISO8601Date(item.StartDate, true);\n                dateText = datetime.toLocaleDateString(premiereDate, {\n                    weekday: 'long',\n                    month: 'short',\n                    day: 'numeric'\n                });\n            } catch (err) {\n                console.error('error parsing premiereDate:' + item.StartDate + '; error: ' + err);\n            }\n        }\n\n        if (dateText != currentGroupName) {\n            if (currentGroup.length) {\n                groups.push({\n                    name: currentGroupName,\n                    items: currentGroup\n                });\n            }\n\n            currentGroupName = dateText;\n            currentGroup = [item];\n        } else {\n            currentGroup.push(item);\n        }\n    }\n\n    if (currentGroup.length) {\n        groups.push({\n            name: currentGroupName,\n            items: currentGroup\n        });\n    }\n    let html = '';\n    for (const group of groups) {\n        if (group.name) {\n            html += '<div class=\"verticalSection\">';\n            html += '<h2 class=\"sectionTitle sectionTitle-cards padded-left\">' + group.name + '</h2>';\n        }\n\n        if (enableScrollX()) {\n            let scrollXClass = 'scrollX hiddenScrollX';\n            if (layoutManager.tv) {\n                scrollXClass += ' smoothScrollX';\n            }\n            html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer ' + scrollXClass + ' padded-left padded-right\">';\n        } else {\n            html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer vertical-wrap padded-left padded-right\">';\n        }\n\n        html += cardBuilder.getCardsHtml({\n            items: group.items,\n            shape: getBackdropShape(),\n            showParentTitleOrTitle: true,\n            showAirTime: true,\n            showAirEndTime: true,\n            showChannelName: false,\n            cardLayout: true,\n            centerText: false,\n            action: 'edit',\n            cardFooterAside: 'none',\n            preferThumb: true,\n            defaultShape: null,\n            coverImage: true,\n            allowBottomPadding: false,\n            overlayText: false,\n            showChannelLogo: true\n        });\n\n        html += '</div>';\n\n        if (group.name) {\n            html += '</div>';\n        }\n    }\n    return Promise.resolve(html);\n}\n\nwindow.LiveTvHelpers = {\n    getTimersHtml: getTimersHtml\n};\n"]}