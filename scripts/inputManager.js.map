{"version":3,"sources":["scripts/inputManager.js"],"names":["define","_exports","_playbackManager","_focusManager","_appRouter","_dom","_apphost","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","notify","notifyMouseMove","idleTime","select","_select","on","off","handleCommand","lastInputTime","Date","getTime","sourceElement","click","eventListenerCount","scope","fn","dom","addEventListener","removeEventListener","commandTimes","commandName","options","focusManager","focusableParent","document","activeElement","window","dialogs","querySelectorAll","dlg","length","contains","customEvent","CustomEvent","detail","command","bubbles","cancelable","dispatchEvent","action","keyActions","up","moveUp","down","moveDown","left","moveLeft","right","moveRight","home","appRouter","goHome","settings","showSettings","back","canGoBack","appHost","supports","exit","nextchapter","playbackManager","nextChapter","next","nextTrack","nexttrack","previous","previousTrack","previoustrack","previouschapter","previousChapter","guide","showGuide","recordedtv","showRecordedTV","livetv","showLiveTV","mute","setMute","unmute","togglemute","toggleMute","channelup","channelUp","channeldown","channelDown","volumedown","volumeDown","volumeup","volumeUp","play","unpause","pause","playpause","playPause","stop","checkCommandTime","last","now","changezoom","toggleAspectRatio","increaseplaybackrate","increasePlaybackRate","decreaseplaybackrate","decreasePlaybackRate","changeaudiotrack","changeAudioStream","changesubtitletrack","changeSubtitleStream","search","showSearch","favorites","showFavorites","fastforward","fastForward","rewind","seek","seekMs","togglefullscreen","toggleFullscreen","disabledisplaymirror","enableDisplayMirroring","enabledisplaymirror","toggledisplaymirror","toggleDisplayMirroring","nowplaying","showNowPlaying","repeatnone","setRepeatMode","repeatall","repeatone","undefined","call","console","debug","concat","passive","_default"],"mappings":"AAAAA,OAAO,CAAC,UAAW,kBAAmB,eAAgB,YAAa,MAAO,YAAY,SAAUC,SAAUC,iBAAkBC,cAAeC,WAAYC,KAAMC,UAC3J,aAmBA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KAjBvFG,OAAOC,eAAeX,SAAU,aAAc,CAC5CY,OAAO,IAETZ,SAASa,OAASA,OAClBb,SAASc,gBAAkBA,gBAC3Bd,SAASe,SAAWA,SACpBf,SAASgB,OAASC,QAClBjB,SAASkB,GAAKA,GACdlB,SAASmB,IAAMA,IACfnB,SAASoB,cAAgBA,cACzBpB,SAASS,aAAU,EAbrBR,iBAAAK,uBAAAL,kBACAC,cAAAI,uBAAAJ,eACAC,WAAAG,uBAAAH,YACAC,KAAAE,uBAAAF,MACAC,SAAAC,uBAAAD,UAII,IAAIgB,eAAgB,IAAIC,MAAOC,UAExB,SAASV,SACZQ,eAAgB,IAAIC,MAAOC,UAC3BH,cAAc,WAGX,SAASN,kBACZO,eAAgB,IAAIC,MAAOC,UAGxB,SAASR,WACZ,OAAO,IAAIO,MAAOC,UAAYF,cAG3B,SAASL,QAAOQ,eACnBA,cAAcC,QAGlB,IAAIC,mBAAqB,EAClB,SAASR,GAAGS,MAAOC,IACtBF,qBACAG,KAAAA,QAAIC,iBAAiBH,MAAO,UAAWC,GAAI,IAGxC,SAAST,IAAIQ,MAAOC,IACnBF,oBACAA,qBAGJG,KAAAA,QAAIE,oBAAoBJ,MAAO,UAAWC,GAAI,IAGlD,IAAMI,aAAe,GAcd,SAASZ,cAAca,YAAaC,SACvCb,eAAgB,IAAIC,MAAOC,UAE3B,IAAIC,cAAiBU,QAAUA,QAAQV,cAAgB,KAMvD,GAJIA,gBACAA,cAAgBW,cAAAA,QAAaC,gBAAgBZ,iBAG5CA,cAAe,CAChBA,cAAgBa,SAASC,eAAiBC,OAE1C,IAAMC,QAAUH,SAASI,iBAAiB,mCAGpCC,IAAMF,QAAQG,OAASH,QAAQA,QAAQG,OAAS,GAAK,KAEvDD,MAAQA,IAAIE,SAASpB,iBACrBA,cAAgBkB,KAIxB,GAAIhB,mBAAoB,CACpB,IAAMmB,YAAc,IAAIC,YAAY,UAAW,CAC3CC,OAAQ,CACJC,QAASf,aAEbgB,SAAS,EACTC,YAAY,IAIhB,IADoB1B,cAAc2B,cAAcN,aAG5C,OAIR,IAmJMO,OAnJa,SAAbC,WAAcL,SAAD,MAAc,CAC7BM,GAAM,SAAAA,KACFnB,cAAAA,QAAaoB,OAAO/B,gBAExBgC,KAAQ,SAAAA,OACJrB,cAAAA,QAAasB,SAASjC,gBAE1BkC,KAAQ,SAAAA,OACJvB,cAAAA,QAAawB,SAASnC,gBAE1BoC,MAAS,SAAAA,QACLzB,cAAAA,QAAa0B,UAAUrC,gBAE3BsC,KAAQ,SAAAA,OACJC,WAAAA,QAAUC,UAEdC,SAAY,SAAAA,WACRF,WAAAA,QAAUG,gBAEdC,KAAQ,SAAAA,OACAJ,WAAAA,QAAUK,YACVL,WAAAA,QAAUI,OACHE,SAAAA,QAAQC,SAAS,SACxBD,SAAAA,QAAQE,QAGhBvD,OAAU,SAAAA,SACNA,QAAOQ,gBAEXgD,YAAe,SAAAA,cACXC,iBAAAA,QAAgBC,eAEpBC,KAAQ,SAAAA,OACJF,iBAAAA,QAAgBG,aAEpBC,UAAa,SAAAA,YACTJ,iBAAAA,QAAgBG,aAEpBE,SAAY,SAAAA,WACRL,iBAAAA,QAAgBM,iBAEpBC,cAAiB,SAAAA,gBACbP,iBAAAA,QAAgBM,iBAEpBE,gBAAmB,SAAAA,kBACfR,iBAAAA,QAAgBS,mBAEpBC,MAAS,SAAAA,QACLpB,WAAAA,QAAUqB,aAEdC,WAAc,SAAAA,aACVtB,WAAAA,QAAUuB,kBAEdC,OAAU,SAAAA,SACNxB,WAAAA,QAAUyB,cAEdC,KAAQ,SAAAA,OACJhB,iBAAAA,QAAgBiB,SAAQ,IAE5BC,OAAU,SAAAA,SACNlB,iBAAAA,QAAgBiB,SAAQ,IAE5BE,WAAc,SAAAA,aACVnB,iBAAAA,QAAgBoB,cAEpBC,UAAa,SAAAA,YACTrB,iBAAAA,QAAgBsB,aAEpBC,YAAe,SAAAA,cACXvB,iBAAAA,QAAgBwB,eAEpBC,WAAc,SAAAA,aACVzB,iBAAAA,QAAgB0B,cAEpBC,SAAY,SAAAA,WACR3B,iBAAAA,QAAgB4B,YAEpBC,KAAQ,SAAAA,OACJ7B,iBAAAA,QAAgB8B,WAEpBC,MAAS,SAAAA,QACL/B,iBAAAA,QAAgB+B,SAEpBC,UAAa,SAAAA,YACThC,iBAAAA,QAAgBiC,aAEpBC,KAAQ,SAAAA,QAxIhB,SAASC,iBAAiB5D,SACtB,IAAM6D,KAAO7E,aAAagB,UAAY,EAChC8D,KAAM,IAAIxF,MAAOC,UAEvB,QAAKuF,IAAMD,KAAQ,OAInB7E,aAAagB,SAAW8D,KACjB,IAgIKF,CAAiB,SACjBnC,iBAAAA,QAAgBkC,QAGxBI,WAAc,SAAAA,aACVtC,iBAAAA,QAAgBuC,qBAEpBC,qBAAwB,SAAAA,uBACpBxC,iBAAAA,QAAgByC,wBAEpBC,qBAAwB,SAAAA,uBACpB1C,iBAAAA,QAAgB2C,wBAEpBC,iBAAoB,SAAAA,mBAChB5C,iBAAAA,QAAgB6C,qBAEpBC,oBAAuB,SAAAA,sBACnB9C,iBAAAA,QAAgB+C,wBAEpBC,OAAU,SAAAA,SACN1D,WAAAA,QAAU2D,cAEdC,UAAa,SAAAA,YACT5D,WAAAA,QAAU6D,iBAEdC,YAAe,SAAAA,cACXpD,iBAAAA,QAAgBqD,eAEpBC,OAAU,SAAAA,SACNtD,iBAAAA,QAAgBsD,UAEpBC,KAAQ,SAAAA,OACJvD,iBAAAA,QAAgBwD,OAAO/F,UAE3BgG,iBAAoB,SAAAA,mBAChBzD,iBAAAA,QAAgB0D,oBAEpBC,qBAAwB,SAAAA,uBACpB3D,iBAAAA,QAAgB4D,wBAAuB,IAE3CC,oBAAuB,SAAAA,sBACnB7D,iBAAAA,QAAgB4D,wBAAuB,IAE3CE,oBAAuB,SAAAA,sBACnB9D,iBAAAA,QAAgB+D,0BAEpBC,WAAc,SAAAA,aACV1E,WAAAA,QAAU2E,kBAEdC,WAAc,SAAAA,aACVlE,iBAAAA,QAAgBmE,cAAc,eAElCC,UAAa,SAAAA,YACTpE,iBAAAA,QAAgBmE,cAAc,cAElCE,UAAa,SAAAA,YACTrE,iBAAAA,QAAgBmE,cAAc,eAEnC5F,SAEYK,CAAWpB,kBACX8G,IAAX3F,OACAA,OAAO4F,OAEPC,QAAQC,MAAR,mEAAAC,OAAiFlH,cAIzFJ,KAAAA,QAAIC,iBAAiBO,SAAU,QAASxB,OAAQ,CAC5CuI,SAAS,IAsBf,IAAIC,SAjBS,CACXjI,cAAeA,cACfP,OAAQA,OACRC,gBAAiBA,gBACjBC,SAAUA,SACVG,GAAIA,GACJC,IAAKA,KAmBPnB,SAASS,QAAU4I","file":"inputManager.js","sourcesContent":["import playbackManager from 'playbackManager';\nimport focusManager from 'focusManager';\nimport appRouter from 'appRouter';\nimport dom from 'dom';\nimport appHost from 'apphost';\n\n/* eslint-disable indent */\n\n    let lastInputTime = new Date().getTime();\n\n    export function notify() {\n        lastInputTime = new Date().getTime();\n        handleCommand('unknown');\n    }\n\n    export function notifyMouseMove() {\n        lastInputTime = new Date().getTime();\n    }\n\n    export function idleTime() {\n        return new Date().getTime() - lastInputTime;\n    }\n\n    export function select(sourceElement) {\n        sourceElement.click();\n    }\n\n    let eventListenerCount = 0;\n    export function on(scope, fn) {\n        eventListenerCount++;\n        dom.addEventListener(scope, 'command', fn, {});\n    }\n\n    export function off(scope, fn) {\n        if (eventListenerCount) {\n            eventListenerCount--;\n        }\n\n        dom.removeEventListener(scope, 'command', fn, {});\n    }\n\n    const commandTimes = {};\n\n    function checkCommandTime(command) {\n        const last = commandTimes[command] || 0;\n        const now = new Date().getTime();\n\n        if ((now - last) < 1000) {\n            return false;\n        }\n\n        commandTimes[command] = now;\n        return true;\n    }\n\n    export function handleCommand(commandName, options) {\n        lastInputTime = new Date().getTime();\n\n        let sourceElement = (options ? options.sourceElement : null);\n\n        if (sourceElement) {\n            sourceElement = focusManager.focusableParent(sourceElement);\n        }\n\n        if (!sourceElement) {\n            sourceElement = document.activeElement || window;\n\n            const dialogs = document.querySelectorAll('.dialogContainer .dialog.opened');\n\n            // Suppose the top open dialog is active\n            const dlg = dialogs.length ? dialogs[dialogs.length - 1] : null;\n\n            if (dlg && !dlg.contains(sourceElement)) {\n                sourceElement = dlg;\n            }\n        }\n\n        if (eventListenerCount) {\n            const customEvent = new CustomEvent('command', {\n                detail: {\n                    command: commandName\n                },\n                bubbles: true,\n                cancelable: true\n            });\n\n            const eventResult = sourceElement.dispatchEvent(customEvent);\n            if (!eventResult) {\n                // event cancelled\n                return;\n            }\n        }\n\n        const keyActions = (command) => ({\n            'up': () => {\n                focusManager.moveUp(sourceElement);\n            },\n            'down': () => {\n                focusManager.moveDown(sourceElement);\n            },\n            'left': () => {\n                focusManager.moveLeft(sourceElement);\n            },\n            'right': () => {\n                focusManager.moveRight(sourceElement);\n            },\n            'home': () => {\n                appRouter.goHome();\n            },\n            'settings': () => {\n                appRouter.showSettings();\n            },\n            'back': () => {\n                if (appRouter.canGoBack()) {\n                    appRouter.back();\n                } else if (appHost.supports('exit')) {\n                    appHost.exit();\n                }\n            },\n            'select': () => {\n                select(sourceElement);\n            },\n            'nextchapter': () => {\n                playbackManager.nextChapter();\n            },\n            'next': () => {\n                playbackManager.nextTrack();\n            },\n            'nexttrack': () => {\n                playbackManager.nextTrack();\n            },\n            'previous': () => {\n                playbackManager.previousTrack();\n            },\n            'previoustrack': () => {\n                playbackManager.previousTrack();\n            },\n            'previouschapter': () => {\n                playbackManager.previousChapter();\n            },\n            'guide': () => {\n                appRouter.showGuide();\n            },\n            'recordedtv': () => {\n                appRouter.showRecordedTV();\n            },\n            'livetv': () => {\n                appRouter.showLiveTV();\n            },\n            'mute': () => {\n                playbackManager.setMute(true);\n            },\n            'unmute': () => {\n                playbackManager.setMute(false);\n            },\n            'togglemute': () => {\n                playbackManager.toggleMute();\n            },\n            'channelup': () => {\n                playbackManager.channelUp();\n            },\n            'channeldown': () => {\n                playbackManager.channelDown();\n            },\n            'volumedown': () => {\n                playbackManager.volumeDown();\n            },\n            'volumeup': () => {\n                playbackManager.volumeUp();\n            },\n            'play': () => {\n                playbackManager.unpause();\n            },\n            'pause': () => {\n                playbackManager.pause();\n            },\n            'playpause': () => {\n                playbackManager.playPause();\n            },\n            'stop': () => {\n                if (checkCommandTime('stop')) {\n                    playbackManager.stop();\n                }\n            },\n            'changezoom': () => {\n                playbackManager.toggleAspectRatio();\n            },\n            'increaseplaybackrate': () => {\n                playbackManager.increasePlaybackRate();\n            },\n            'decreaseplaybackrate': () => {\n                playbackManager.decreasePlaybackRate();\n            },\n            'changeaudiotrack': () => {\n                playbackManager.changeAudioStream();\n            },\n            'changesubtitletrack': () => {\n                playbackManager.changeSubtitleStream();\n            },\n            'search': () => {\n                appRouter.showSearch();\n            },\n            'favorites': () => {\n                appRouter.showFavorites();\n            },\n            'fastforward': () => {\n                playbackManager.fastForward();\n            },\n            'rewind': () => {\n                playbackManager.rewind();\n            },\n            'seek': () => {\n                playbackManager.seekMs(options);\n            },\n            'togglefullscreen': () => {\n                playbackManager.toggleFullscreen();\n            },\n            'disabledisplaymirror': () => {\n                playbackManager.enableDisplayMirroring(false);\n            },\n            'enabledisplaymirror': () => {\n                playbackManager.enableDisplayMirroring(true);\n            },\n            'toggledisplaymirror': () => {\n                playbackManager.toggleDisplayMirroring();\n            },\n            'nowplaying': () => {\n                appRouter.showNowPlaying();\n            },\n            'repeatnone': () => {\n                playbackManager.setRepeatMode('RepeatNone');\n            },\n            'repeatall': () => {\n                playbackManager.setRepeatMode('RepeatAll');\n            },\n            'repeatone': () => {\n                playbackManager.setRepeatMode('RepeatOne');\n            }\n        })[command];\n\n        const action = keyActions(commandName);\n        if (action !== undefined) {\n            action.call();\n        } else {\n            console.debug(`inputManager: tried to process command with no action assigned: ${commandName}`);\n        }\n    }\n\n    dom.addEventListener(document, 'click', notify, {\n        passive: true\n    });\n\n/* eslint-enable indent */\n\nexport default {\n    handleCommand: handleCommand,\n    notify: notify,\n    notifyMouseMove: notifyMouseMove,\n    idleTime: idleTime,\n    on: on,\n    off: off\n};\n"]}