{"version":3,"sources":["scripts/settings/appSettings.js"],"names":["define","_exports","_appStorage","_events","_interopRequireDefault","obj","__esModule","default","getKey","name","userId","enableAutoLogin","val","undefined","this","set","toString","get","enableSystemExternalPlayers","enableAutomaticBitrateDetection","isInNetwork","mediaType","key","maxStreamingBitrate","parseInt","maxStaticMusicBitrate","maxChromecastBitrate","value","currentValue","appStorage","setItem","events","trigger","getItem","Object","defineProperty","_default"],"mappings":"AAAAA,OAAO,CAAC,UAAW,aAAc,WAAW,SAAUC,SAAUC,YAAaC,SAC3E,aAiBA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KAbrF,SAASG,OAAOC,KAAMC,QAKlB,OAJIA,SACAD,KAAOC,OAAS,IAAMD,MAGnBA,KAGJ,SAASE,gBAAgBC,KAK5B,YAJYC,IAARD,KACAE,KAAKC,IAAI,kBAAmBH,IAAII,YAGG,UAAhCF,KAAKG,IAAI,mBAGb,SAASC,4BAA4BN,KAKxC,YAJYC,IAARD,KACAE,KAAKC,IAAI,8BAA+BH,IAAII,YAGG,SAA5CF,KAAKG,IAAI,+BAGb,SAASE,gCAAgCC,YAAaC,UAAWT,KACpE,IAAMU,IAAM,4BAA8BD,UAAY,IAAMD,YAS5D,YARYP,IAARD,MACIQ,aAA6B,UAAdC,YACfT,KAAM,GAGVE,KAAKC,IAAIO,IAAKV,IAAII,gBAGlBI,aAA6B,UAAdC,YAGU,UAAlBP,KAAKG,IAAIK,KAIjB,SAASC,oBAAoBH,YAAaC,UAAWT,KACxD,IAAMU,IAAM,cAAgBD,UAAY,IAAMD,YAS9C,YARYP,IAARD,MACIQ,aAA6B,UAAdC,WAGfP,KAAKC,IAAIO,IAAKV,MAIlBQ,aAA6B,UAAdC,UAER,KAEAG,SAASV,KAAKG,IAAIK,MAAQ,MAAQ,KAI1C,SAASG,sBAAsBb,UACtBC,IAARD,KACAE,KAAKC,IAAI,wBAAyBH,KAItC,OAAOY,SAASV,KAAKG,IAAI,0BADJ,KAC6CD,aAD7C,KAIlB,SAASU,qBAAqBd,KAMjC,YALYC,IAARD,KACAE,KAAKC,IAAI,qBAAsBH,MAGnCA,IAAME,KAAKG,IAAI,uBACFO,SAASZ,KAAO,KAG1B,SAASG,IAAIN,KAAMkB,MAAOjB,QAC7B,IAAMkB,aAAed,KAAKG,IAAIR,KAAMC,QACpCmB,YAAAA,QAAWC,QAAQtB,OAAOC,KAAMC,QAASiB,OAErCC,eAAiBD,OACjBI,QAAAA,QAAOC,QAAQlB,KAAM,SAAU,CAACL,OAIjC,SAASQ,IAAIR,KAAMC,QACtB,OAAOmB,YAAAA,QAAWI,QAAQzB,OAAOC,KAAMC,SAzF7CwB,OAAOC,eAAelC,SAAU,aAAc,CAC5C0B,OAAO,IAET1B,SAASU,gBAAkBA,gBAC3BV,SAASiB,4BAA8BA,4BACvCjB,SAASkB,gCAAkCA,gCAC3ClB,SAASsB,oBAAsBA,oBAC/BtB,SAASwB,sBAAwBA,sBACjCxB,SAASyB,qBAAuBA,qBAChCzB,SAASc,IAAMA,IACfd,SAASgB,IAAMA,IACfhB,SAASM,aAAU,EAZrBL,YAAAE,uBAAAF,aACAC,QAAAC,uBAAAD,SAgHE,IAAIiC,SAlBS,CACXzB,gBAAiBA,gBACjBO,4BAA6BA,4BAC7BC,gCAAiCA,gCACjCI,oBAAqBA,oBACrBE,sBAAuBA,sBACvBC,qBAAsBA,qBACtBX,IAAKA,IACLE,IAAKA,KAoBPhB,SAASM,QAAU6B","file":"appSettings.js","sourcesContent":["/* eslint-disable indent */\n\nimport appStorage from 'appStorage';\nimport events from 'events';\n\n    function getKey(name, userId) {\n        if (userId) {\n            name = userId + '-' + name;\n        }\n\n        return name;\n    }\n\n    export function enableAutoLogin(val) {\n        if (val !== undefined) {\n            this.set('enableAutoLogin', val.toString());\n        }\n\n        return this.get('enableAutoLogin') !== 'false';\n    }\n\n    export function enableSystemExternalPlayers(val) {\n        if (val !== undefined) {\n            this.set('enableSystemExternalPlayers', val.toString());\n        }\n\n        return this.get('enableSystemExternalPlayers') === 'true';\n    }\n\n    export function enableAutomaticBitrateDetection(isInNetwork, mediaType, val) {\n        const key = 'enableautobitratebitrate-' + mediaType + '-' + isInNetwork;\n        if (val !== undefined) {\n            if (isInNetwork && mediaType === 'Audio') {\n                val = true;\n            }\n\n            this.set(key, val.toString());\n        }\n\n        if (isInNetwork && mediaType === 'Audio') {\n            return true;\n        } else {\n            return this.get(key) !== 'false';\n        }\n    }\n\n    export function maxStreamingBitrate(isInNetwork, mediaType, val) {\n        const key = 'maxbitrate-' + mediaType + '-' + isInNetwork;\n        if (val !== undefined) {\n            if (isInNetwork && mediaType === 'Audio') {\n                //  nothing to do, this is always a max value\n            } else {\n                this.set(key, val);\n            }\n        }\n\n        if (isInNetwork && mediaType === 'Audio') {\n            // return a huge number so that it always direct plays\n            return 150000000;\n        } else {\n            return parseInt(this.get(key) || '0') || 1500000;\n        }\n    }\n\n    export function maxStaticMusicBitrate(val) {\n        if (val !== undefined) {\n            this.set('maxStaticMusicBitrate', val);\n        }\n\n        const defaultValue = 320000;\n        return parseInt(this.get('maxStaticMusicBitrate') || defaultValue.toString()) || defaultValue;\n    }\n\n    export function maxChromecastBitrate(val) {\n        if (val !== undefined) {\n            this.set('chromecastBitrate1', val);\n        }\n\n        val = this.get('chromecastBitrate1');\n        return val ? parseInt(val) : null;\n    }\n\n    export function set(name, value, userId) {\n        const currentValue = this.get(name, userId);\n        appStorage.setItem(getKey(name, userId), value);\n\n        if (currentValue !== value) {\n            events.trigger(this, 'change', [name]);\n        }\n    }\n\n    export function get(name, userId) {\n        return appStorage.getItem(getKey(name, userId));\n    }\n\n/* eslint-enable indent */\n\nexport default {\n    enableAutoLogin: enableAutoLogin,\n    enableSystemExternalPlayers: enableSystemExternalPlayers,\n    enableAutomaticBitrateDetection: enableAutomaticBitrateDetection,\n    maxStreamingBitrate: maxStreamingBitrate,\n    maxStaticMusicBitrate: maxStaticMusicBitrate,\n    maxChromecastBitrate: maxChromecastBitrate,\n    set: set,\n    get: get\n};\n"]}