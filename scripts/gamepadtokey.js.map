{"version":3,"sources":["scripts/gamepadtokey.js"],"names":["_apphost","_interopRequireDefault","require","obj","__esModule","default","_GAMEPAD_A_BUTTON_INDEX","_GAMEPAD_B_BUTTON_INDEX","_GAMEPAD_DPAD_UP_BUTTON_INDEX","_GAMEPAD_DPAD_DOWN_BUTTON_INDEX","_GAMEPAD_DPAD_LEFT_BUTTON_INDEX","_GAMEPAD_DPAD_RIGHT_BUTTON_INDEX","_GAMEPAD_A_KEY","_GAMEPAD_B_KEY","_GAMEPAD_DPAD_UP_KEY","_GAMEPAD_DPAD_DOWN_KEY","_GAMEPAD_DPAD_LEFT_KEY","_GAMEPAD_DPAD_RIGHT_KEY","_GAMEPAD_LEFT_THUMBSTICK_UP_KEY","_GAMEPAD_LEFT_THUMBSTICK_DOWN_KEY","_GAMEPAD_LEFT_THUMBSTICK_LEFT_KEY","_GAMEPAD_LEFT_THUMBSTICK_RIGHT_KEY","_GAMEPAD_A_KEYCODE","_GAMEPAD_B_KEYCODE","_GAMEPAD_DPAD_UP_KEYCODE","_GAMEPAD_DPAD_DOWN_KEYCODE","_GAMEPAD_DPAD_LEFT_KEYCODE","_GAMEPAD_DPAD_RIGHT_KEYCODE","_GAMEPAD_LEFT_THUMBSTICK_UP_KEYCODE","_GAMEPAD_LEFT_THUMBSTICK_DOWN_KEYCODE","_GAMEPAD_LEFT_THUMBSTICK_LEFT_KEYCODE","_GAMEPAD_LEFT_THUMBSTICK_RIGHT_KEYCODE","_THUMB_STICK_THRESHOLD","_leftThumbstickUpPressed","_leftThumbstickDownPressed","_leftThumbstickLeftPressed","_leftThumbstickRightPressed","_dPadUpPressed","_dPadDownPressed","_dPadLeftPressed","_dPadRightPressed","_gamepadAPressed","_gamepadBPressed","ProcessedButtons","_ButtonPressedState","newPressedState","raiseKeyEvent","times","throttle","key","time","Date","getTime","resetThrottle","inputLoopTimer","isElectron","navigator","userAgent","toLowerCase","indexOf","allowInput","document","hidden","appHost","getWindowState","raiseEvent","name","keyCode","event","createEvent","initEvent","activeElement","body","dispatchEvent","clickElement","elem","click","oldPressedState","enableRepeatKeyDown","clickonKeyUp","fire","window","runInputLoop","gamepads","getGamepads","i","len","length","gamepad","axes","leftStickX","leftStickY","setleftThumbstickRight","setleftThumbstickLeft","setleftThumbstickUp","setleftThumbstickDown","buttons","j","pressed","setdPadUp","setdPadDown","setdPadLeft","setdPadRight","setgamepadA","setgamepadB","getdPadUp","getdPadDown","getdPadLeft","getdPadRight","getgamepadA","getgamepadB","requestAnimationFrame","startInputLoop","stopInputLoop","cancelAnimationFrame","undefined","isGamepadConnected","connected","onFocusOrGamepadAttach","e","hasFocus","console","log","onFocusOrGamepadDetach","addEventListener","gamepadInputEmulation"],"mappings":"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","file":"gamepadtokey.js","sourcesContent":["// #      The MIT License (MIT)\n// #\n// #      Copyright (c) 2016 Microsoft. All rights reserved.\n// #\n// #      Permission is hereby granted, free of charge, to any person obtaining a copy\n// #      of this software and associated documentation files (the \"Software\"), to deal\n// #      in the Software without restriction, including without limitation the rights\n// #      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// #      copies of the Software, and to permit persons to whom the Software is\n// #      furnished to do so, subject to the following conditions:\n// #\n// #      The above copyright notice and this permission notice shall be included in\n// #      all copies or substantial portions of the Software.\n// #\n// #      THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// #      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// #      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// #      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// #      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// #      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// #      THE SOFTWARE.\n\nimport appHost from 'apphost';\n\nvar _GAMEPAD_A_BUTTON_INDEX = 0;\nvar _GAMEPAD_B_BUTTON_INDEX = 1;\nvar _GAMEPAD_DPAD_UP_BUTTON_INDEX = 12;\nvar _GAMEPAD_DPAD_DOWN_BUTTON_INDEX = 13;\nvar _GAMEPAD_DPAD_LEFT_BUTTON_INDEX = 14;\nvar _GAMEPAD_DPAD_RIGHT_BUTTON_INDEX = 15;\nvar _GAMEPAD_A_KEY = 'GamepadA';\nvar _GAMEPAD_B_KEY = 'GamepadB';\nvar _GAMEPAD_DPAD_UP_KEY = 'GamepadDPadUp';\nvar _GAMEPAD_DPAD_DOWN_KEY = 'GamepadDPadDown';\nvar _GAMEPAD_DPAD_LEFT_KEY = 'GamepadDPadLeft';\nvar _GAMEPAD_DPAD_RIGHT_KEY = 'GamepadDPadRight';\nvar _GAMEPAD_LEFT_THUMBSTICK_UP_KEY = 'GamepadLeftThumbStickUp';\nvar _GAMEPAD_LEFT_THUMBSTICK_DOWN_KEY = 'GamepadLeftThumbStickDown';\nvar _GAMEPAD_LEFT_THUMBSTICK_LEFT_KEY = 'GamepadLeftThumbStickLeft';\nvar _GAMEPAD_LEFT_THUMBSTICK_RIGHT_KEY = 'GamepadLeftThumbStickRight';\nvar _GAMEPAD_A_KEYCODE = 0;\nvar _GAMEPAD_B_KEYCODE = 27;\nvar _GAMEPAD_DPAD_UP_KEYCODE = 38;\nvar _GAMEPAD_DPAD_DOWN_KEYCODE = 40;\nvar _GAMEPAD_DPAD_LEFT_KEYCODE = 37;\nvar _GAMEPAD_DPAD_RIGHT_KEYCODE = 39;\nvar _GAMEPAD_LEFT_THUMBSTICK_UP_KEYCODE = 38;\nvar _GAMEPAD_LEFT_THUMBSTICK_DOWN_KEYCODE = 40;\nvar _GAMEPAD_LEFT_THUMBSTICK_LEFT_KEYCODE = 37;\nvar _GAMEPAD_LEFT_THUMBSTICK_RIGHT_KEYCODE = 39;\nvar _THUMB_STICK_THRESHOLD = 0.75;\n\nvar _leftThumbstickUpPressed = false;\nvar _leftThumbstickDownPressed = false;\nvar _leftThumbstickLeftPressed = false;\nvar _leftThumbstickRightPressed = false;\nvar _dPadUpPressed = false;\nvar _dPadDownPressed = false;\nvar _dPadLeftPressed = false;\nvar _dPadRightPressed = false;\nvar _gamepadAPressed = false;\nvar _gamepadBPressed = false;\n\n// The set of buttons on the gamepad we listen for.\nvar ProcessedButtons = [\n    _GAMEPAD_DPAD_UP_BUTTON_INDEX,\n    _GAMEPAD_DPAD_DOWN_BUTTON_INDEX,\n    _GAMEPAD_DPAD_LEFT_BUTTON_INDEX,\n    _GAMEPAD_DPAD_RIGHT_BUTTON_INDEX,\n    _GAMEPAD_A_BUTTON_INDEX,\n    _GAMEPAD_B_BUTTON_INDEX\n];\n\nvar _ButtonPressedState = {};\n_ButtonPressedState.getgamepadA = function () {\n    return _gamepadAPressed;\n};\n\n_ButtonPressedState.setgamepadA = function (newPressedState) {\n    raiseKeyEvent(_gamepadAPressed, newPressedState, _GAMEPAD_A_KEY, _GAMEPAD_A_KEYCODE, false, true);\n    _gamepadAPressed = newPressedState;\n};\n\n_ButtonPressedState.getgamepadB = function () {\n    return _gamepadBPressed;\n};\n\n_ButtonPressedState.setgamepadB = function (newPressedState) {\n    raiseKeyEvent(_gamepadBPressed, newPressedState, _GAMEPAD_B_KEY, _GAMEPAD_B_KEYCODE);\n    _gamepadBPressed = newPressedState;\n};\n\n_ButtonPressedState.getleftThumbstickUp = function () {\n    return _leftThumbstickUpPressed;\n};\n\n_ButtonPressedState.setleftThumbstickUp = function (newPressedState) {\n    raiseKeyEvent(_leftThumbstickUpPressed, newPressedState, _GAMEPAD_LEFT_THUMBSTICK_UP_KEY, _GAMEPAD_LEFT_THUMBSTICK_UP_KEYCODE, true);\n    _leftThumbstickUpPressed = newPressedState;\n};\n\n_ButtonPressedState.getleftThumbstickDown = function () {\n    return _leftThumbstickDownPressed;\n};\n\n_ButtonPressedState.setleftThumbstickDown = function (newPressedState) {\n    raiseKeyEvent(_leftThumbstickDownPressed, newPressedState, _GAMEPAD_LEFT_THUMBSTICK_DOWN_KEY, _GAMEPAD_LEFT_THUMBSTICK_DOWN_KEYCODE, true);\n    _leftThumbstickDownPressed = newPressedState;\n};\n\n_ButtonPressedState.getleftThumbstickLeft = function () {\n    return _leftThumbstickLeftPressed;\n};\n\n_ButtonPressedState.setleftThumbstickLeft = function (newPressedState) {\n    raiseKeyEvent(_leftThumbstickLeftPressed, newPressedState, _GAMEPAD_LEFT_THUMBSTICK_LEFT_KEY, _GAMEPAD_LEFT_THUMBSTICK_LEFT_KEYCODE, true);\n    _leftThumbstickLeftPressed = newPressedState;\n};\n\n_ButtonPressedState.getleftThumbstickRight = function () {\n    return _leftThumbstickRightPressed;\n};\n\n_ButtonPressedState.setleftThumbstickRight = function (newPressedState) {\n    raiseKeyEvent(_leftThumbstickRightPressed, newPressedState, _GAMEPAD_LEFT_THUMBSTICK_RIGHT_KEY, _GAMEPAD_LEFT_THUMBSTICK_RIGHT_KEYCODE, true);\n    _leftThumbstickRightPressed = newPressedState;\n};\n\n_ButtonPressedState.getdPadUp = function () {\n    return _dPadUpPressed;\n};\n\n_ButtonPressedState.setdPadUp = function (newPressedState) {\n    raiseKeyEvent(_dPadUpPressed, newPressedState, _GAMEPAD_DPAD_UP_KEY, _GAMEPAD_DPAD_UP_KEYCODE, true);\n    _dPadUpPressed = newPressedState;\n};\n\n_ButtonPressedState.getdPadDown = function () {\n    return _dPadDownPressed;\n};\n\n_ButtonPressedState.setdPadDown = function (newPressedState) {\n    raiseKeyEvent(_dPadDownPressed, newPressedState, _GAMEPAD_DPAD_DOWN_KEY, _GAMEPAD_DPAD_DOWN_KEYCODE, true);\n    _dPadDownPressed = newPressedState;\n};\n\n_ButtonPressedState.getdPadLeft = function () {\n    return _dPadLeftPressed;\n};\n\n_ButtonPressedState.setdPadLeft = function (newPressedState) {\n    raiseKeyEvent(_dPadLeftPressed, newPressedState, _GAMEPAD_DPAD_LEFT_KEY, _GAMEPAD_DPAD_LEFT_KEYCODE, true);\n    _dPadLeftPressed = newPressedState;\n};\n\n_ButtonPressedState.getdPadRight = function () {\n    return _dPadRightPressed;\n};\n\n_ButtonPressedState.setdPadRight = function (newPressedState) {\n    raiseKeyEvent(_dPadRightPressed, newPressedState, _GAMEPAD_DPAD_RIGHT_KEY, _GAMEPAD_DPAD_RIGHT_KEYCODE, true);\n    _dPadRightPressed = newPressedState;\n};\n\nvar times = {};\n\nfunction throttle(key) {\n    var time = times[key] || 0;\n    var now = new Date().getTime();\n\n    if ((now - time) >= 200) {\n        //times[key] = now;\n        return true;\n    }\n\n    return false;\n}\n\nfunction resetThrottle(key) {\n    times[key] = new Date().getTime();\n}\n\nvar isElectron = navigator.userAgent.toLowerCase().indexOf('electron') !== -1;\nfunction allowInput() {\n    // This would be nice but always seems to return true with electron\n    if (!isElectron && document.hidden) { /* eslint-disable-line compat/compat */\n        return false;\n    }\n\n    if (appHost.getWindowState() === 'Minimized') {\n        return false;\n    }\n\n    return true;\n}\n\nfunction raiseEvent(name, key, keyCode) {\n    if (!allowInput()) {\n        return;\n    }\n\n    var event = document.createEvent('Event');\n    event.initEvent(name, true, true);\n    event.key = key;\n    event.keyCode = keyCode;\n    (document.activeElement || document.body).dispatchEvent(event);\n}\n\nfunction clickElement(elem) {\n    if (!allowInput()) {\n        return;\n    }\n\n    elem.click();\n}\n\nfunction raiseKeyEvent(oldPressedState, newPressedState, key, keyCode, enableRepeatKeyDown, clickonKeyUp) {\n    // No-op if oldPressedState === newPressedState\n    if (newPressedState === true) {\n        // button down\n        var fire = false;\n\n        // always fire if this is the initial down press\n        if (oldPressedState === false) {\n            fire = true;\n            resetThrottle(key);\n        } else if (enableRepeatKeyDown) {\n            fire = throttle(key);\n        }\n\n        if (fire && keyCode) {\n            raiseEvent('keydown', key, keyCode);\n        }\n    } else if (newPressedState === false && oldPressedState === true) {\n        resetThrottle(key);\n\n        // button up\n        if (keyCode) {\n            raiseEvent('keyup', key, keyCode);\n        }\n        if (clickonKeyUp) {\n            clickElement(document.activeElement || window);\n        }\n    }\n}\n\nvar inputLoopTimer;\nfunction runInputLoop() {\n    // Get the latest gamepad state.\n    var gamepads = navigator.getGamepads(); /* eslint-disable-line compat/compat */\n    for (var i = 0, len = gamepads.length; i < len; i++) {\n        var gamepad = gamepads[i];\n        if (!gamepad) {\n            continue;\n        }\n        // Iterate through the axes\n        var axes = gamepad.axes;\n        var leftStickX = axes[0];\n        var leftStickY = axes[1];\n        if (leftStickX > _THUMB_STICK_THRESHOLD) { // Right\n            _ButtonPressedState.setleftThumbstickRight(true);\n        } else if (leftStickX < -_THUMB_STICK_THRESHOLD) { // Left\n            _ButtonPressedState.setleftThumbstickLeft(true);\n        } else if (leftStickY < -_THUMB_STICK_THRESHOLD) { // Up\n            _ButtonPressedState.setleftThumbstickUp(true);\n        } else if (leftStickY > _THUMB_STICK_THRESHOLD) { // Down\n            _ButtonPressedState.setleftThumbstickDown(true);\n        } else {\n            _ButtonPressedState.setleftThumbstickLeft(false);\n            _ButtonPressedState.setleftThumbstickRight(false);\n            _ButtonPressedState.setleftThumbstickUp(false);\n            _ButtonPressedState.setleftThumbstickDown(false);\n        }\n        // Iterate through the buttons to see if Left thumbstick, DPad, A and B are pressed.\n        var buttons = gamepad.buttons;\n        for (var j = 0, len = buttons.length; j < len; j++) {\n            if (ProcessedButtons.indexOf(j) !== -1) {\n                if (buttons[j].pressed) {\n                    switch (j) {\n                        case _GAMEPAD_DPAD_UP_BUTTON_INDEX:\n                            _ButtonPressedState.setdPadUp(true);\n                            break;\n                        case _GAMEPAD_DPAD_DOWN_BUTTON_INDEX:\n                            _ButtonPressedState.setdPadDown(true);\n                            break;\n                        case _GAMEPAD_DPAD_LEFT_BUTTON_INDEX:\n                            _ButtonPressedState.setdPadLeft(true);\n                            break;\n                        case _GAMEPAD_DPAD_RIGHT_BUTTON_INDEX:\n                            _ButtonPressedState.setdPadRight(true);\n                            break;\n                        case _GAMEPAD_A_BUTTON_INDEX:\n                            _ButtonPressedState.setgamepadA(true);\n                            break;\n                        case _GAMEPAD_B_BUTTON_INDEX:\n                            _ButtonPressedState.setgamepadB(true);\n                            break;\n                        default:\n                            // No-op\n                            break;\n                    }\n                } else {\n                    switch (j) {\n                        case _GAMEPAD_DPAD_UP_BUTTON_INDEX:\n                            if (_ButtonPressedState.getdPadUp()) {\n                                _ButtonPressedState.setdPadUp(false);\n                            }\n                            break;\n                        case _GAMEPAD_DPAD_DOWN_BUTTON_INDEX:\n                            if (_ButtonPressedState.getdPadDown()) {\n                                _ButtonPressedState.setdPadDown(false);\n                            }\n                            break;\n                        case _GAMEPAD_DPAD_LEFT_BUTTON_INDEX:\n                            if (_ButtonPressedState.getdPadLeft()) {\n                                _ButtonPressedState.setdPadLeft(false);\n                            }\n                            break;\n                        case _GAMEPAD_DPAD_RIGHT_BUTTON_INDEX:\n                            if (_ButtonPressedState.getdPadRight()) {\n                                _ButtonPressedState.setdPadRight(false);\n                            }\n                            break;\n                        case _GAMEPAD_A_BUTTON_INDEX:\n                            if (_ButtonPressedState.getgamepadA()) {\n                                _ButtonPressedState.setgamepadA(false);\n                            }\n                            break;\n                        case _GAMEPAD_B_BUTTON_INDEX:\n                            if (_ButtonPressedState.getgamepadB()) {\n                                _ButtonPressedState.setgamepadB(false);\n                            }\n                            break;\n                        default:\n                            // No-op\n                            break;\n                    }\n                }\n            }\n        }\n    }\n    // Schedule the next one\n    inputLoopTimer = requestAnimationFrame(runInputLoop);\n}\n\nfunction startInputLoop() {\n    if (!inputLoopTimer) {\n        runInputLoop();\n    }\n}\n\nfunction stopInputLoop() {\n    cancelAnimationFrame(inputLoopTimer);\n    inputLoopTimer = undefined;\n}\n\nfunction isGamepadConnected() {\n    var gamepads = navigator.getGamepads(); /* eslint-disable-line compat/compat */\n    for (var i = 0, len = gamepads.length; i < len; i++) {\n        var gamepad = gamepads[i];\n        if (gamepad && gamepad.connected) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction onFocusOrGamepadAttach(e) {\n    /* eslint-disable-next-line compat/compat */\n    if (isGamepadConnected() && document.hasFocus()) {\n        console.log('Gamepad connected! Starting input loop');\n        startInputLoop();\n    }\n}\n\nfunction onFocusOrGamepadDetach(e) {\n    /* eslint-disable-next-line compat/compat */\n    if (!isGamepadConnected() || !document.hasFocus()) {\n        console.log('Gamepad disconnected! No other gamepads are connected, stopping input loop');\n        stopInputLoop();\n    } else {\n        console.log('Gamepad disconnected! There are gamepads still connected.');\n    }\n}\n\n// Event listeners for any change in gamepads' state.\nwindow.addEventListener('gamepaddisconnected', onFocusOrGamepadDetach);\nwindow.addEventListener('gamepadconnected', onFocusOrGamepadAttach);\nwindow.addEventListener('blur', onFocusOrGamepadDetach);\nwindow.addEventListener('focus', onFocusOrGamepadAttach);\n\nonFocusOrGamepadAttach();\n\n// The gamepadInputEmulation is a string property that exists in JavaScript UWAs and in WebViews in UWAs.\n// It won't exist in Win8.1 style apps or browsers.\nif (window.navigator && typeof window.navigator.gamepadInputEmulation === 'string') {\n    // We want the gamepad to provide gamepad VK keyboard events rather than moving a\n    // mouse like cursor. Set to \"keyboard\", the gamepad will provide such keyboard events\n    // and provide input to the DOM navigator.getGamepads API.\n    window.navigator.gamepadInputEmulation = 'gamepad';\n}\n"]}