{"version":3,"sources":["scripts/playlists.js"],"names":["define","_require","_exports","_loading","_listView","_cardBuilder","_libraryMenu","_libraryBrowser","_imageLoader","_userSettings","_embyItemscontainer","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","Object","defineProperty","value","_default","view","params","getPageData","context","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","StartIndex","libraryBrowser","getSavedView","userSettings","libraryPageSize","ParentId","libraryMenu","getTopParentId","loadSavedQueryValues","savedQueryKey","onViewStyleChange","viewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","showLoadingMessage","loading","show","getQuery","promise1","ApiClient","getItems","Dashboard","getCurrentUserId","promise2","getCurrentUser","Promise","all","then","responses","result","window","scrollTo","html","getQueryPagingHtml","startIndex","limit","Limit","totalRecordCount","TotalRecordCount","viewButton","showLimit","updatePageSizeSetting","addLayoutButton","layouts","currentLayout","listView","getListViewHtml","items","Items","sortBy","cardBuilder","getCardsHtml","shape","coverImage","showTitle","cardLayout","centerText","preferThumb","overlayPlayButton","elem","imageLoader","lazyChildren","btnNextPage","addEventListener","btnPreviousPage","Math","max","btnChangeLayout","e","layout","detail","saveViewSetting","saveQueryValues","hideLoadingMessage","hide","_resolve","_reject","imported","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","call","desc","set","_ref","playlistEditor","serverId","serverInfo","Id"],"mappings":"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","file":"playlists.js","sourcesContent":["import loading from 'loading';\nimport listView from 'listView';\nimport cardBuilder from 'cardBuilder';\nimport libraryMenu from 'libraryMenu';\nimport libraryBrowser from 'libraryBrowser';\nimport imageLoader from 'imageLoader';\nimport userSettings from 'userSettings';\nimport 'emby-itemscontainer';\n\nexport default function (view, params) {\n    function getPageData(context) {\n        const key = getSavedQueryKey(context);\n        let pageData = data[key];\n\n        if (!pageData) {\n            pageData = data[key] = {\n                query: {\n                    SortBy: 'SortName',\n                    SortOrder: 'Ascending',\n                    IncludeItemTypes: 'Playlist',\n                    Recursive: true,\n                    Fields: 'PrimaryImageAspectRatio,SortName,CumulativeRunTimeTicks,CanDelete',\n                    StartIndex: 0\n                },\n                view: libraryBrowser.getSavedView(key) || 'Poster'\n            };\n\n            if (userSettings.libraryPageSize() > 0) {\n                pageData.query['Limit'] = userSettings.libraryPageSize();\n            }\n\n            pageData.query.ParentId = libraryMenu.getTopParentId();\n            libraryBrowser.loadSavedQueryValues(key, pageData.query);\n        }\n\n        return pageData;\n    }\n\n    function getQuery(context) {\n        return getPageData(context).query;\n    }\n\n    function getSavedQueryKey(context) {\n        if (!context.savedQueryKey) {\n            context.savedQueryKey = libraryBrowser.getSavedQueryKey();\n        }\n\n        return context.savedQueryKey;\n    }\n\n    function showLoadingMessage() {\n        loading.show();\n    }\n\n    function hideLoadingMessage() {\n        loading.hide();\n    }\n\n    function onViewStyleChange() {\n        const viewStyle = getPageData(view).view;\n        const itemsContainer = view.querySelector('.itemsContainer');\n\n        if (viewStyle == 'List') {\n            itemsContainer.classList.add('vertical-list');\n            itemsContainer.classList.remove('vertical-wrap');\n        } else {\n            itemsContainer.classList.remove('vertical-list');\n            itemsContainer.classList.add('vertical-wrap');\n        }\n\n        itemsContainer.innerHTML = '';\n    }\n\n    function reloadItems() {\n        showLoadingMessage();\n        const query = getQuery(view);\n        const promise1 = ApiClient.getItems(Dashboard.getCurrentUserId(), query);\n        // TODO: promise2 is unused, check if necessary.\n        const promise2 = Dashboard.getCurrentUser();\n        Promise.all([promise1, promise2]).then(function (responses) {\n            const result = responses[0];\n            // TODO: Is the scroll necessary?\n            window.scrollTo(0, 0);\n            let html = '';\n            const viewStyle = getPageData(view).view;\n            view.querySelector('.listTopPaging').innerHTML = libraryBrowser.getQueryPagingHtml({\n                startIndex: query.StartIndex,\n                limit: query.Limit,\n                totalRecordCount: result.TotalRecordCount,\n                viewButton: false,\n                showLimit: false,\n                updatePageSizeSetting: false,\n                addLayoutButton: true,\n                layouts: 'List,Poster,PosterCard,Thumb,ThumbCard',\n                currentLayout: viewStyle\n            });\n\n            if (result.TotalRecordCount) {\n                if (viewStyle == 'List') {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        sortBy: query.SortBy\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'square',\n                        coverImage: true,\n                        showTitle: true,\n                        cardLayout: true\n                    });\n                } else if (viewStyle == 'Thumb') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        showTitle: true,\n                        centerText: true,\n                        preferThumb: true,\n                        overlayPlayButton: true\n                    });\n                } else if (viewStyle == 'ThumbCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        showTitle: true,\n                        preferThumb: true,\n                        cardLayout: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'square',\n                        showTitle: true,\n                        coverImage: true,\n                        centerText: true,\n                        overlayPlayButton: true\n                    });\n                }\n                view.querySelector('.noItemsMessage').classList.add('hide');\n            } else {\n                view.querySelector('.noItemsMessage').classList.remove('hide');\n            }\n\n            const elem = view.querySelector('.itemsContainer');\n            elem.innerHTML = html;\n            imageLoader.lazyChildren(elem);\n            const btnNextPage = view.querySelector('.btnNextPage');\n\n            if (btnNextPage) {\n                btnNextPage.addEventListener('click', function () {\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex += query.Limit;\n                    }\n                    reloadItems();\n                });\n            }\n\n            const btnPreviousPage = view.querySelector('.btnPreviousPage');\n\n            if (btnPreviousPage) {\n                btnPreviousPage.addEventListener('click', function () {\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex = Math.max(0, query.StartIndex - query.Limit);\n                    }\n                    reloadItems();\n                });\n            }\n\n            const btnChangeLayout = view.querySelector('.btnChangeLayout');\n\n            if (btnChangeLayout) {\n                btnChangeLayout.addEventListener('layoutchange', function (e) {\n                    const layout = e.detail.viewStyle;\n                    getPageData(view).view = layout;\n                    libraryBrowser.saveViewSetting(getSavedQueryKey(view), layout);\n                    onViewStyleChange();\n                    reloadItems();\n                });\n            }\n\n            libraryBrowser.saveQueryValues(getSavedQueryKey(view), query);\n            hideLoadingMessage();\n        });\n    }\n\n    const data = {};\n    view.addEventListener('viewbeforeshow', function () {\n        reloadItems();\n    });\n    view.querySelector('.btnNewPlaylist').addEventListener('click', function () {\n        import('playlistEditor').then(({default: playlistEditor}) => {\n            const serverId = ApiClient.serverInfo().Id;\n            new playlistEditor({\n                items: [],\n                serverId: serverId\n            });\n        });\n    });\n    onViewStyleChange();\n}\n\n"]}