{"version":3,"sources":["scripts/scrollHelper.js"],"names":["define","_exports","_focusManager","_dom","_scrollStyles","_interopRequireDefault","obj","__esModule","default","getBoundingClientRect","elem","top","left","getPosition","scrollContainer","item","horizontal","slideeOffset","itemOffset","offset","size","width","height","currentStart","scrollLeft","scrollTop","frameSize","offsetWidth","offsetHeight","start","center","end","isVisible","toCenter","container","skipWhenVisible","pos","scrollTo","Math","round","toStart","centerOnFocus","e","scrollSlider","focused","focusManager","focusableParent","target","centerOnFocusHorizontal","this","centerOnFocusVertical","Object","defineProperty","value","centerFocus","on","element","dom","addEventListener","capture","passive","off","removeEventListener","_default"],"mappings":"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","file":"scrollHelper.js","sourcesContent":["import focusManager from 'focusManager';\nimport dom from 'dom';\nimport 'scrollStyles';\n\nfunction getBoundingClientRect(elem) {\n    // Support: BlackBerry 5, iOS 3 (original iPhone)\n    // If we don't have gBCR, just use 0,0 rather than error\n    if (elem.getBoundingClientRect) {\n        return elem.getBoundingClientRect();\n    } else {\n        return { top: 0, left: 0 };\n    }\n}\n\nexport function getPosition(scrollContainer, item, horizontal) {\n    const slideeOffset = getBoundingClientRect(scrollContainer);\n    const itemOffset = getBoundingClientRect(item);\n\n    let offset = horizontal ? itemOffset.left - slideeOffset.left : itemOffset.top - slideeOffset.top;\n    let size = horizontal ? itemOffset.width : itemOffset.height;\n    if (!size && size !== 0) {\n        size = item[horizontal ? 'offsetWidth' : 'offsetHeight'];\n    }\n\n    const currentStart = horizontal ? scrollContainer.scrollLeft : scrollContainer.scrollTop;\n\n    offset += currentStart;\n\n    const frameSize = horizontal ? scrollContainer.offsetWidth : scrollContainer.offsetHeight;\n\n    const currentEnd = currentStart + frameSize;\n\n    const isVisible = offset >= currentStart && (offset + size) <= currentEnd;\n\n    return {\n        start: offset,\n        center: (offset - (frameSize / 2) + (size / 2)),\n        end: offset - frameSize + size,\n        size: size,\n        isVisible: isVisible\n    };\n}\n\nexport function toCenter(container, elem, horizontal, skipWhenVisible) {\n    const pos = getPosition(container, elem, horizontal);\n\n    if (skipWhenVisible && pos.isVisible) {\n        return;\n    }\n\n    if (container.scrollTo) {\n        if (horizontal) {\n            container.scrollTo(pos.center, 0);\n        } else {\n            container.scrollTo(0, pos.center);\n        }\n    } else {\n        if (horizontal) {\n            container.scrollLeft = Math.round(pos.center);\n        } else {\n            container.scrollTop = Math.round(pos.center);\n        }\n    }\n}\n\nexport function toStart(container, elem, horizontal, skipWhenVisible) {\n    const pos = getPosition(container, elem, horizontal);\n\n    if (skipWhenVisible && pos.isVisible) {\n        return;\n    }\n\n    if (container.scrollTo) {\n        if (horizontal) {\n            container.scrollTo(pos.start, 0);\n        } else {\n            container.scrollTo(0, pos.start);\n        }\n    } else {\n        if (horizontal) {\n            container.scrollLeft = Math.round(pos.start);\n        } else {\n            container.scrollTop = Math.round(pos.start);\n        }\n    }\n}\n\nfunction centerOnFocus(e, scrollSlider, horizontal) {\n    const focused = focusManager.focusableParent(e.target);\n\n    if (focused) {\n        toCenter(scrollSlider, focused, horizontal);\n    }\n}\n\nfunction centerOnFocusHorizontal(e) {\n    centerOnFocus(e, this, true);\n}\n\nfunction centerOnFocusVertical(e) {\n    centerOnFocus(e, this, false);\n}\n\nexport const centerFocus = {\n    on: function (element, horizontal) {\n        if (horizontal) {\n            dom.addEventListener(element, 'focus', centerOnFocusHorizontal, {\n                capture: true,\n                passive: true\n            });\n        } else {\n            dom.addEventListener(element, 'focus', centerOnFocusVertical, {\n                capture: true,\n                passive: true\n            });\n        }\n    },\n    off: function (element, horizontal) {\n        if (horizontal) {\n            dom.removeEventListener(element, 'focus', centerOnFocusHorizontal, {\n                capture: true,\n                passive: true\n            });\n        } else {\n            dom.removeEventListener(element, 'focus', centerOnFocusVertical, {\n                capture: true,\n                passive: true\n            });\n        }\n    }\n};\n\nexport default {\n    getPosition: getPosition,\n    centerFocus: centerFocus,\n    toCenter: toCenter,\n    toStart: toStart\n};\n"]}