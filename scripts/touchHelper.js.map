{"version":3,"sources":["scripts/touchHelper.js"],"names":["define","_exports","_dom","_events","_interopRequireDefault","obj","__esModule","default","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","getTouches","e","changedTouches","targetTouches","touches","value","_default","TouchHelper","elem","options","touchTarget","touchStartX","touchStartY","lastDeltaX","lastDeltaY","thresholdYMet","_classCallCheck","instance","Constructor","TypeError","this","self","swipeXThreshold","swipeYThreshold","excludeTagNames","ignoreTagNames","touchStart","touch","currentTouchTarget","dom","parentWithTag","clientX","clientY","touchEnd","isTouchMove","type","deltaX","deltaY","currentDeltaX","currentDeltaY","Math","abs","events","trigger","preventDefaultOnMove","preventDefault","addEventListener","passive","triggerOnMove","_createClass","protoProps","staticProps","prototype","destroy","removeEventListener"],"mappings":"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","file":"touchHelper.js","sourcesContent":["import dom from 'dom';\nimport events from 'events';\n\nfunction getTouches(e) {\n    return e.changedTouches || e.targetTouches || e.touches;\n}\n\nclass TouchHelper {\n    constructor(elem, options) {\n        options = options || {};\n        let touchTarget;\n        let touchStartX;\n        let touchStartY;\n        let lastDeltaX;\n        let lastDeltaY;\n        let thresholdYMet;\n        const self = this;\n\n        const swipeXThreshold = options.swipeXThreshold || 50;\n        const swipeYThreshold = options.swipeYThreshold || 50;\n        const swipeXMaxY = 30;\n\n        const excludeTagNames = options.ignoreTagNames || [];\n\n        const touchStart = function (e) {\n            const touch = getTouches(e)[0];\n            touchTarget = null;\n            touchStartX = 0;\n            touchStartY = 0;\n            lastDeltaX = null;\n            lastDeltaY = null;\n            thresholdYMet = false;\n\n            if (touch) {\n                const currentTouchTarget = touch.target;\n\n                if (dom.parentWithTag(currentTouchTarget, excludeTagNames)) {\n                    return;\n                }\n\n                touchTarget = currentTouchTarget;\n                touchStartX = touch.clientX;\n                touchStartY = touch.clientY;\n            }\n        };\n\n        const touchEnd = function (e) {\n            const isTouchMove = e.type === 'touchmove';\n\n            if (touchTarget) {\n                const touch = getTouches(e)[0];\n\n                let deltaX;\n                let deltaY;\n\n                let clientX;\n                let clientY;\n\n                if (touch) {\n                    clientX = touch.clientX || 0;\n                    clientY = touch.clientY || 0;\n                    deltaX = clientX - (touchStartX || 0);\n                    deltaY = clientY - (touchStartY || 0);\n                } else {\n                    deltaX = 0;\n                    deltaY = 0;\n                }\n\n                const currentDeltaX = lastDeltaX == null ? deltaX : (deltaX - lastDeltaX);\n                const currentDeltaY = lastDeltaY == null ? deltaY : (deltaY - lastDeltaY);\n\n                lastDeltaX = deltaX;\n                lastDeltaY = deltaY;\n\n                if (deltaX > swipeXThreshold && Math.abs(deltaY) < swipeXMaxY) {\n                    events.trigger(self, 'swiperight', [touchTarget]);\n                } else if (deltaX < (0 - swipeXThreshold) && Math.abs(deltaY) < swipeXMaxY) {\n                    events.trigger(self, 'swipeleft', [touchTarget]);\n                } else if ((deltaY < (0 - swipeYThreshold) || thresholdYMet) && Math.abs(deltaX) < swipeXMaxY) {\n                    thresholdYMet = true;\n\n                    events.trigger(self, 'swipeup', [touchTarget, {\n                        deltaY: deltaY,\n                        deltaX: deltaX,\n                        clientX: clientX,\n                        clientY: clientY,\n                        currentDeltaX: currentDeltaX,\n                        currentDeltaY: currentDeltaY\n                    }]);\n                } else if ((deltaY > swipeYThreshold || thresholdYMet) && Math.abs(deltaX) < swipeXMaxY) {\n                    thresholdYMet = true;\n\n                    events.trigger(self, 'swipedown', [touchTarget, {\n                        deltaY: deltaY,\n                        deltaX: deltaX,\n                        clientX: clientX,\n                        clientY: clientY,\n                        currentDeltaX: currentDeltaX,\n                        currentDeltaY: currentDeltaY\n                    }]);\n                }\n\n                if (isTouchMove && options.preventDefaultOnMove) {\n                    e.preventDefault();\n                }\n            }\n\n            if (!isTouchMove) {\n                touchTarget = null;\n                touchStartX = 0;\n                touchStartY = 0;\n                lastDeltaX = null;\n                lastDeltaY = null;\n                thresholdYMet = false;\n            }\n        };\n\n        this.touchStart = touchStart;\n        this.touchEnd = touchEnd;\n\n        dom.addEventListener(elem, 'touchstart', touchStart, {\n            passive: true\n        });\n        if (options.triggerOnMove) {\n            dom.addEventListener(elem, 'touchmove', touchEnd, {\n                passive: !options.preventDefaultOnMove\n            });\n        }\n        dom.addEventListener(elem, 'touchend', touchEnd, {\n            passive: true\n        });\n        dom.addEventListener(elem, 'touchcancel', touchEnd, {\n            passive: true\n        });\n    }\n    destroy() {\n        const elem = this.elem;\n\n        if (elem) {\n            const touchStart = this.touchStart;\n            const touchEnd = this.touchEnd;\n\n            dom.removeEventListener(elem, 'touchstart', touchStart, {\n                passive: true\n            });\n            dom.removeEventListener(elem, 'touchmove', touchEnd, {\n                passive: true\n            });\n            dom.removeEventListener(elem, 'touchend', touchEnd, {\n                passive: true\n            });\n            dom.removeEventListener(elem, 'touchcancel', touchEnd, {\n                passive: true\n            });\n        }\n\n        this.touchStart = null;\n        this.touchEnd = null;\n\n        this.elem = null;\n    }\n}\n\nexport default TouchHelper;\n"]}