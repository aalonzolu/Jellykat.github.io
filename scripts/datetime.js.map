{"version":3,"sources":["scripts/datetime.js"],"names":["define","_exports","_globalize","_typeof","obj","Symbol","iterator","constructor","prototype","parseISO8601Date","s","toLocal","d","match","a","i","parseInt","parseFloat","ms","Date","UTC","Math","round","offset","getTimezoneOffset","getDisplayRunningTime","ticks","parts","hours","floor","push","minutes","seconds","join","Object","defineProperty","value","toLocaleString","toLocaleDateString","toLocaleTimeString","getDisplayTime","isRelativeDay","default","_interopRequireDefault","__esModule","toLocaleTimeStringSupportsLocales","e","name","date","options","Error","currentLocale","globalize","getCurrentDateTimeLocale","optionList","getOptionList","list","length","weekday","getDay","toString","toLowerCase","err","hour","minute","time","timeLower","indexOf","getHours","suffix","getMinutes","timeParts","split","offsetInDays","yesterday","day","getDate","setDate","getFullYear","getMonth","_default","supportsLocalization"],"mappings":"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","file":"datetime.js","sourcesContent":["import globalize from 'globalize';\n\n/* eslint-disable indent */\n\n    export function parseISO8601Date(s, toLocal) {\n        // parenthese matches:\n        // year month day    hours minutes seconds\n        // dotmilliseconds\n        // tzstring plusminus hours minutes\n        const re = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))?/;\n\n        const d = s.match(re);\n\n        // \"2010-12-07T11:00:00.000-09:00\" parses to:\n        //  [\"2010-12-07T11:00:00.000-09:00\", \"2010\", \"12\", \"07\", \"11\",\n        //     \"00\", \"00\", \".000\", \"-09:00\", \"-\", \"09\", \"00\"]\n        // \"2010-12-07T11:00:00.000Z\" parses to:\n        //  [\"2010-12-07T11:00:00.000Z\",      \"2010\", \"12\", \"07\", \"11\",\n        //     \"00\", \"00\", \".000\", \"Z\", undefined, undefined, undefined]\n\n        if (!d) {\n            throw \"Couldn't parse ISO 8601 date string '\" + s + \"'\";\n        }\n\n        // parse strings, leading zeros into proper ints\n        const a = [1, 2, 3, 4, 5, 6, 10, 11];\n        for (const i in a) {\n            d[a[i]] = parseInt(d[a[i]], 10);\n        }\n        d[7] = parseFloat(d[7]);\n\n        // Date.UTC(year, month[, date[, hrs[, min[, sec[, ms]]]]])\n        // note that month is 0-11, not 1-12\n        // see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/UTC\n        let ms = Date.UTC(d[1], d[2] - 1, d[3], d[4], d[5], d[6]);\n\n        // if there are milliseconds, add them\n        if (d[7] > 0) {\n            ms += Math.round(d[7] * 1000);\n        }\n\n        // if there's a timezone, calculate it\n        if (d[8] !== 'Z' && d[10]) {\n            let offset = d[10] * 60 * 60 * 1000;\n            if (d[11]) {\n                offset += d[11] * 60 * 1000;\n            }\n            if (d[9] === '-') {\n                ms -= offset;\n            } else {\n                ms += offset;\n            }\n        } else if (toLocal === false) {\n            ms += new Date().getTimezoneOffset() * 60000;\n        }\n\n        return new Date(ms);\n    }\n\n    export function getDisplayRunningTime(ticks) {\n        const ticksPerHour = 36000000000;\n        const ticksPerMinute = 600000000;\n        const ticksPerSecond = 10000000;\n\n        const parts = [];\n\n        let hours = ticks / ticksPerHour;\n        hours = Math.floor(hours);\n\n        if (hours) {\n            parts.push(hours);\n        }\n\n        ticks -= (hours * ticksPerHour);\n\n        let minutes = ticks / ticksPerMinute;\n        minutes = Math.floor(minutes);\n\n        ticks -= (minutes * ticksPerMinute);\n\n        if (minutes < 10 && hours) {\n            minutes = '0' + minutes;\n        }\n        parts.push(minutes);\n\n        let seconds = ticks / ticksPerSecond;\n        seconds = Math.floor(seconds);\n\n        if (seconds < 10) {\n            seconds = '0' + seconds;\n        }\n        parts.push(seconds);\n\n        return parts.join(':');\n    }\n\n    const toLocaleTimeStringSupportsLocales = function () {\n        try {\n            new Date().toLocaleTimeString('i');\n        } catch (e) {\n            return e.name === 'RangeError';\n        }\n        return false;\n    }();\n\n    function getOptionList(options) {\n        const list = [];\n\n        for (const i in options) {\n            list.push({\n                name: i,\n                value: options[i]\n            });\n        }\n\n        return list;\n    }\n\n    export function toLocaleString(date, options) {\n        if (!date) {\n            throw new Error('date cannot be null');\n        }\n\n        options = options || {};\n\n        if (toLocaleTimeStringSupportsLocales) {\n            const currentLocale = globalize.getCurrentDateTimeLocale();\n\n            if (currentLocale) {\n                return date.toLocaleString(currentLocale, options);\n            }\n        }\n\n        return date.toLocaleString();\n    }\n\n    export function toLocaleDateString(date, options) {\n        if (!date) {\n            throw new Error('date cannot be null');\n        }\n\n        options = options || {};\n\n        if (toLocaleTimeStringSupportsLocales) {\n            const currentLocale = globalize.getCurrentDateTimeLocale();\n\n            if (currentLocale) {\n                return date.toLocaleDateString(currentLocale, options);\n            }\n        }\n\n        // This is essentially a hard-coded polyfill\n        const optionList = getOptionList(options);\n        if (optionList.length === 1 && optionList[0].name === 'weekday') {\n            const weekday = [];\n            weekday[0] = 'Sun';\n            weekday[1] = 'Mon';\n            weekday[2] = 'Tue';\n            weekday[3] = 'Wed';\n            weekday[4] = 'Thu';\n            weekday[5] = 'Fri';\n            weekday[6] = 'Sat';\n            return weekday[date.getDay()];\n        }\n\n        return date.toLocaleDateString();\n    }\n\n    export function toLocaleTimeString(date, options) {\n        if (!date) {\n            throw new Error('date cannot be null');\n        }\n\n        options = options || {};\n\n        if (toLocaleTimeStringSupportsLocales) {\n            const currentLocale = globalize.getCurrentDateTimeLocale();\n\n            if (currentLocale) {\n                return date.toLocaleTimeString(currentLocale, options);\n            }\n        }\n\n        return date.toLocaleTimeString();\n    }\n\n    export function getDisplayTime(date) {\n        if (!date) {\n            throw new Error('date cannot be null');\n        }\n\n        if ((typeof date).toString().toLowerCase() === 'string') {\n            try {\n                date = parseISO8601Date(date, true);\n            } catch (err) {\n                return date;\n            }\n        }\n\n        if (toLocaleTimeStringSupportsLocales) {\n            return toLocaleTimeString(date, {\n\n                hour: 'numeric',\n                minute: '2-digit'\n\n            });\n        }\n\n        let time = toLocaleTimeString(date);\n\n        const timeLower = time.toLowerCase();\n\n        if (timeLower.indexOf('am') !== -1 || timeLower.indexOf('pm') !== -1) {\n            time = timeLower;\n            let hour = date.getHours() % 12;\n            const suffix = date.getHours() > 11 ? 'pm' : 'am';\n            if (!hour) {\n                hour = 12;\n            }\n            let minutes = date.getMinutes();\n\n            if (minutes < 10) {\n                minutes = '0' + minutes;\n            }\n\n            minutes = ':' + minutes;\n            time = hour + minutes + suffix;\n        } else {\n            const timeParts = time.split(':');\n\n            // Trim off seconds\n            if (timeParts.length > 2) {\n                // setting to 2 also handles '21:00:28 GMT+9:30'\n                timeParts.length = 2;\n                time = timeParts.join(':');\n            }\n        }\n\n        return time;\n    }\n\n    export function isRelativeDay(date, offsetInDays) {\n        if (!date) {\n            throw new Error('date cannot be null');\n        }\n\n        const yesterday = new Date();\n        const day = yesterday.getDate() + offsetInDays;\n\n        yesterday.setDate(day); // automatically adjusts month/year appropriately\n\n        return date.getFullYear() === yesterday.getFullYear() && date.getMonth() === yesterday.getMonth() && date.getDate() === day;\n    }\n\n    export default {\n        parseISO8601Date: parseISO8601Date,\n        getDisplayRunningTime: getDisplayRunningTime,\n        toLocaleDateString: toLocaleDateString,\n        toLocaleString: toLocaleString,\n        getDisplayTime: getDisplayTime,\n        isRelativeDay: isRelativeDay,\n        toLocaleTimeString: toLocaleTimeString,\n        supportsLocalization: function () {\n            return toLocaleTimeStringSupportsLocales;\n        }\n    };\n\n/* eslint-enable indent */\n"]}