{"version":3,"sources":["scripts/globalize.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","define","_exports","userSettings","_events","_getRequireWildcardCache","WeakMap","cache","Object","defineProperty","value","getCurrentLocale","getCurrentDateTimeLocale","updateCurrentCulture","register","loadStrings","translate","translateHtml","defaultModule","default","_interopRequireWildcard","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","_interopRequireDefault","currentCulture","currentDateTimeCulture","allTranslations","culture","dateTimeCulture","language","err","console","error","getDefaultLanguage","document","documentElement","getAttribute","navigator","userLanguage","languages","length","normalizeLocaleName","dateTimeLocale","ensureTranslations","i","ensureTranslation","translationInfo","dictionaries","Promise","resolve","loadTranslation","translations","lang","filtered","filter","t","reject","url","path","indexOf","cacheParam","xhr","XMLHttpRequest","open","onload","e","this","status","JSON","parse","response","onerror","send","then","dictionary","parts","replace","split","toLowerCase","lower","getDictionary","module","locale","options","name","strings","optionsName","promises","push","all","_defaultModule","Date","getTime","translateKey","translateKeyFromModule","replaceAll","str","find","join","val","arguments","html","Error","startIndex","endIndex","substring","events","on","_default"],"mappings":"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","file":"globalize.js","sourcesContent":["import * as userSettings from 'userSettings';\nimport events from 'events';\n\n/* eslint-disable indent */\n\n    const fallbackCulture = 'en-us';\n\n    const allTranslations = {};\n    let currentCulture;\n    let currentDateTimeCulture;\n\n    export function getCurrentLocale() {\n        return currentCulture;\n    }\n\n    export function getCurrentDateTimeLocale() {\n        return currentDateTimeCulture;\n    }\n\n    function getDefaultLanguage() {\n        const culture = document.documentElement.getAttribute('data-culture');\n        if (culture) {\n            return culture;\n        }\n\n        if (navigator.language) {\n            return navigator.language;\n        }\n        if (navigator.userLanguage) {\n            return navigator.userLanguage;\n        }\n        if (navigator.languages && navigator.languages.length) {\n            return navigator.languages[0];\n        }\n\n        return fallbackCulture;\n    }\n\n    export function updateCurrentCulture() {\n        let culture;\n        try {\n            culture = userSettings.language();\n        } catch (err) {\n            console.error('no language set in user settings');\n        }\n        culture = culture || getDefaultLanguage();\n\n        currentCulture = normalizeLocaleName(culture);\n\n        let dateTimeCulture;\n        try {\n            dateTimeCulture = userSettings.dateTimeLocale();\n        } catch (err) {\n            console.error('no date format set in user settings');\n        }\n\n        if (dateTimeCulture) {\n            currentDateTimeCulture = normalizeLocaleName(dateTimeCulture);\n        } else {\n            currentDateTimeCulture = currentCulture;\n        }\n        ensureTranslations(currentCulture);\n    }\n\n    function ensureTranslations(culture) {\n        for (const i in allTranslations) {\n            ensureTranslation(allTranslations[i], culture);\n        }\n        if (culture !== fallbackCulture) {\n            for (const i in allTranslations) {\n                ensureTranslation(allTranslations[i], fallbackCulture);\n            }\n        }\n    }\n\n    function ensureTranslation(translationInfo, culture) {\n        if (translationInfo.dictionaries[culture]) {\n            return Promise.resolve();\n        }\n\n        return loadTranslation(translationInfo.translations, culture).then(function (dictionary) {\n            translationInfo.dictionaries[culture] = dictionary;\n        });\n    }\n\n    function normalizeLocaleName(culture) {\n        // TODO remove normalizations\n        culture = culture.replace('_', '-');\n\n        // convert de-DE to de\n        const parts = culture.split('-');\n        if (parts.length === 2) {\n            if (parts[0].toLowerCase() === parts[1].toLowerCase()) {\n                culture = parts[0].toLowerCase();\n            }\n        }\n\n        const lower = culture.toLowerCase();\n        if (lower === 'ca-es') {\n            return 'ca';\n        }\n\n        // normalize Swedish\n        if (lower === 'sv-se') {\n            return 'sv';\n        }\n\n        return lower;\n    }\n\n    function getDictionary(module, locale) {\n        if (!module) {\n            module = defaultModule();\n        }\n\n        const translations = allTranslations[module];\n        if (!translations) {\n            return {};\n        }\n\n        return translations.dictionaries[locale];\n    }\n\n    export function register(options) {\n        allTranslations[options.name] = {\n            translations: options.strings || options.translations,\n            dictionaries: {}\n        };\n    }\n\n    export function loadStrings(options) {\n        const locale = getCurrentLocale();\n        const promises = [];\n        let optionsName;\n        if (typeof options === 'string') {\n            optionsName = options;\n        } else {\n            optionsName = options.name;\n            register(options);\n        }\n        promises.push(ensureTranslation(allTranslations[optionsName], locale));\n        promises.push(ensureTranslation(allTranslations[optionsName], fallbackCulture));\n        return Promise.all(promises);\n    }\n\n    const cacheParam = new Date().getTime();\n    function loadTranslation(translations, lang) {\n        lang = normalizeLocaleName(lang);\n        let filtered = translations.filter(function (t) {\n            return normalizeLocaleName(t.lang) === lang;\n        });\n\n        if (!filtered.length) {\n            filtered = translations.filter(function (t) {\n                return normalizeLocaleName(t.lang) === fallbackCulture;\n            });\n        }\n\n        return new Promise(function (resolve, reject) {\n            if (!filtered.length) {\n                resolve();\n                return;\n            }\n\n            let url = filtered[0].path;\n\n            url += url.indexOf('?') === -1 ? '?' : '&';\n            url += 'v=' + cacheParam;\n\n            const xhr = new XMLHttpRequest();\n            xhr.open('GET', url, true);\n\n            xhr.onload = function (e) {\n                if (this.status < 400) {\n                    resolve(JSON.parse(this.response));\n                } else {\n                    resolve({});\n                }\n            };\n\n            xhr.onerror = function () {\n                resolve({});\n            };\n            xhr.send();\n        });\n    }\n\n    function translateKey(key) {\n        const parts = key.split('#');\n        let module;\n\n        if (parts.length > 1) {\n            module = parts[0];\n            key = parts[1];\n        }\n\n        return translateKeyFromModule(key, module);\n    }\n\n    function translateKeyFromModule(key, module) {\n        let dictionary = getDictionary(module, getCurrentLocale());\n        if (!dictionary || !dictionary[key]) {\n            dictionary = getDictionary(module, fallbackCulture);\n        }\n        if (!dictionary) {\n            return key;\n        }\n        return dictionary[key] || key;\n    }\n\n    function replaceAll(str, find, replace) {\n        return str.split(find).join(replace);\n    }\n\n    export function translate(key) {\n        let val = translateKey(key);\n        for (let i = 1; i < arguments.length; i++) {\n            val = replaceAll(val, '{' + (i - 1) + '}', arguments[i]);\n        }\n        return val;\n    }\n\n    export function translateHtml(html, module) {\n        if (!module) {\n            module = defaultModule();\n        }\n        if (!module) {\n            throw new Error('module cannot be null or empty');\n        }\n\n        let startIndex = html.indexOf('${');\n        if (startIndex === -1) {\n            return html;\n        }\n\n        startIndex += 2;\n        const endIndex = html.indexOf('}', startIndex);\n        if (endIndex === -1) {\n            return html;\n        }\n\n        const key = html.substring(startIndex, endIndex);\n        const val = translateKeyFromModule(key, module);\n\n        html = html.replace('${' + key + '}', val);\n        return translateHtml(html, module);\n    }\n\n    let _defaultModule;\n    export function defaultModule(val) {\n        if (val) {\n            _defaultModule = val;\n        }\n        return _defaultModule;\n    }\n\n    updateCurrentCulture();\n\n    events.on(userSettings, 'change', function (e, name) {\n        if (name === 'language' || name === 'datetimelocale') {\n            updateCurrentCulture();\n        }\n    });\n\nexport default {\n    translate,\n    translateHtml,\n    loadStrings,\n    defaultModule,\n    getCurrentLocale,\n    getCurrentDateTimeLocale,\n    register,\n    updateCurrentCulture\n};\n\n/* eslint-enable indent */\n"]}