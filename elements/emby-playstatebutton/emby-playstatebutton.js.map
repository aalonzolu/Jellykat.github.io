{"version":3,"sources":["elements/emby-playstatebutton/emby-playstatebutton.js"],"names":["define","_connectionManager","_serverNotifications","_events","_globalize","_embyButton","_interopRequireDefault","obj","__esModule","default","onClick","e","id","this","getAttribute","serverId","apiClient","connectionManager","getApiClient","classList","contains","markUnplayed","getCurrentUserId","Date","setState","markPlayed","onUserDataChanged","userData","ItemId","Played","button","played","updateAttribute","icon","iconElement","querySelector","add","remove","setAttribute","setTitle","itemType","title","globalize","translate","text","innerHTML","clearEvents","removeEventListener","removeNotificationEvent","instance","name","handler","events","off","serverNotifications","bindEvents","addEventListener","addNotificationEvent","localHandler","bind","on","EmbyPlaystateButtonPrototype","Object","create","EmbyButtonPrototype","createdCallback","call","attachedCallback","itemId","detachedCallback","setItem","item","Id","ServerId","UserData","Type","removeAttribute","document","registerElement","prototype","extends"],"mappings":"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","file":"emby-playstatebutton.js","sourcesContent":["import connectionManager from 'connectionManager';\nimport serverNotifications from 'serverNotifications';\nimport events from 'events';\nimport globalize from 'globalize';\nimport EmbyButtonPrototype from 'emby-button';\n\n/* eslint-disable indent */\n\n    function addNotificationEvent(instance, name, handler) {\n        const localHandler = handler.bind(instance);\n        events.on(serverNotifications, name, localHandler);\n        instance[name] = localHandler;\n    }\n\n    function removeNotificationEvent(instance, name) {\n        const handler = instance[name];\n        if (handler) {\n            events.off(serverNotifications, name, handler);\n            instance[name] = null;\n        }\n    }\n\n    function onClick(e) {\n        const button = this;\n        const id = button.getAttribute('data-id');\n        const serverId = button.getAttribute('data-serverid');\n        const apiClient = connectionManager.getApiClient(serverId);\n\n        if (!button.classList.contains('playstatebutton-played')) {\n            apiClient.markPlayed(apiClient.getCurrentUserId(), id, new Date());\n            setState(button, true);\n        } else {\n            apiClient.markUnplayed(apiClient.getCurrentUserId(), id, new Date());\n            setState(button, false);\n        }\n    }\n\n    function onUserDataChanged(e, apiClient, userData) {\n        const button = this;\n        if (userData.ItemId === button.getAttribute('data-id')) {\n            setState(button, userData.Played);\n        }\n    }\n\n    function setState(button, played, updateAttribute) {\n        let icon = button.iconElement;\n        if (!icon) {\n            button.iconElement = button.querySelector('.material-icons');\n            icon = button.iconElement;\n        }\n\n        if (played) {\n            button.classList.add('playstatebutton-played');\n            if (icon) {\n                icon.classList.add('playstatebutton-icon-played');\n                icon.classList.remove('playstatebutton-icon-unplayed');\n            }\n        } else {\n            button.classList.remove('playstatebutton-played');\n            if (icon) {\n                icon.classList.remove('playstatebutton-icon-played');\n                icon.classList.add('playstatebutton-icon-unplayed');\n            }\n        }\n\n        if (updateAttribute !== false) {\n            button.setAttribute('data-played', played);\n        }\n    }\n\n    function setTitle(button, itemType) {\n        if (itemType !== 'AudioBook' && itemType !== 'AudioPodcast') {\n            button.title = globalize.translate('Watched');\n        } else {\n            button.title = globalize.translate('Played');\n        }\n\n        const text = button.querySelector('.button-text');\n        if (text) {\n            text.innerHTML = button.title;\n        }\n    }\n\n    function clearEvents(button) {\n        button.removeEventListener('click', onClick);\n        removeNotificationEvent(button, 'UserDataChanged');\n    }\n\n    function bindEvents(button) {\n        clearEvents(button);\n\n        button.addEventListener('click', onClick);\n        addNotificationEvent(button, 'UserDataChanged', onUserDataChanged);\n    }\n\n    const EmbyPlaystateButtonPrototype = Object.create(EmbyButtonPrototype);\n\n    EmbyPlaystateButtonPrototype.createdCallback = function () {\n        // base method\n        if (EmbyButtonPrototype.createdCallback) {\n            EmbyButtonPrototype.createdCallback.call(this);\n        }\n    };\n\n    EmbyPlaystateButtonPrototype.attachedCallback = function () {\n        // base method\n        if (EmbyButtonPrototype.attachedCallback) {\n            EmbyButtonPrototype.attachedCallback.call(this);\n        }\n\n        const itemId = this.getAttribute('data-id');\n        const serverId = this.getAttribute('data-serverid');\n        if (itemId && serverId) {\n            setState(this, this.getAttribute('data-played') === 'true', false);\n            bindEvents(this);\n            setTitle(this, this.getAttribute('data-type'));\n        }\n    };\n\n    EmbyPlaystateButtonPrototype.detachedCallback = function () {\n        // base method\n        if (EmbyButtonPrototype.detachedCallback) {\n            EmbyButtonPrototype.detachedCallback.call(this);\n        }\n\n        clearEvents(this);\n        this.iconElement = null;\n    };\n\n    EmbyPlaystateButtonPrototype.setItem = function (item) {\n        if (item) {\n            this.setAttribute('data-id', item.Id);\n            this.setAttribute('data-serverid', item.ServerId);\n\n            const played = item.UserData && item.UserData.Played;\n            setState(this, played);\n            bindEvents(this);\n\n            setTitle(this, item.Type);\n        } else {\n            this.removeAttribute('data-id');\n            this.removeAttribute('data-serverid');\n            this.removeAttribute('data-played');\n            clearEvents(this);\n        }\n    };\n\n    document.registerElement('emby-playstatebutton', {\n        prototype: EmbyPlaystateButtonPrototype,\n        extends: 'button'\n    });\n\n/* eslint-enable indent */\n"]}