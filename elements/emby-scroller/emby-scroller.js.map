{"version":3,"sources":["elements/emby-scroller/emby-scroller.js"],"names":["define","_require","_scroller","_dom","_layoutManager","_inputManager","_focusManager","_browser","_webcomponents","_embyScroller","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","ScrollerPrototype","Object","create","HTMLDivElement","onInputCommand","e","cmd","detail","command","focusManager","focusLast","this","getAttribute","preventDefault","stopPropagation","moveFocus","target","createdCallback","classList","add","scrollToBeginning","scroller","slideTo","toStart","elem","immediate","toCenter","scrollToPosition","pos","getScrollPosition","getScrollSize","getScrollEventName","getScrollSlider","addScrollEventListener","fn","options","dom","addEventListener","getScrollFrame","removeScrollEventListener","removeEventListener","attachedCallback","inputManager","on","horizontal","slider","querySelector","style","enableScrollButtons","layoutManager","desktop","mouseDragging","mouseWheel","touchDragging","slidee","scrollBy","speed","elasticBounds","dragHandle","autoImmediate","skipSlideToWhenVisible","dispatchScrollEvent","hideScrollbar","allowNativeSmoothScroll","allowNativeScroll","forceHideScrollbars","requireAnimation","browser","edge","init","reload","tv","initCenterFocus","scrollerInstance","focused","focusableParent","capture","passive","loadScrollButtons","Promise","_resolve","_reject","imported","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","then","insertAdjacentHTML","pause","headroom","resume","detachedCallback","off","destroy","document","registerElement","extends"],"mappings":"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","file":"emby-scroller.js","sourcesContent":["import scroller from 'scroller';\nimport dom from 'dom';\nimport layoutManager from 'layoutManager';\nimport inputManager from 'inputManager';\nimport focusManager from 'focusManager';\nimport browser from 'browser';\nimport 'webcomponents';\nimport 'css!./emby-scroller';\n\n/* eslint-disable indent */\n\n    const ScrollerPrototype = Object.create(HTMLDivElement.prototype);\n\n    ScrollerPrototype.createdCallback = function () {\n        this.classList.add('emby-scroller');\n    };\n\n    function initCenterFocus(elem, scrollerInstance) {\n        dom.addEventListener(elem, 'focus', function (e) {\n            const focused = focusManager.focusableParent(e.target);\n            if (focused) {\n                scrollerInstance.toCenter(focused);\n            }\n        }, {\n            capture: true,\n            passive: true\n        });\n    }\n\n    ScrollerPrototype.scrollToBeginning = function () {\n        if (this.scroller) {\n            this.scroller.slideTo(0, true);\n        }\n    };\n\n    ScrollerPrototype.toStart = function (elem, immediate) {\n        if (this.scroller) {\n            this.scroller.toStart(elem, immediate);\n        }\n    };\n\n    ScrollerPrototype.toCenter = function (elem, immediate) {\n        if (this.scroller) {\n            this.scroller.toCenter(elem, immediate);\n        }\n    };\n\n    ScrollerPrototype.scrollToPosition = function (pos, immediate) {\n        if (this.scroller) {\n            this.scroller.slideTo(pos, immediate);\n        }\n    };\n\n    ScrollerPrototype.getScrollPosition = function () {\n        if (this.scroller) {\n            return this.scroller.getScrollPosition();\n        }\n    };\n\n    ScrollerPrototype.getScrollSize = function () {\n        if (this.scroller) {\n            return this.scroller.getScrollSize();\n        }\n    };\n\n    ScrollerPrototype.getScrollEventName = function () {\n        if (this.scroller) {\n            return this.scroller.getScrollEventName();\n        }\n    };\n\n    ScrollerPrototype.getScrollSlider = function () {\n        if (this.scroller) {\n            return this.scroller.getScrollSlider();\n        }\n    };\n\n    ScrollerPrototype.addScrollEventListener = function (fn, options) {\n        if (this.scroller) {\n            dom.addEventListener(this.scroller.getScrollFrame(), this.scroller.getScrollEventName(), fn, options);\n        }\n    };\n\n    ScrollerPrototype.removeScrollEventListener = function (fn, options) {\n        if (this.scroller) {\n            dom.removeEventListener(this.scroller.getScrollFrame(), this.scroller.getScrollEventName(), fn, options);\n        }\n    };\n\n    function onInputCommand(e) {\n        const cmd = e.detail.command;\n        if (cmd === 'end') {\n            focusManager.focusLast(this, '.' + this.getAttribute('data-navcommands'));\n            e.preventDefault();\n            e.stopPropagation();\n        } else if (cmd === 'pageup') {\n            focusManager.moveFocus(e.target, this, '.' + this.getAttribute('data-navcommands'), -12);\n            e.preventDefault();\n            e.stopPropagation();\n        } else if (cmd === 'pagedown') {\n            focusManager.moveFocus(e.target, this, '.' + this.getAttribute('data-navcommands'), 12);\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    }\n\n    ScrollerPrototype.attachedCallback = function () {\n        if (this.getAttribute('data-navcommands')) {\n            inputManager.on(this, onInputCommand);\n        }\n\n        const horizontal = this.getAttribute('data-horizontal') !== 'false';\n\n        const slider = this.querySelector('.scrollSlider');\n\n        if (horizontal) {\n            slider.style['white-space'] = 'nowrap';\n        }\n\n        const scrollFrame = this;\n        const enableScrollButtons = layoutManager.desktop && horizontal && this.getAttribute('data-scrollbuttons') !== 'false';\n\n        const options = {\n            horizontal: horizontal,\n            mouseDragging: 1,\n            mouseWheel: this.getAttribute('data-mousewheel') !== 'false',\n            touchDragging: 1,\n            slidee: slider,\n            scrollBy: 200,\n            speed: horizontal ? 270 : 240,\n            elasticBounds: 1,\n            dragHandle: 1,\n            autoImmediate: true,\n            skipSlideToWhenVisible: this.getAttribute('data-skipfocuswhenvisible') === 'true',\n            dispatchScrollEvent: enableScrollButtons || this.getAttribute('data-scrollevent') === 'true',\n            hideScrollbar: enableScrollButtons || this.getAttribute('data-hidescrollbar') === 'true',\n            allowNativeSmoothScroll: this.getAttribute('data-allownativesmoothscroll') === 'true' && !enableScrollButtons,\n            allowNativeScroll: !enableScrollButtons,\n            forceHideScrollbars: enableScrollButtons,\n            // In edge, with the native scroll, the content jumps around when hovering over the buttons\n            requireAnimation: enableScrollButtons && browser.edge\n        };\n\n        // If just inserted it might not have any height yet - yes this is a hack\n        this.scroller = new scroller(scrollFrame, options);\n        this.scroller.init();\n        this.scroller.reload();\n\n        if (layoutManager.tv && this.getAttribute('data-centerfocus')) {\n            initCenterFocus(this, this.scroller);\n        }\n\n        if (enableScrollButtons) {\n            loadScrollButtons(this);\n        }\n    };\n\n    function loadScrollButtons(scroller) {\n        import('emby-scrollbuttons').then(() => {\n            scroller.insertAdjacentHTML('beforebegin', '<div is=\"emby-scrollbuttons\" class=\"emby-scrollbuttons padded-right\"></div>');\n        });\n    }\n\n    ScrollerPrototype.pause = function () {\n        const headroom = this.headroom;\n        if (headroom) {\n            headroom.pause();\n        }\n    };\n\n    ScrollerPrototype.resume = function () {\n        const headroom = this.headroom;\n        if (headroom) {\n            headroom.resume();\n        }\n    };\n\n    ScrollerPrototype.detachedCallback = function () {\n        if (this.getAttribute('data-navcommands')) {\n            inputManager.off(this, onInputCommand);\n        }\n\n        const headroom = this.headroom;\n        if (headroom) {\n            headroom.destroy();\n            this.headroom = null;\n        }\n\n        const scrollerInstance = this.scroller;\n        if (scrollerInstance) {\n            scrollerInstance.destroy();\n            this.scroller = null;\n        }\n    };\n\n    document.registerElement('emby-scroller', {\n        prototype: ScrollerPrototype,\n        extends: 'div'\n    });\n\n/* eslint-enable indent */\n"]}