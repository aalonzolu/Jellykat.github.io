{"version":3,"sources":["elements/emby-scrollbuttons/emby-scrollbuttons.js"],"names":["define","_embyScrollbuttons","_webcomponents","_paperIconButtonLight","EmbyScrollButtonsPrototype","Object","create","HTMLDivElement","prototype","getScrollButtonHtml","direction","html","getScrollPosition","parent","onScroll","e","scroller","this","updateScrollButtons","scrollButtons","scrollSize","scrollPos","scrollWidth","scrollButtonsLeft","classList","add","scrollButtonsRight","disabled","scrollPosEnd","getScrollSize","getScrollWidth","getStyleValue","style","name","value","getPropertyValue","replace","parseInt","isNaN","elem","offsetWidth","window","getComputedStyle","paddingLeft","paddingRight","slider","getScrollSlider","onScrollButtonClick","newPos","parentNode","nextSibling","getAttribute","Math","max","scrollToPosition","createdCallback","attachedCallback","innerHTML","buttons","querySelectorAll","addEventListener","scrollHandler","bind","addScrollEventListener","capture","passive","detachedCallback","removeScrollEventListener","document","registerElement","extends"],"mappings":"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","file":"emby-scrollbuttons.js","sourcesContent":["import 'css!./emby-scrollbuttons';\nimport 'webcomponents';\nimport 'paper-icon-button-light';\n\n/* eslint-disable indent */\n\nconst EmbyScrollButtonsPrototype = Object.create(HTMLDivElement.prototype);\n\n    EmbyScrollButtonsPrototype.createdCallback = function () {};\n\n    function getScrollButtonHtml(direction) {\n        let html = '';\n        const icon = direction === 'left' ? 'chevron_left' : 'chevron_right';\n\n        html += '<button type=\"button\" is=\"paper-icon-button-light\" data-ripple=\"false\" data-direction=\"' + direction + '\" class=\"emby-scrollbuttons-button\">';\n        html += '<span class=\"material-icons ' + icon + '\"></span>';\n        html += '</button>';\n\n        return html;\n    }\n\n    function getScrollPosition(parent) {\n        if (parent.getScrollPosition) {\n            return parent.getScrollPosition();\n        }\n\n        return 0;\n    }\n\n    function getScrollWidth(parent) {\n        if (parent.getScrollSize) {\n            return parent.getScrollSize();\n        }\n\n        return 0;\n    }\n\n    function updateScrollButtons(scrollButtons, scrollSize, scrollPos, scrollWidth) {\n        // TODO: Check if hack is really needed\n        // hack alert add twenty for rounding errors\n        if (scrollWidth <= scrollSize + 20) {\n            scrollButtons.scrollButtonsLeft.classList.add('hide');\n            scrollButtons.scrollButtonsRight.classList.add('hide');\n        }\n\n        if (scrollPos > 0) {\n            scrollButtons.scrollButtonsLeft.disabled = false;\n        } else {\n            scrollButtons.scrollButtonsLeft.disabled = true;\n        }\n\n        const scrollPosEnd = scrollPos + scrollSize;\n        if (scrollWidth > 0 && scrollPosEnd >= scrollWidth) {\n            scrollButtons.scrollButtonsRight.disabled = true;\n        } else {\n            scrollButtons.scrollButtonsRight.disabled = false;\n        }\n    }\n\n    function onScroll(e) {\n        const scrollButtons = this;\n        const scroller = this.scroller;\n\n        const scrollSize = getScrollSize(scroller);\n        const scrollPos = getScrollPosition(scroller);\n        const scrollWidth = getScrollWidth(scroller);\n\n        updateScrollButtons(scrollButtons, scrollSize, scrollPos, scrollWidth);\n    }\n\n    function getStyleValue(style, name) {\n        let value = style.getPropertyValue(name);\n        if (!value) {\n            return 0;\n        }\n\n        value = value.replace('px', '');\n        if (!value) {\n            return 0;\n        }\n\n        value = parseInt(value);\n        if (isNaN(value)) {\n            return 0;\n        }\n\n        return value;\n    }\n\n    function getScrollSize(elem) {\n        let scrollSize = elem.offsetWidth;\n        let style = window.getComputedStyle(elem, null);\n\n        let paddingLeft = getStyleValue(style, 'padding-left');\n        if (paddingLeft) {\n            scrollSize -= paddingLeft;\n        }\n\n        let paddingRight = getStyleValue(style, 'padding-right');\n        if (paddingRight) {\n            scrollSize -= paddingRight;\n        }\n\n        const slider = elem.getScrollSlider();\n        style = window.getComputedStyle(slider, null);\n\n        paddingLeft = getStyleValue(style, 'padding-left');\n        if (paddingLeft) {\n            scrollSize -= paddingLeft;\n        }\n\n        paddingRight = getStyleValue(style, 'padding-right');\n        if (paddingRight) {\n            scrollSize -= paddingRight;\n        }\n\n        return scrollSize;\n    }\n\n    function onScrollButtonClick(e) {\n        const scroller = this.parentNode.nextSibling;\n\n        const direction = this.getAttribute('data-direction');\n        const scrollSize = getScrollSize(scroller);\n        const scrollPos = getScrollPosition(scroller);\n\n        let newPos;\n        if (direction === 'left') {\n            newPos = Math.max(0, scrollPos - scrollSize);\n        } else {\n            newPos = scrollPos + scrollSize;\n        }\n\n        scroller.scrollToPosition(newPos, false);\n    }\n\n    EmbyScrollButtonsPrototype.attachedCallback = function () {\n        const scroller = this.nextSibling;\n        this.scroller = scroller;\n\n        const parent = this.parentNode;\n        parent.classList.add('emby-scroller-container');\n\n        this.innerHTML = getScrollButtonHtml('left') + getScrollButtonHtml('right');\n\n        const buttons = this.querySelectorAll('.emby-scrollbuttons-button');\n        buttons[0].addEventListener('click', onScrollButtonClick);\n        buttons[1].addEventListener('click', onScrollButtonClick);\n        this.scrollButtonsLeft = buttons[0];\n        this.scrollButtonsRight = buttons[1];\n\n        const scrollHandler = onScroll.bind(this);\n        this.scrollHandler = scrollHandler;\n        scroller.addScrollEventListener(scrollHandler, {\n            capture: false,\n            passive: true\n        });\n    };\n\n    EmbyScrollButtonsPrototype.detachedCallback = function () {\n        const parent = this.scroller;\n        this.scroller = null;\n\n        const scrollHandler = this.scrollHandler;\n        if (parent && scrollHandler) {\n            parent.removeScrollEventListener(scrollHandler, {\n                capture: false,\n                passive: true\n            });\n        }\n\n        this.scrollHandler = null;\n        this.scrollButtonsLeft = null;\n        this.scrollButtonsRight = null;\n    };\n\n    document.registerElement('emby-scrollbuttons', {\n        prototype: EmbyScrollButtonsPrototype,\n        extends: 'div'\n    });\n\n/* eslint-enable indent */\n"]}