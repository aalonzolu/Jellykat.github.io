{"version":3,"sources":["elements/emby-tabs/emby-tabs.js"],"names":["define","_dom","_scroller","_browser","_focusManager","_webcomponents","_embyTabs","_scrollStyles","_interopRequireDefault","obj","__esModule","default","EmbyTabs","Object","create","HTMLDivElement","prototype","activeButtonClass","buttonClass","setActiveTabButton","newButton","classList","add","triggerBeforeTabChange","tabs","index","previousIndex","dispatchEvent","CustomEvent","detail","selectedTabIndex","removeActivePanelClass","tabPanel","remove","newPanel","animate","fadeInRight","elem","keyframes","opacity","transform","browser","mobile","offset","duration","iterations","easing","onClick","e","this","current","querySelector","tabButton","dom","parentWithClass","target","parseInt","getAttribute","setTimeout","scroller","toCenter","onFocusOut","previousFocus","parentNode","getSelectedTabButton","getSibling","method","sibling","contains","createdCallback","addEventListener","passive","focus","onFocusIn","selectedTab","lastFocused","focusManager","autoFocus","refresh","reload","attachedCallback","initScroller","contentScrollSlider","horizontal","itemNav","mouseDragging","touchDragging","slidee","smart","releaseSwing","scrollBy","speed","elasticBounds","dragHandle","dynamicHandle","clickBar","hiddenScroll","requireAnimation","safari","allowNativeSmoothScroll","init","currentIndex","newTabButton","querySelectorAll","readyFired","detachedCallback","destroy","removeEventListener","selectedIndex","selected","triggerEvent","tabButtons","currentTabButton","call","selectNext","selectPrevious","triggerTabChange","setTabEnabled","enabled","btn","document","registerElement","extends"],"mappings":"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","file":"emby-tabs.js","sourcesContent":["import dom from 'dom';\nimport scroller from 'scroller';\nimport browser from 'browser';\nimport focusManager from 'focusManager';\nimport 'webcomponents';\nimport 'css!./emby-tabs';\nimport 'scrollStyles';\n\n/* eslint-disable indent */\n\n    const EmbyTabs = Object.create(HTMLDivElement.prototype);\n    const buttonClass = 'emby-tab-button';\n    const activeButtonClass = buttonClass + '-active';\n\n    function setActiveTabButton(newButton) {\n        newButton.classList.add(activeButtonClass);\n    }\n\n    function getTabPanel(tabs, index) {\n        return null;\n    }\n\n    function removeActivePanelClass(tabs, index) {\n        const tabPanel = getTabPanel(tabs, index);\n        if (tabPanel) {\n            tabPanel.classList.remove('is-active');\n        }\n    }\n\n    function fadeInRight(elem) {\n        const pct = browser.mobile ? '4%' : '0.5%';\n\n        const keyframes = [\n            { opacity: '0', transform: 'translate3d(' + pct + ', 0, 0)', offset: 0 },\n            { opacity: '1', transform: 'none', offset: 1 }];\n\n        elem.animate(keyframes, {\n            duration: 160,\n            iterations: 1,\n            easing: 'ease-out'\n        });\n    }\n\n    function triggerBeforeTabChange(tabs, index, previousIndex) {\n        tabs.dispatchEvent(new CustomEvent('beforetabchange', {\n            detail: {\n                selectedTabIndex: index,\n                previousIndex: previousIndex\n            }\n        }));\n        if (previousIndex != null && previousIndex !== index) {\n            removeActivePanelClass(tabs, previousIndex);\n        }\n\n        const newPanel = getTabPanel(tabs, index);\n\n        if (newPanel) {\n            // animate new panel ?\n            if (newPanel.animate) {\n                fadeInRight(newPanel);\n            }\n\n            newPanel.classList.add('is-active');\n        }\n    }\n\n    function onClick(e) {\n        const tabs = this;\n\n        const current = tabs.querySelector('.' + activeButtonClass);\n        const tabButton = dom.parentWithClass(e.target, buttonClass);\n\n        if (tabButton && tabButton !== current) {\n            if (current) {\n                current.classList.remove(activeButtonClass);\n            }\n\n            const previousIndex = current ? parseInt(current.getAttribute('data-index')) : null;\n\n            setActiveTabButton(tabButton);\n\n            const index = parseInt(tabButton.getAttribute('data-index'));\n\n            triggerBeforeTabChange(tabs, index, previousIndex);\n\n            // If toCenter is called syncronously within the click event, it sometimes ends up canceling it\n            setTimeout(function () {\n                tabs.selectedTabIndex = index;\n\n                tabs.dispatchEvent(new CustomEvent('tabchange', {\n                    detail: {\n                        selectedTabIndex: index,\n                        previousIndex: previousIndex\n                    }\n                }));\n            }, 120);\n\n            if (tabs.scroller) {\n                tabs.scroller.toCenter(tabButton, false);\n            }\n        }\n    }\n\n    function onFocusOut(e) {\n        const parentContainer = e.target.parentNode;\n        const previousFocus = parentContainer.querySelector('.lastFocused');\n        if (previousFocus) {\n            previousFocus.classList.remove('lastFocused');\n        }\n        e.target.classList.add('lastFocused');\n    }\n\n    function initScroller(tabs) {\n        if (tabs.scroller) {\n            return;\n        }\n\n        const contentScrollSlider = tabs.querySelector('.emby-tabs-slider');\n        if (contentScrollSlider) {\n            tabs.scroller = new scroller(tabs, {\n                horizontal: 1,\n                itemNav: 0,\n                mouseDragging: 1,\n                touchDragging: 1,\n                slidee: contentScrollSlider,\n                smart: true,\n                releaseSwing: true,\n                scrollBy: 200,\n                speed: 120,\n                elasticBounds: 1,\n                dragHandle: 1,\n                dynamicHandle: 1,\n                clickBar: 1,\n                hiddenScroll: true,\n\n                // In safari the transform is causing the headers to occasionally disappear or flicker\n                requireAnimation: !browser.safari,\n                allowNativeSmoothScroll: true\n            });\n            tabs.scroller.init();\n        } else {\n            tabs.classList.add('scrollX');\n            tabs.classList.add('hiddenScrollX');\n            tabs.classList.add('smoothScrollX');\n        }\n    }\n\n    EmbyTabs.createdCallback = function () {\n        if (this.classList.contains('emby-tabs')) {\n            return;\n        }\n        this.classList.add('emby-tabs');\n        this.classList.add('focusable');\n\n        dom.addEventListener(this, 'click', onClick, {\n            passive: true\n        });\n\n        dom.addEventListener(this, 'focusout', onFocusOut);\n    };\n\n    EmbyTabs.focus = function onFocusIn() {\n        const selectedTab = this.querySelector('.' + activeButtonClass);\n        const lastFocused = this.querySelector('.lastFocused');\n\n        if (lastFocused) {\n            focusManager.focus(lastFocused);\n        } else if (selectedTab) {\n            focusManager.focus(selectedTab);\n        } else {\n            focusManager.autoFocus(this);\n        }\n    };\n\n    EmbyTabs.refresh = function () {\n        if (this.scroller) {\n            this.scroller.reload();\n        }\n    };\n\n    EmbyTabs.attachedCallback = function () {\n        initScroller(this);\n\n        const current = this.querySelector('.' + activeButtonClass);\n        const currentIndex = current ? parseInt(current.getAttribute('data-index')) : parseInt(this.getAttribute('data-index') || '0');\n\n        if (currentIndex !== -1) {\n            this.selectedTabIndex = currentIndex;\n\n            const tabButtons = this.querySelectorAll('.' + buttonClass);\n\n            const newTabButton = tabButtons[currentIndex];\n\n            if (newTabButton) {\n                setActiveTabButton(newTabButton);\n            }\n        }\n\n        if (!this.readyFired) {\n            this.readyFired = true;\n            this.dispatchEvent(new CustomEvent('ready', {}));\n        }\n    };\n\n    EmbyTabs.detachedCallback = function () {\n        if (this.scroller) {\n            this.scroller.destroy();\n            this.scroller = null;\n        }\n\n        dom.removeEventListener(this, 'click', onClick, {\n            passive: true\n        });\n    };\n\n    function getSelectedTabButton(elem) {\n        return elem.querySelector('.' + activeButtonClass);\n    }\n\n    EmbyTabs.selectedIndex = function (selected, triggerEvent) {\n        const tabs = this;\n\n        if (selected == null) {\n            return tabs.selectedTabIndex || 0;\n        }\n\n        const current = tabs.selectedIndex();\n\n        tabs.selectedTabIndex = selected;\n\n        const tabButtons = tabs.querySelectorAll('.' + buttonClass);\n\n        if (current === selected || triggerEvent === false) {\n            triggerBeforeTabChange(tabs, selected, current);\n\n            tabs.dispatchEvent(new CustomEvent('tabchange', {\n                detail: {\n                    selectedTabIndex: selected\n                }\n            }));\n\n            const currentTabButton = tabButtons[current];\n            setActiveTabButton(tabButtons[selected]);\n\n            if (current !== selected && currentTabButton) {\n                currentTabButton.classList.remove(activeButtonClass);\n            }\n        } else {\n            onClick.call(tabs, {\n                target: tabButtons[selected]\n            });\n        }\n    };\n\n    function getSibling(elem, method) {\n        let sibling = elem[method];\n\n        while (sibling) {\n            if (sibling.classList.contains(buttonClass)) {\n                if (!sibling.classList.contains('hide')) {\n                    return sibling;\n                }\n            }\n\n            sibling = sibling[method];\n        }\n\n        return null;\n    }\n\n    EmbyTabs.selectNext = function () {\n        const current = getSelectedTabButton(this);\n\n        const sibling = getSibling(current, 'nextSibling');\n\n        if (sibling) {\n            onClick.call(this, {\n                target: sibling\n            });\n        }\n    };\n\n    EmbyTabs.selectPrevious = function () {\n        const current = getSelectedTabButton(this);\n\n        const sibling = getSibling(current, 'previousSibling');\n\n        if (sibling) {\n            onClick.call(this, {\n                target: sibling\n            });\n        }\n    };\n\n    EmbyTabs.triggerBeforeTabChange = function (selected) {\n        const tabs = this;\n\n        triggerBeforeTabChange(tabs, tabs.selectedIndex());\n    };\n\n    EmbyTabs.triggerTabChange = function (selected) {\n        const tabs = this;\n\n        tabs.dispatchEvent(new CustomEvent('tabchange', {\n            detail: {\n                selectedTabIndex: tabs.selectedIndex()\n            }\n        }));\n    };\n\n    EmbyTabs.setTabEnabled = function (index, enabled) {\n        const btn = this.querySelector('.emby-tab-button[data-index=\"' + index + '\"]');\n\n        if (enabled) {\n            btn.classList.remove('hide');\n        } else {\n            btn.classList.remove('add');\n        }\n    };\n\n    document.registerElement('emby-tabs', {\n        prototype: EmbyTabs,\n        extends: 'div'\n    });\n\n/* eslint-enable indent */\n"]}