{"version":3,"sources":["elements/emby-ratingbutton/emby-ratingbutton.js"],"names":["define","_connectionManager","_serverNotifications","_events","_globalize","_embyButton","_interopRequireDefault","obj","__esModule","default","onClick","e","button","this","id","getAttribute","serverId","apiClient","connectionManager","getApiClient","likes","showPicker","itemId","isFavorite","updateFavoriteStatus","getCurrentUserId","then","userData","setState","Likes","IsFavorite","onUserDataChanged","ItemId","updateAttribute","icon","querySelector","classList","add","remove","setAttribute","clearEvents","removeEventListener","removeNotificationEvent","instance","name","handler","events","off","serverNotifications","bindEvents","addEventListener","addNotificationEvent","localHandler","bind","on","EmbyRatingButtonPrototype","Object","create","EmbyButtonPrototype","createdCallback","call","attachedCallback","setTitle","title","globalize","translate","text","innerHTML","detachedCallback","setItem","item","Id","ServerId","UserData","removeAttribute","document","registerElement","prototype","extends"],"mappings":"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","file":"emby-ratingbutton.js","sourcesContent":["import connectionManager from 'connectionManager';\nimport serverNotifications from 'serverNotifications';\nimport events from 'events';\nimport globalize from 'globalize';\nimport EmbyButtonPrototype from 'emby-button';\n\n/* eslint-disable indent */\n\n    function addNotificationEvent(instance, name, handler) {\n        const localHandler = handler.bind(instance);\n        events.on(serverNotifications, name, localHandler);\n        instance[name] = localHandler;\n    }\n\n    function removeNotificationEvent(instance, name) {\n        const handler = instance[name];\n        if (handler) {\n            events.off(serverNotifications, name, handler);\n            instance[name] = null;\n        }\n    }\n\n    function showPicker(button, apiClient, itemId, likes, isFavorite) {\n        return apiClient.updateFavoriteStatus(apiClient.getCurrentUserId(), itemId, !isFavorite);\n    }\n\n    function onClick(e) {\n        const button = this;\n        const id = button.getAttribute('data-id');\n        const serverId = button.getAttribute('data-serverid');\n        const apiClient = connectionManager.getApiClient(serverId);\n\n        let likes = this.getAttribute('data-likes');\n        const isFavorite = this.getAttribute('data-isfavorite') === 'true';\n        if (likes === 'true') {\n            likes = true;\n        } else if (likes === 'false') {\n            likes = false;\n        } else {\n            likes = null;\n        }\n\n        showPicker(button, apiClient, id, likes, isFavorite).then(function (userData) {\n            setState(button, userData.Likes, userData.IsFavorite);\n        });\n    }\n\n    function onUserDataChanged(e, apiClient, userData) {\n        const button = this;\n\n        if (userData.ItemId === button.getAttribute('data-id')) {\n            setState(button, userData.Likes, userData.IsFavorite);\n        }\n    }\n\n    function setState(button, likes, isFavorite, updateAttribute) {\n        const icon = button.querySelector('.material-icons');\n\n        if (isFavorite) {\n            if (icon) {\n                icon.classList.add('favorite');\n                icon.classList.add('ratingbutton-icon-withrating');\n            }\n\n            button.classList.add('ratingbutton-withrating');\n        } else if (likes) {\n            if (icon) {\n                icon.classList.add('favorite');\n                icon.classList.remove('ratingbutton-icon-withrating');\n            }\n            button.classList.remove('ratingbutton-withrating');\n        } else if (likes === false) {\n            if (icon) {\n                icon.classList.add('favorite');\n                icon.classList.remove('ratingbutton-icon-withrating');\n            }\n            button.classList.remove('ratingbutton-withrating');\n        } else {\n            if (icon) {\n                icon.classList.add('favorite');\n                icon.classList.remove('ratingbutton-icon-withrating');\n            }\n            button.classList.remove('ratingbutton-withrating');\n        }\n\n        if (updateAttribute !== false) {\n            button.setAttribute('data-isfavorite', isFavorite);\n\n            button.setAttribute('data-likes', (likes === null ? '' : likes));\n        }\n    }\n\n    function setTitle(button) {\n        button.title = globalize.translate('Favorite');\n\n        const text = button.querySelector('.button-text');\n        if (text) {\n            text.innerHTML = button.title;\n        }\n    }\n\n    function clearEvents(button) {\n        button.removeEventListener('click', onClick);\n        removeNotificationEvent(button, 'UserDataChanged');\n    }\n\n    function bindEvents(button) {\n        clearEvents(button);\n\n        button.addEventListener('click', onClick);\n        addNotificationEvent(button, 'UserDataChanged', onUserDataChanged);\n    }\n\n    const EmbyRatingButtonPrototype = Object.create(EmbyButtonPrototype);\n\n    EmbyRatingButtonPrototype.createdCallback = function () {\n        // base method\n        if (EmbyButtonPrototype.createdCallback) {\n            EmbyButtonPrototype.createdCallback.call(this);\n        }\n    };\n\n    EmbyRatingButtonPrototype.attachedCallback = function () {\n        // base method\n        if (EmbyButtonPrototype.attachedCallback) {\n            EmbyButtonPrototype.attachedCallback.call(this);\n        }\n\n        const itemId = this.getAttribute('data-id');\n        const serverId = this.getAttribute('data-serverid');\n        if (itemId && serverId) {\n            let likes = this.getAttribute('data-likes');\n            const isFavorite = this.getAttribute('data-isfavorite') === 'true';\n            if (likes === 'true') {\n                likes = true;\n            } else if (likes === 'false') {\n                likes = false;\n            } else {\n                likes = null;\n            }\n\n            setState(this, likes, isFavorite, false);\n            bindEvents(this);\n        }\n\n        setTitle(this);\n    };\n\n    EmbyRatingButtonPrototype.detachedCallback = function () {\n        // base method\n        if (EmbyButtonPrototype.detachedCallback) {\n            EmbyButtonPrototype.detachedCallback.call(this);\n        }\n\n        clearEvents(this);\n    };\n\n    EmbyRatingButtonPrototype.setItem = function (item) {\n        if (item) {\n            this.setAttribute('data-id', item.Id);\n            this.setAttribute('data-serverid', item.ServerId);\n\n            const userData = item.UserData || {};\n            setState(this, userData.Likes, userData.IsFavorite);\n            bindEvents(this);\n        } else {\n            this.removeAttribute('data-id');\n            this.removeAttribute('data-serverid');\n            this.removeAttribute('data-likes');\n            this.removeAttribute('data-isfavorite');\n            clearEvents(this);\n        }\n    };\n\n    document.registerElement('emby-ratingbutton', {\n        prototype: EmbyRatingButtonPrototype,\n        extends: 'button'\n    });\n\n/* eslint-enable indent */\n"]}