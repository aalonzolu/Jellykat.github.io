{"version":3,"sources":["plugins/sessionPlayer/plugin.js"],"names":["define","_exports","_playbackManager","_events","_serverNotifications","_connectionManager","_interopRequireDefault","obj","__esModule","default","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","getActivePlayerId","info","playbackManager","getPlayerInfo","id","sendPlayCommand","apiClient","options","playType","sessionId","remoteOptions","ItemIds","ids","items","map","Id","join","PlayCommand","startPositionTicks","StartPositionTicks","mediaSourceId","MediaSourceId","audioStreamIndex","AudioStreamIndex","subtitleStreamIndex","SubtitleStreamIndex","startIndex","StartIndex","sendPlayStateCommand","command","getCurrentApiClient","instance","currentServerId","connectionManager","getApiClient","currentApiClient","sendCommandByName","name","Name","Arguments","sendCommand","processUpdatedSessions","sessions","serverId","s","NowPlayingItem","ServerId","currentTargetId","session","filter","normalizeImages","state","item","ImageTags","Primary","PrimaryImageTag","BackdropImageTag","BackdropItemId","BackdropImageTags","ParentBackdropImageTags","ParentBackdropItemId","eventNames","getChangedEvents","state1","state2","names","push","lastPlayerData","events","trigger","setDefaultPlayerActive","onPollIntervalFired","this","isMessageChannelOpen","getSessions","then","subscribeToPlayerUpdates","isUpdating","sendMessage","pollInterval","clearInterval","setInterval","bind","value","_default","SessionPlayer","_classCallCheck","Constructor","TypeError","self","type","isLocalPlayer","on","serverNotifications","e","data","_createClass","protoProps","staticProps","prototype","beginPlayerUpdates","playerListenerCount","endPlayerUpdates","unsubscribeFromPlayerUpdates","getPlayerState","getTargets","sessionQuery","ControllableByUserId","getCurrentUserId","DeviceId","deviceId","DeviceName","deviceName","deviceType","DeviceType","playerName","appName","Client","playableMediaTypes","PlayableMediaTypes","supportedCommands","Capabilities","SupportedCommands","user","UserId","UserName","UserPrimaryImageTag","Promise","resolve","play","assign","shuffle","instantMix","queue","queueNext","canPlayMediaType","mediaType","toLowerCase","canQueueMediaType","stop","nextTrack","previousTrack","seek","positionTicks","SeekPositionTicks","currentTime","val","PlayState","PositionTicks","duration","RunTimeTicks","paused","IsPaused","getVolume","VolumeLevel","isMuted","IsMuted","pause","unpause","playPause","setMute","toggleMute","setVolume","vol","Volume","volumeUp","volumeDown","toggleFullscreen","audioTracks","MediaStreams","Type","getAudioStreamIndex","playTrailers","ItemId","setAudioStreamIndex","index","Index","subtitleTracks","getSubtitleStreamIndex","setSubtitleStreamIndex","setRepeatMode","mode","RepeatMode","getRepeatMode","setQueueShuffleMode","ShuffleMode","getQueueShuffleMode","displayContent","isPlaying","MediaType","isPlayingVideo","isPlayingAudio","getPlaylist","getCurrentPlaylistItemId","setCurrentPlaylistItem","playlistItemId","removeFromPlaylist","playlistItemIds","tryPair"],"mappings":"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","file":"plugin.js","sourcesContent":["import playbackManager from 'playbackManager';\nimport events from 'events';\nimport serverNotifications from 'serverNotifications';\nimport connectionManager from 'connectionManager';\n\nfunction getActivePlayerId() {\n    const info = playbackManager.getPlayerInfo();\n    return info ? info.id : null;\n}\n\nfunction sendPlayCommand(apiClient, options, playType) {\n    const sessionId = getActivePlayerId();\n\n    const ids = options.ids || options.items.map(function (i) {\n        return i.Id;\n    });\n\n    const remoteOptions = {\n        ItemIds: ids.join(','),\n\n        PlayCommand: playType\n    };\n\n    if (options.startPositionTicks) {\n        remoteOptions.StartPositionTicks = options.startPositionTicks;\n    }\n\n    if (options.mediaSourceId) {\n        remoteOptions.MediaSourceId = options.mediaSourceId;\n    }\n\n    if (options.audioStreamIndex != null) {\n        remoteOptions.AudioStreamIndex = options.audioStreamIndex;\n    }\n\n    if (options.subtitleStreamIndex != null) {\n        remoteOptions.SubtitleStreamIndex = options.subtitleStreamIndex;\n    }\n\n    if (options.startIndex != null) {\n        remoteOptions.StartIndex = options.startIndex;\n    }\n\n    return apiClient.sendPlayCommand(sessionId, remoteOptions);\n}\n\nfunction sendPlayStateCommand(apiClient, command, options) {\n    const sessionId = getActivePlayerId();\n\n    apiClient.sendPlayStateCommand(sessionId, command, options);\n}\n\nfunction getCurrentApiClient(instance) {\n    const currentServerId = instance.currentServerId;\n\n    if (currentServerId) {\n        return connectionManager.getApiClient(currentServerId);\n    }\n\n    return connectionManager.currentApiClient();\n}\n\nfunction sendCommandByName(instance, name, options) {\n    const command = {\n        Name: name\n    };\n\n    if (options) {\n        command.Arguments = options;\n    }\n\n    instance.sendCommand(command);\n}\n\nfunction unsubscribeFromPlayerUpdates(instance) {\n    instance.isUpdating = true;\n\n    const apiClient = getCurrentApiClient(instance);\n    apiClient.sendMessage('SessionsStop');\n    if (instance.pollInterval) {\n        clearInterval(instance.pollInterval);\n        instance.pollInterval = null;\n    }\n}\n\nfunction processUpdatedSessions(instance, sessions, apiClient) {\n    const serverId = apiClient.serverId();\n\n    sessions.map(function (s) {\n        if (s.NowPlayingItem) {\n            s.NowPlayingItem.ServerId = serverId;\n        }\n    });\n\n    const currentTargetId = getActivePlayerId();\n\n    const session = sessions.filter(function (s) {\n        return s.Id === currentTargetId;\n    })[0];\n\n    if (session) {\n        normalizeImages(session, apiClient);\n\n        const eventNames = getChangedEvents(instance.lastPlayerData, session);\n        instance.lastPlayerData = session;\n\n        for (let i = 0, length = eventNames.length; i < length; i++) {\n            events.trigger(instance, eventNames[i], [session]);\n        }\n    } else {\n        instance.lastPlayerData = session;\n\n        playbackManager.setDefaultPlayerActive();\n    }\n}\n\nfunction getChangedEvents(state1, state2) {\n    const names = [];\n\n    if (!state1) {\n        names.push('statechange');\n        names.push('timeupdate');\n        names.push('pause');\n\n        return names;\n    }\n\n    // TODO: Trim these down to prevent the UI from over-refreshing\n    names.push('statechange');\n    names.push('timeupdate');\n    names.push('pause');\n\n    return names;\n}\n\nfunction onPollIntervalFired() {\n    const instance = this;\n    const apiClient = getCurrentApiClient(instance);\n    if (!apiClient.isMessageChannelOpen()) {\n        apiClient.getSessions().then(function (sessions) {\n            processUpdatedSessions(instance, sessions, apiClient);\n        });\n    }\n}\n\nfunction subscribeToPlayerUpdates(instance) {\n    instance.isUpdating = true;\n\n    const apiClient = getCurrentApiClient(instance);\n    apiClient.sendMessage('SessionsStart', '100,800');\n    if (instance.pollInterval) {\n        clearInterval(instance.pollInterval);\n        instance.pollInterval = null;\n    }\n    instance.pollInterval = setInterval(onPollIntervalFired.bind(instance), 5000);\n}\n\nfunction normalizeImages(state, apiClient) {\n    if (state && state.NowPlayingItem) {\n        const item = state.NowPlayingItem;\n\n        if (!item.ImageTags || !item.ImageTags.Primary) {\n            if (item.PrimaryImageTag) {\n                item.ImageTags = item.ImageTags || {};\n                item.ImageTags.Primary = item.PrimaryImageTag;\n            }\n        }\n        if (item.BackdropImageTag && item.BackdropItemId === item.Id) {\n            item.BackdropImageTags = [item.BackdropImageTag];\n        }\n        if (item.BackdropImageTag && item.BackdropItemId !== item.Id) {\n            item.ParentBackdropImageTags = [item.BackdropImageTag];\n            item.ParentBackdropItemId = item.BackdropItemId;\n        }\n        if (!item.ServerId) {\n            item.ServerId = apiClient.serverId();\n        }\n    }\n}\n\nclass SessionPlayer {\n    constructor() {\n        const self = this;\n\n        this.name = 'Remote Control';\n        this.type = 'mediaplayer';\n        this.isLocalPlayer = false;\n        this.id = 'remoteplayer';\n\n        events.on(serverNotifications, 'Sessions', function (e, apiClient, data) {\n            processUpdatedSessions(self, data, apiClient);\n        });\n    }\n\n    beginPlayerUpdates() {\n        this.playerListenerCount = this.playerListenerCount || 0;\n\n        if (this.playerListenerCount <= 0) {\n            this.playerListenerCount = 0;\n\n            subscribeToPlayerUpdates(this);\n        }\n\n        this.playerListenerCount++;\n    }\n\n    endPlayerUpdates() {\n        this.playerListenerCount = this.playerListenerCount || 0;\n        this.playerListenerCount--;\n\n        if (this.playerListenerCount <= 0) {\n            unsubscribeFromPlayerUpdates(this);\n            this.playerListenerCount = 0;\n        }\n    }\n\n    getPlayerState() {\n        return this.lastPlayerData || {};\n    }\n\n    getTargets() {\n        const apiClient = getCurrentApiClient(this);\n\n        const sessionQuery = {\n            ControllableByUserId: apiClient.getCurrentUserId()\n        };\n\n        if (apiClient) {\n            const name = this.name;\n\n            return apiClient.getSessions(sessionQuery).then(function (sessions) {\n                return sessions.filter(function (s) {\n                    return s.DeviceId !== apiClient.deviceId();\n                }).map(function (s) {\n                    return {\n                        name: s.DeviceName,\n                        deviceName: s.DeviceName,\n                        deviceType: s.DeviceType,\n                        id: s.Id,\n                        playerName: name,\n                        appName: s.Client,\n                        playableMediaTypes: s.PlayableMediaTypes,\n                        isLocalPlayer: false,\n                        supportedCommands: s.Capabilities.SupportedCommands,\n                        user: s.UserId ? {\n                            Id: s.UserId,\n                            Name: s.UserName,\n                            PrimaryImageTag: s.UserPrimaryImageTag\n                        } : null\n                    };\n                });\n            });\n        } else {\n            return Promise.resolve([]);\n        }\n    }\n\n    sendCommand(command) {\n        const sessionId = getActivePlayerId();\n\n        const apiClient = getCurrentApiClient(this);\n        apiClient.sendCommand(sessionId, command);\n    }\n\n    play(options) {\n        options = Object.assign({}, options);\n\n        if (options.items) {\n            options.ids = options.items.map(function (i) {\n                return i.Id;\n            });\n\n            options.items = null;\n        }\n\n        return sendPlayCommand(getCurrentApiClient(this), options, 'PlayNow');\n    }\n\n    shuffle(item) {\n        sendPlayCommand(getCurrentApiClient(this), { ids: [item.Id] }, 'PlayShuffle');\n    }\n\n    instantMix(item) {\n        sendPlayCommand(getCurrentApiClient(this), { ids: [item.Id] }, 'PlayInstantMix');\n    }\n\n    queue(options) {\n        sendPlayCommand(getCurrentApiClient(this), options, 'PlayNext');\n    }\n\n    queueNext(options) {\n        sendPlayCommand(getCurrentApiClient(this), options, 'PlayLast');\n    }\n\n    canPlayMediaType(mediaType) {\n        mediaType = (mediaType || '').toLowerCase();\n        return mediaType === 'audio' || mediaType === 'video';\n    }\n\n    canQueueMediaType(mediaType) {\n        return this.canPlayMediaType(mediaType);\n    }\n\n    stop() {\n        sendPlayStateCommand(getCurrentApiClient(this), 'stop');\n    }\n\n    nextTrack() {\n        sendPlayStateCommand(getCurrentApiClient(this), 'nextTrack');\n    }\n\n    previousTrack() {\n        sendPlayStateCommand(getCurrentApiClient(this), 'previousTrack');\n    }\n\n    seek(positionTicks) {\n        sendPlayStateCommand(getCurrentApiClient(this), 'seek',\n            {\n                SeekPositionTicks: positionTicks\n            });\n    }\n\n    currentTime(val) {\n        if (val != null) {\n            return this.seek(val);\n        }\n\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.PositionTicks;\n    }\n\n    duration() {\n        let state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        return state.RunTimeTicks;\n    }\n\n    paused() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.IsPaused;\n    }\n\n    getVolume() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.VolumeLevel;\n    }\n\n    isMuted() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.IsMuted;\n    }\n\n    pause() {\n        sendPlayStateCommand(getCurrentApiClient(this), 'Pause');\n    }\n\n    unpause() {\n        sendPlayStateCommand(getCurrentApiClient(this), 'Unpause');\n    }\n\n    playPause() {\n        sendPlayStateCommand(getCurrentApiClient(this), 'PlayPause');\n    }\n\n    setMute(isMuted) {\n        if (isMuted) {\n            sendCommandByName(this, 'Mute');\n        } else {\n            sendCommandByName(this, 'Unmute');\n        }\n    }\n\n    toggleMute() {\n        sendCommandByName(this, 'ToggleMute');\n    }\n\n    setVolume(vol) {\n        sendCommandByName(this, 'SetVolume', {\n            Volume: vol\n        });\n    }\n\n    volumeUp() {\n        sendCommandByName(this, 'VolumeUp');\n    }\n\n    volumeDown() {\n        sendCommandByName(this, 'VolumeDown');\n    }\n\n    toggleFullscreen() {\n        sendCommandByName(this, 'ToggleFullscreen');\n    }\n\n    audioTracks() {\n        let state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        const streams = state.MediaStreams || [];\n        return streams.filter(function (s) {\n            return s.Type === 'Audio';\n        });\n    }\n\n    getAudioStreamIndex() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.AudioStreamIndex;\n    }\n\n    playTrailers(item) {\n        sendCommandByName(this, 'PlayTrailers', {\n            ItemId: item.Id\n        });\n    }\n\n    setAudioStreamIndex(index) {\n        sendCommandByName(this, 'SetAudioStreamIndex', {\n            Index: index\n        });\n    }\n\n    subtitleTracks() {\n        let state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        const streams = state.MediaStreams || [];\n        return streams.filter(function (s) {\n            return s.Type === 'Subtitle';\n        });\n    }\n\n    getSubtitleStreamIndex() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.SubtitleStreamIndex;\n    }\n\n    setSubtitleStreamIndex(index) {\n        sendCommandByName(this, 'SetSubtitleStreamIndex', {\n            Index: index\n        });\n    }\n\n    setRepeatMode(mode) {\n        sendCommandByName(this, 'SetRepeatMode', {\n            RepeatMode: mode\n        });\n    }\n\n    getRepeatMode() {\n    }\n\n    setQueueShuffleMode(mode) {\n        sendCommandByName(this, 'SetShuffleQueue', {\n            ShuffleMode: mode\n        });\n    }\n\n    getQueueShuffleMode() {\n    }\n\n    displayContent(options) {\n        sendCommandByName(this, 'DisplayContent', options);\n    }\n\n    isPlaying(mediaType) {\n        const state = this.lastPlayerData || {};\n        return state.NowPlayingItem != null && (state.NowPlayingItem.MediaType === mediaType || !mediaType);\n    }\n\n    isPlayingVideo() {\n        let state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        return state.MediaType === 'Video';\n    }\n\n    isPlayingAudio() {\n        let state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        return state.MediaType === 'Audio';\n    }\n\n    getPlaylist() {\n        return Promise.resolve([]);\n    }\n\n    getCurrentPlaylistItemId() {\n    }\n\n    setCurrentPlaylistItem(playlistItemId) {\n        return Promise.resolve();\n    }\n\n    removeFromPlaylist(playlistItemIds) {\n        return Promise.resolve();\n    }\n\n    tryPair(target) {\n        return Promise.resolve();\n    }\n}\n\nexport default SessionPlayer;\n"]}