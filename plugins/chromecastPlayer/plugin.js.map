{"version":3,"sources":["plugins/chromecastPlayer/plugin.js"],"names":["define","_require","_exports","_appSettings","userSettings","_playbackManager","_connectionManager","_globalize","_events","_castSenderApiLoader","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","_createClass","protoProps","staticProps","currentResolve","currentReject","value","sendConnectionResult","isOk","resolve","reject","playbackManager","removeActivePlayer","DEVICE_STATE","PLAYER_STATE","CastPlayer","this","deviceState","currentMediaSession","session","castPlayerState","hasReceivers","errorHandler","onError","bind","mediaStatusUpdateHandler","onMediaStatusUpdate","initializeCastPlayer","chrome","window","cast","isAvailable","applicationID","chromecastVersion","sessionRequest","SessionRequest","apiConfig","ApiConfig","sessionListener","receiverListener","console","debug","initialize","onInitSuccess","setTimeout","isInitialized","e","media","onMediaDiscovered","onSessionConnected","messageListener","namespace","message","JSON","parse","type","errorCode","data","alertText","globalize","translate","events","trigger","sessionUpdateListener","isAlive","document","removeEventListener","onVolumeUpKeyDown","onVolumeDownKeyDown","launchApp","requestSession","onRequestSessionSuccess","onLaunchError","sessionId","addMessageListener","addMediaListener","sessionMediaListener","addUpdateListener","addEventListener","sendMessage","options","command","stopApp","stop","onStopAppSuccess","loadMedia","items","map","Id","ServerId","Name","Type","MediaType","IsFolder","Promise","apiClient","player","receiverName","receiver","friendlyName","connectionManager","getApiClient","currentApiClient","assign","userId","getCurrentUserId","deviceId","accessToken","serverAddress","serverId","serverVersion","bitrateSetting","appSettings","maxChromecastBitrate","maxBitrate","subtitleAppearance","getSubtitleAppearanceSettings","subtitleBurnIn","_resolve","_reject","imported","then","_ref","getServerAddress","sendMessageInternal","stringify","onPlayCommandSuccess","how","mediaSession","mediaSessionId","playerState","setReceiverVolume","mute","vol","setReceiverMuted","mediaCommandSuccessCallback","setReceiverVolumeLevel","info","text","title","_ref2","alert","volumeUp","volumeDown","bindEventForRelay","eventName","on","_castPlayer","state","getPlayerStateInternal","initializeChromecast","dispatchEvent","CustomEvent","detail","setActivePlayer","getCurrentTargetInfo","lastPlayerData","volume","PlayState","VolumeLevel","IsMuted","_default","ChromecastPlayer","name","id","isLocalPlayer","castSenderApiLoader","load","tryPair","castPlayer","getTargets","targets","push","appName","playerName","playableMediaTypes","deviceName","supportedCommands","triggerStateChange","normalizeImages","NowPlayingItem","item","ImageTags","Primary","PrimaryImageTag","BackdropImageTag","BackdropItemId","BackdropImageTags","ParentBackdropImageTags","ParentBackdropItemId","playWithCommand","getItem","ids","sort","a","b","indexOf","seek","position","parseInt","setAudioStreamIndex","index","setSubtitleStreamIndex","setMaxStreamingBitrate","isFullscreen","IsFullscreen","nextTrack","previousTrack","level","Math","max","endSession","min","setVolume","unpause","playPause","pause","displayContent","setMute","isMuted","getRepeatMode","RepeatMode","getQueueShuffleMode","ShuffleMode","playTrailers","ItemId","setRepeatMode","mode","setQueueShuffleMode","toggleMute","audioTracks","MediaStreams","filter","s","getAudioStreamIndex","AudioStreamIndex","subtitleTracks","getSubtitleStreamIndex","SubtitleStreamIndex","getMaxStreamingBitrate","MaxStreamingBitrate","getVolume","isPlaying","mediaType","isPlayingVideo","isPlayingAudio","currentTime","val","PositionTicks","duration","RunTimeTicks","getBufferedRanges","BufferedRanges","paused","IsPaused","shuffle","instantMix","canPlayMediaType","toLowerCase","canQueueMediaType","queue","queueNext","play","Error","getItemsForPlayback","query","Ids","split","Items","TotalRecordCount","Limit","ExcludeLocationTypes","EnableTotalRecordCount","getItems","join","result","toggleFullscreen","beginPlayerUpdates","endPlayerUpdates","getPlaylist","getCurrentPlaylistItemId","setCurrentPlaylistItem","playlistItemId","removeFromPlaylist","playlistItemIds","getPlayerState"],"mappings":"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","file":"plugin.js","sourcesContent":["import appSettings from 'appSettings';\nimport * as userSettings from 'userSettings';\nimport playbackManager from 'playbackManager';\nimport connectionManager from 'connectionManager';\nimport globalize from 'globalize';\nimport events from 'events';\nimport castSenderApiLoader from 'castSenderApiLoader';\n\n// Based on https://github.com/googlecast/CastVideos-chrome/blob/master/CastVideos.js\n\nlet currentResolve;\nlet currentReject;\n\nconst PlayerName = 'Google Cast';\n\nfunction sendConnectionResult(isOk) {\n    const resolve = currentResolve;\n    const reject = currentReject;\n\n    currentResolve = null;\n    currentReject = null;\n\n    if (isOk) {\n        if (resolve) {\n            resolve();\n        }\n    } else {\n        if (reject) {\n            reject();\n        } else {\n            playbackManager.removeActivePlayer(PlayerName);\n        }\n    }\n}\n\n/**\n * Constants of states for Chromecast device\n **/\nconst DEVICE_STATE = {\n    'IDLE': 0,\n    'ACTIVE': 1,\n    'WARNING': 2,\n    'ERROR': 3\n};\n\n/**\n * Constants of states for CastPlayer\n **/\nconst PLAYER_STATE = {\n    'IDLE': 'IDLE',\n    'LOADING': 'LOADING',\n    'LOADED': 'LOADED',\n    'PLAYING': 'PLAYING',\n    'PAUSED': 'PAUSED',\n    'STOPPED': 'STOPPED',\n    'SEEKING': 'SEEKING',\n    'ERROR': 'ERROR'\n};\n\n// production version registered with google\n// replace this value if you want to test changes on another instance\nconst applicationStable = 'F007D354';\nconst applicationUnstable = '6F511C87';\n\nconst messageNamespace = 'urn:x-cast:com.connectsdk';\n\nclass CastPlayer {\n    constructor() {\n        /* device variables */\n        // @type {DEVICE_STATE} A state for device\n        this.deviceState = DEVICE_STATE.IDLE;\n\n        /* Cast player variables */\n        // @type {Object} a chrome.cast.media.Media object\n        this.currentMediaSession = null;\n\n        // @type {string} a chrome.cast.Session object\n        this.session = null;\n        // @type {PLAYER_STATE} A state for Cast media player\n        this.castPlayerState = PLAYER_STATE.IDLE;\n\n        this.hasReceivers = false;\n\n        // bind once - commit 2ebffc2271da0bc5e8b13821586aee2a2e3c7753\n        this.errorHandler = this.onError.bind(this);\n        this.mediaStatusUpdateHandler = this.onMediaStatusUpdate.bind(this);\n\n        this.initializeCastPlayer();\n    }\n\n    /**\n     * Initialize Cast media player\n     * Initializes the API. Note that either successCallback and errorCallback will be\n     * invoked once the API has finished initialization. The sessionListener and\n     * receiverListener may be invoked at any time afterwards, and possibly more than once.\n     */\n    initializeCastPlayer() {\n        const chrome = window.chrome;\n        if (!chrome) {\n            return;\n        }\n\n        if (!chrome.cast || !chrome.cast.isAvailable) {\n            setTimeout(this.initializeCastPlayer.bind(this), 1000);\n            return;\n        }\n\n        let applicationID = applicationStable;\n        if (userSettings.chromecastVersion() === 'unstable') {\n            applicationID = applicationUnstable;\n        }\n\n        // request session\n        const sessionRequest = new chrome.cast.SessionRequest(applicationID);\n        const apiConfig = new chrome.cast.ApiConfig(sessionRequest,\n            this.sessionListener.bind(this),\n            this.receiverListener.bind(this));\n\n        console.debug('chromecast.initialize');\n        chrome.cast.initialize(apiConfig, this.onInitSuccess.bind(this), this.errorHandler);\n    }\n\n    /**\n     * Callback function for init success\n     */\n    onInitSuccess() {\n        this.isInitialized = true;\n        console.debug('chromecast init success');\n    }\n\n    /**\n     * Generic error callback function\n     */\n    onError() {\n        console.debug('chromecast error');\n    }\n\n    /**\n     * @param {!Object} e A new session\n     * This handles auto-join when a page is reloaded\n     * When active session is detected, playback will automatically\n     * join existing session and occur in Cast mode and media\n     * status gets synced up with current media of the session\n     */\n    sessionListener(e) {\n        this.session = e;\n        if (this.session) {\n            if (this.session.media[0]) {\n                this.onMediaDiscovered('activeSession', this.session.media[0]);\n            }\n\n            this.onSessionConnected(e);\n        }\n    }\n\n    messageListener(namespace, message) {\n        if (typeof (message) === 'string') {\n            message = JSON.parse(message);\n        }\n\n        if (message.type === 'playbackerror') {\n            const errorCode = message.data;\n            setTimeout(function () {\n                alertText(globalize.translate('MessagePlaybackError' + errorCode), globalize.translate('HeaderPlaybackError'));\n            }, 300);\n        } else if (message.type === 'connectionerror') {\n            setTimeout(function () {\n                alertText(globalize.translate('MessageChromecastConnectionError'), globalize.translate('HeaderError'));\n            }, 300);\n        } else if (message.type) {\n            events.trigger(this, message.type, [message.data]);\n        }\n    }\n\n    /**\n     * @param {string} e Receiver availability\n     * This indicates availability of receivers but\n     * does not provide a list of device IDs\n     */\n    receiverListener(e) {\n        if (e === 'available') {\n            console.debug('chromecast receiver found');\n            this.hasReceivers = true;\n        } else {\n            console.debug('chromecast receiver list empty');\n            this.hasReceivers = false;\n        }\n    }\n\n    /**\n     * session update listener\n     */\n    sessionUpdateListener(isAlive) {\n        if (isAlive) {\n            console.debug('sessionUpdateListener: already alive');\n        } else {\n            this.session = null;\n            this.deviceState = DEVICE_STATE.IDLE;\n            this.castPlayerState = PLAYER_STATE.IDLE;\n            document.removeEventListener('volumeupbutton', onVolumeUpKeyDown, false);\n            document.removeEventListener('volumedownbutton', onVolumeDownKeyDown, false);\n\n            console.debug('sessionUpdateListener: setting currentMediaSession to null');\n            this.currentMediaSession = null;\n\n            sendConnectionResult(false);\n        }\n    }\n\n    /**\n     * Requests that a receiver application session be created or joined. By default, the SessionRequest\n     * passed to the API at initialization time is used; this may be overridden by passing a different\n     * session request in opt_sessionRequest.\n     */\n    launchApp() {\n        console.debug('chromecast launching app...');\n        chrome.cast.requestSession(this.onRequestSessionSuccess.bind(this), this.onLaunchError.bind(this));\n    }\n\n    /**\n     * Callback function for request session success\n     * @param {Object} e A chrome.cast.Session object\n     */\n    onRequestSessionSuccess(e) {\n        console.debug('chromecast session success: ' + e.sessionId);\n        this.onSessionConnected(e);\n    }\n\n    onSessionConnected(session) {\n        this.session = session;\n        this.deviceState = DEVICE_STATE.ACTIVE;\n\n        this.session.addMessageListener(messageNamespace, this.messageListener.bind(this));\n        this.session.addMediaListener(this.sessionMediaListener.bind(this));\n        this.session.addUpdateListener(this.sessionUpdateListener.bind(this));\n\n        document.addEventListener('volumeupbutton', onVolumeUpKeyDown, false);\n        document.addEventListener('volumedownbutton', onVolumeDownKeyDown, false);\n\n        events.trigger(this, 'connect');\n        this.sendMessage({\n            options: {},\n            command: 'Identify'\n        });\n    }\n\n    /**\n     * session update listener\n     */\n    sessionMediaListener(e) {\n        this.currentMediaSession = e;\n        this.currentMediaSession.addUpdateListener(this.mediaStatusUpdateHandler);\n    }\n\n    /**\n     * Callback function for launch error\n     */\n    onLaunchError() {\n        console.debug('chromecast launch error');\n        this.deviceState = DEVICE_STATE.ERROR;\n        sendConnectionResult(false);\n    }\n\n    /**\n     * Stops the running receiver application associated with the session.\n     */\n    stopApp() {\n        if (this.session) {\n            this.session.stop(this.onStopAppSuccess.bind(this, 'Session stopped'), this.errorHandler);\n        }\n    }\n\n    /**\n     * Callback function for stop app success\n     */\n    onStopAppSuccess(message) {\n        console.debug(message);\n\n        this.deviceState = DEVICE_STATE.IDLE;\n        this.castPlayerState = PLAYER_STATE.IDLE;\n        document.removeEventListener('volumeupbutton', onVolumeUpKeyDown, false);\n        document.removeEventListener('volumedownbutton', onVolumeDownKeyDown, false);\n\n        this.currentMediaSession = null;\n    }\n\n    /**\n     * Loads media into a running receiver application\n     * @param {Number} mediaIndex An index number to indicate current media content\n     */\n    loadMedia(options, command) {\n        if (!this.session) {\n            console.debug('no session');\n            return Promise.reject();\n        }\n\n        // convert items to smaller stubs to send minimal amount of information\n        options.items = options.items.map(function (i) {\n            return {\n                Id: i.Id,\n                ServerId: i.ServerId,\n                Name: i.Name,\n                Type: i.Type,\n                MediaType: i.MediaType,\n                IsFolder: i.IsFolder\n            };\n        });\n\n        return this.sendMessage({\n            options: options,\n            command: command\n        });\n    }\n\n    sendMessage(message) {\n        const player = this;\n\n        let receiverName = null;\n\n        const session = player.session;\n\n        if (session && session.receiver && session.receiver.friendlyName) {\n            receiverName = session.receiver.friendlyName;\n        }\n\n        let apiClient;\n        if (message.options && message.options.ServerId) {\n            apiClient = connectionManager.getApiClient(message.options.ServerId);\n        } else if (message.options && message.options.items && message.options.items.length) {\n            apiClient = connectionManager.getApiClient(message.options.items[0].ServerId);\n        } else {\n            apiClient = connectionManager.currentApiClient();\n        }\n\n        message = Object.assign(message, {\n            userId: apiClient.getCurrentUserId(),\n            deviceId: apiClient.deviceId(),\n            accessToken: apiClient.accessToken(),\n            serverAddress: apiClient.serverAddress(),\n            serverId: apiClient.serverId(),\n            serverVersion: apiClient.serverVersion(),\n            receiverName: receiverName\n        });\n\n        const bitrateSetting = appSettings.maxChromecastBitrate();\n        if (bitrateSetting) {\n            message.maxBitrate = bitrateSetting;\n        }\n\n        if (message.options && message.options.items) {\n            message.subtitleAppearance = userSettings.getSubtitleAppearanceSettings();\n            message.subtitleBurnIn = appSettings.get('subtitleburnin') || '';\n        }\n\n        return new Promise(function (resolve, reject) {\n            import('./chromecastHelper').then(({ default: chromecastHelper }) => {\n                chromecastHelper.getServerAddress(apiClient).then(function (serverAddress) {\n                    message.serverAddress = serverAddress;\n                    player.sendMessageInternal(message).then(resolve, reject);\n                }, reject);\n            });\n        });\n    }\n\n    sendMessageInternal(message) {\n        message = JSON.stringify(message);\n\n        this.session.sendMessage(messageNamespace, message, this.onPlayCommandSuccess.bind(this), this.errorHandler);\n        return Promise.resolve();\n    }\n\n    onPlayCommandSuccess() {\n        console.debug('Message was sent to receiver ok.');\n    }\n\n    /**\n     * Callback function for loadMedia success\n     * @param {Object} mediaSession A new media object.\n     */\n    onMediaDiscovered(how, mediaSession) {\n        console.debug('chromecast new media session ID:' + mediaSession.mediaSessionId + ' (' + how + ')');\n        this.currentMediaSession = mediaSession;\n\n        if (how === 'loadMedia') {\n            this.castPlayerState = PLAYER_STATE.PLAYING;\n        }\n\n        if (how === 'activeSession') {\n            this.castPlayerState = mediaSession.playerState;\n        }\n\n        this.currentMediaSession.addUpdateListener(this.mediaStatusUpdateHandler);\n    }\n\n    /**\n     * Callback function for media status update from receiver\n     * @param {!Boolean} e true/false\n     */\n    onMediaStatusUpdate(e) {\n        console.debug('chromecast updating media: ' + e);\n        if (e === false) {\n            this.castPlayerState = PLAYER_STATE.IDLE;\n        }\n    }\n\n    /**\n     * Set media volume in Cast mode\n     * @param {Boolean} mute A boolean\n     */\n    setReceiverVolume(mute, vol) {\n        if (!this.currentMediaSession) {\n            console.debug('this.currentMediaSession is null');\n            return;\n        }\n\n        if (!mute) {\n            this.session.setReceiverVolumeLevel((vol || 1),\n                this.mediaCommandSuccessCallback.bind(this),\n                this.errorHandler);\n        } else {\n            this.session.setReceiverMuted(true,\n                this.mediaCommandSuccessCallback.bind(this),\n                this.errorHandler);\n        }\n    }\n\n    /**\n     * Mute CC\n     */\n    mute() {\n        this.setReceiverVolume(true);\n    }\n\n    /**\n     * Callback function for media command success\n     */\n    mediaCommandSuccessCallback(info, e) {\n        console.debug(info);\n    }\n}\n\nfunction alertText(text, title) {\n    import('alert').then(({default: alert}) => {\n        alert({\n            text: text,\n            title: title\n        });\n    });\n}\n\nfunction onVolumeUpKeyDown() {\n    playbackManager.volumeUp();\n}\n\nfunction onVolumeDownKeyDown() {\n    playbackManager.volumeDown();\n}\n\nfunction normalizeImages(state) {\n    if (state && state.NowPlayingItem) {\n        const item = state.NowPlayingItem;\n\n        if (!item.ImageTags || !item.ImageTags.Primary) {\n            if (item.PrimaryImageTag) {\n                item.ImageTags = item.ImageTags || {};\n                item.ImageTags.Primary = item.PrimaryImageTag;\n            }\n        }\n        if (item.BackdropImageTag && item.BackdropItemId === item.Id) {\n            item.BackdropImageTags = [item.BackdropImageTag];\n        }\n        if (item.BackdropImageTag && item.BackdropItemId !== item.Id) {\n            item.ParentBackdropImageTags = [item.BackdropImageTag];\n            item.ParentBackdropItemId = item.BackdropItemId;\n        }\n    }\n}\n\nfunction getItemsForPlayback(apiClient, query) {\n    const userId = apiClient.getCurrentUserId();\n\n    if (query.Ids && query.Ids.split(',').length === 1) {\n        return apiClient.getItem(userId, query.Ids.split(',')).then(function (item) {\n            return {\n                Items: [item],\n                TotalRecordCount: 1\n            };\n        });\n    } else {\n        query.Limit = query.Limit || 100;\n        query.ExcludeLocationTypes = 'Virtual';\n        query.EnableTotalRecordCount = false;\n\n        return apiClient.getItems(userId, query);\n    }\n}\n\nfunction bindEventForRelay(instance, eventName) {\n    events.on(instance._castPlayer, eventName, function (e, data) {\n        console.debug('cc: ' + eventName);\n        const state = instance.getPlayerStateInternal(data);\n\n        events.trigger(instance, eventName, [state]);\n    });\n}\n\nfunction initializeChromecast() {\n    const instance = this;\n    instance._castPlayer = new CastPlayer();\n\n    // To allow the native android app to override\n    document.dispatchEvent(new CustomEvent('chromecastloaded', {\n        detail: {\n            player: instance\n        }\n    }));\n\n    events.on(instance._castPlayer, 'connect', function (e) {\n        if (currentResolve) {\n            sendConnectionResult(true);\n        } else {\n            playbackManager.setActivePlayer(PlayerName, instance.getCurrentTargetInfo());\n        }\n\n        console.debug('cc: connect');\n        // Reset this so that statechange will fire\n        instance.lastPlayerData = null;\n    });\n\n    events.on(instance._castPlayer, 'playbackstart', function (e, data) {\n        console.debug('cc: playbackstart');\n\n        instance._castPlayer.initializeCastPlayer();\n\n        const state = instance.getPlayerStateInternal(data);\n        events.trigger(instance, 'playbackstart', [state]);\n    });\n\n    events.on(instance._castPlayer, 'playbackstop', function (e, data) {\n        console.debug('cc: playbackstop');\n        let state = instance.getPlayerStateInternal(data);\n\n        events.trigger(instance, 'playbackstop', [state]);\n\n        state = instance.lastPlayerData.PlayState || {};\n        const volume = state.VolumeLevel || 0.5;\n        const mute = state.IsMuted || false;\n\n        // Reset this so the next query doesn't make it appear like content is playing.\n        instance.lastPlayerData = {};\n        instance.lastPlayerData.PlayState = {};\n        instance.lastPlayerData.PlayState.VolumeLevel = volume;\n        instance.lastPlayerData.PlayState.IsMuted = mute;\n    });\n\n    events.on(instance._castPlayer, 'playbackprogress', function (e, data) {\n        console.debug('cc: positionchange');\n        const state = instance.getPlayerStateInternal(data);\n\n        events.trigger(instance, 'timeupdate', [state]);\n    });\n\n    bindEventForRelay(instance, 'timeupdate');\n    bindEventForRelay(instance, 'pause');\n    bindEventForRelay(instance, 'unpause');\n    bindEventForRelay(instance, 'volumechange');\n    bindEventForRelay(instance, 'repeatmodechange');\n    bindEventForRelay(instance, 'shufflequeuemodechange');\n\n    events.on(instance._castPlayer, 'playstatechange', function (e, data) {\n        console.debug('cc: playstatechange');\n        const state = instance.getPlayerStateInternal(data);\n\n        events.trigger(instance, 'pause', [state]);\n    });\n}\n\nclass ChromecastPlayer {\n    constructor() {\n        // playbackManager needs this\n        this.name = PlayerName;\n        this.type = 'mediaplayer';\n        this.id = 'chromecast';\n        this.isLocalPlayer = false;\n        this.lastPlayerData = {};\n\n        new castSenderApiLoader().load().then(initializeChromecast.bind(this));\n    }\n\n    tryPair(target) {\n        const castPlayer = this._castPlayer;\n\n        if (castPlayer.deviceState !== DEVICE_STATE.ACTIVE && castPlayer.isInitialized) {\n            return new Promise(function (resolve, reject) {\n                currentResolve = resolve;\n                currentReject = reject;\n                castPlayer.launchApp();\n            });\n        } else {\n            currentResolve = null;\n            currentReject = null;\n\n            return Promise.reject();\n        }\n    }\n\n    getTargets() {\n        const targets = [];\n\n        if (this._castPlayer && this._castPlayer.hasReceivers) {\n            targets.push(this.getCurrentTargetInfo());\n        }\n\n        return Promise.resolve(targets);\n    }\n\n    // This is a privately used method\n    getCurrentTargetInfo() {\n        let appName = null;\n\n        const castPlayer = this._castPlayer;\n\n        if (castPlayer.session && castPlayer.session.receiver && castPlayer.session.receiver.friendlyName) {\n            appName = castPlayer.session.receiver.friendlyName;\n        }\n\n        return {\n            name: PlayerName,\n            id: PlayerName,\n            playerName: PlayerName,\n            playableMediaTypes: ['Audio', 'Video'],\n            isLocalPlayer: false,\n            appName: PlayerName,\n            deviceName: appName,\n            supportedCommands: [\n                'VolumeUp',\n                'VolumeDown',\n                'Mute',\n                'Unmute',\n                'ToggleMute',\n                'SetVolume',\n                'SetAudioStreamIndex',\n                'SetSubtitleStreamIndex',\n                'DisplayContent',\n                'SetRepeatMode',\n                'SetShuffleQueue',\n                'EndSession',\n                'PlayMediaSource',\n                'PlayTrailers'\n            ]\n        };\n    }\n\n    getPlayerStateInternal(data) {\n        let triggerStateChange = false;\n        if (data && !this.lastPlayerData) {\n            triggerStateChange = true;\n        }\n\n        data = data || this.lastPlayerData;\n        this.lastPlayerData = data;\n\n        normalizeImages(data);\n\n        console.debug(JSON.stringify(data));\n\n        if (triggerStateChange) {\n            events.trigger(this, 'statechange', [data]);\n        }\n\n        return data;\n    }\n\n    playWithCommand(options, command) {\n        if (!options.items) {\n            const apiClient = connectionManager.getApiClient(options.serverId);\n            const instance = this;\n\n            return apiClient.getItem(apiClient.getCurrentUserId(), options.ids[0]).then(function (item) {\n                options.items = [item];\n                return instance.playWithCommand(options, command);\n            });\n        }\n\n        if (options.items.length > 1 && options && options.ids) {\n            // Use the original request id array for sorting the result in the proper order\n            options.items.sort(function (a, b) {\n                return options.ids.indexOf(a.Id) - options.ids.indexOf(b.Id);\n            });\n        }\n\n        return this._castPlayer.loadMedia(options, command);\n    }\n\n    seek(position) {\n        position = parseInt(position);\n\n        position = position / 10000000;\n\n        this._castPlayer.sendMessage({\n            options: {\n                position: position\n            },\n            command: 'Seek'\n        });\n    }\n\n    setAudioStreamIndex(index) {\n        this._castPlayer.sendMessage({\n            options: {\n                index: index\n            },\n            command: 'SetAudioStreamIndex'\n        });\n    }\n\n    setSubtitleStreamIndex(index) {\n        this._castPlayer.sendMessage({\n            options: {\n                index: index\n            },\n            command: 'SetSubtitleStreamIndex'\n        });\n    }\n\n    setMaxStreamingBitrate(options) {\n        this._castPlayer.sendMessage({\n            options: options,\n            command: 'SetMaxStreamingBitrate'\n        });\n    }\n\n    isFullscreen() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.IsFullscreen;\n    }\n\n    nextTrack() {\n        this._castPlayer.sendMessage({\n            options: {},\n            command: 'NextTrack'\n        });\n    }\n\n    previousTrack() {\n        this._castPlayer.sendMessage({\n            options: {},\n            command: 'PreviousTrack'\n        });\n    }\n\n    volumeDown() {\n        let vol = this._castPlayer.session.receiver.volume.level;\n        if (vol == null) {\n            vol = 0.5;\n        }\n        vol -= 0.05;\n        vol = Math.max(vol, 0);\n\n        this._castPlayer.session.setReceiverVolumeLevel(vol);\n    }\n\n    endSession() {\n        const instance = this;\n\n        this.stop().then(function () {\n            setTimeout(function () {\n                instance._castPlayer.stopApp();\n            }, 1000);\n        });\n    }\n\n    volumeUp() {\n        let vol = this._castPlayer.session.receiver.volume.level;\n        if (vol == null) {\n            vol = 0.5;\n        }\n        vol += 0.05;\n        vol = Math.min(vol, 1);\n\n        this._castPlayer.session.setReceiverVolumeLevel(vol);\n    }\n\n    setVolume(vol) {\n        vol = Math.min(vol, 100);\n        vol = Math.max(vol, 0);\n        vol = vol / 100;\n\n        this._castPlayer.session.setReceiverVolumeLevel(vol);\n    }\n\n    unpause() {\n        this._castPlayer.sendMessage({\n            options: {},\n            command: 'Unpause'\n        });\n    }\n\n    playPause() {\n        this._castPlayer.sendMessage({\n            options: {},\n            command: 'PlayPause'\n        });\n    }\n\n    pause() {\n        this._castPlayer.sendMessage({\n            options: {},\n            command: 'Pause'\n        });\n    }\n\n    stop() {\n        return this._castPlayer.sendMessage({\n            options: {},\n            command: 'Stop'\n        });\n    }\n\n    displayContent(options) {\n        this._castPlayer.sendMessage({\n            options: options,\n            command: 'DisplayContent'\n        });\n    }\n\n    setMute(isMuted) {\n        const castPlayer = this._castPlayer;\n\n        if (isMuted) {\n            castPlayer.sendMessage({\n                options: {},\n                command: 'Mute'\n            });\n        } else {\n            castPlayer.sendMessage({\n                options: {},\n                command: 'Unmute'\n            });\n        }\n    }\n\n    getRepeatMode() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.RepeatMode;\n    }\n\n    getQueueShuffleMode() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.ShuffleMode;\n    }\n\n    playTrailers(item) {\n        this._castPlayer.sendMessage({\n            options: {\n                ItemId: item.Id,\n                ServerId: item.ServerId\n            },\n            command: 'PlayTrailers'\n        });\n    }\n\n    setRepeatMode(mode) {\n        this._castPlayer.sendMessage({\n            options: {\n                RepeatMode: mode\n            },\n            command: 'SetRepeatMode'\n        });\n    }\n\n    setQueueShuffleMode(value) {\n        this._castPlayer.sendMessage({\n            options: {\n                ShuffleMode: value\n            },\n            command: 'SetShuffleQueue'\n        });\n    }\n\n    toggleMute() {\n        this._castPlayer.sendMessage({\n            options: {},\n            command: 'ToggleMute'\n        });\n    }\n\n    audioTracks() {\n        let state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        const streams = state.MediaStreams || [];\n        return streams.filter(function (s) {\n            return s.Type === 'Audio';\n        });\n    }\n\n    getAudioStreamIndex() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.AudioStreamIndex;\n    }\n\n    subtitleTracks() {\n        let state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        const streams = state.MediaStreams || [];\n        return streams.filter(function (s) {\n            return s.Type === 'Subtitle';\n        });\n    }\n\n    getSubtitleStreamIndex() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.SubtitleStreamIndex;\n    }\n\n    getMaxStreamingBitrate() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.MaxStreamingBitrate;\n    }\n\n    getVolume() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n\n        return state.VolumeLevel == null ? 100 : state.VolumeLevel;\n    }\n\n    isPlaying(mediaType) {\n        const state = this.lastPlayerData || {};\n        return state.NowPlayingItem != null && (state.NowPlayingItem.MediaType === mediaType || !mediaType);\n    }\n\n    isPlayingVideo() {\n        let state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        return state.MediaType === 'Video';\n    }\n\n    isPlayingAudio() {\n        let state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        return state.MediaType === 'Audio';\n    }\n\n    currentTime(val) {\n        if (val != null) {\n            return this.seek(val);\n        }\n\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.PositionTicks;\n    }\n\n    duration() {\n        let state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        return state.RunTimeTicks;\n    }\n\n    getBufferedRanges() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.BufferedRanges || [];\n    }\n\n    paused() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n\n        return state.IsPaused;\n    }\n\n    isMuted() {\n        let state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n\n        return state.IsMuted;\n    }\n\n    shuffle(item) {\n        const apiClient = connectionManager.getApiClient(item.ServerId);\n        const userId = apiClient.getCurrentUserId();\n\n        const instance = this;\n\n        apiClient.getItem(userId, item.Id).then(function (item) {\n            instance.playWithCommand({\n                items: [item]\n            }, 'Shuffle');\n        });\n    }\n\n    instantMix(item) {\n        const apiClient = connectionManager.getApiClient(item.ServerId);\n        const userId = apiClient.getCurrentUserId();\n\n        const instance = this;\n\n        apiClient.getItem(userId, item.Id).then(function (item) {\n            instance.playWithCommand({\n                items: [item]\n            }, 'InstantMix');\n        });\n    }\n\n    canPlayMediaType(mediaType) {\n        mediaType = (mediaType || '').toLowerCase();\n        return mediaType === 'audio' || mediaType === 'video';\n    }\n\n    canQueueMediaType(mediaType) {\n        return this.canPlayMediaType(mediaType);\n    }\n\n    queue(options) {\n        this.playWithCommand(options, 'PlayLast');\n    }\n\n    queueNext(options) {\n        this.playWithCommand(options, 'PlayNext');\n    }\n\n    play(options) {\n        if (options.items) {\n            return this.playWithCommand(options, 'PlayNow');\n        } else {\n            if (!options.serverId) {\n                throw new Error('serverId required!');\n            }\n\n            const instance = this;\n            const apiClient = connectionManager.getApiClient(options.serverId);\n\n            return getItemsForPlayback(apiClient, {\n                Ids: options.ids.join(',')\n            }).then(function (result) {\n                options.items = result.Items;\n                return instance.playWithCommand(options, 'PlayNow');\n            });\n        }\n    }\n\n    toggleFullscreen() {\n        // not supported\n    }\n\n    beginPlayerUpdates() {\n        // Setup polling here\n    }\n\n    endPlayerUpdates() {\n        // Stop polling here\n    }\n\n    getPlaylist() {\n        return Promise.resolve([]);\n    }\n\n    getCurrentPlaylistItemId() {\n    }\n\n    setCurrentPlaylistItem(playlistItemId) {\n        return Promise.resolve();\n    }\n\n    removeFromPlaylist(playlistItemIds) {\n        return Promise.resolve();\n    }\n\n    getPlayerState() {\n        return this.getPlayerStateInternal() || {};\n    }\n}\n\nexport default ChromecastPlayer;\n"]}