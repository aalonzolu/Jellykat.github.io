{"version":3,"sources":["components/refreshdialog/refreshdialog.js"],"names":["define","_require","_exports","_dom","_dialogHelper","_loading","_layoutManager","_connectionManager","_globalize","_embyInput","_embyCheckbox","_paperIconButtonLight","_embySelect","_materialIcons","_formdialog","_embyButton","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","call","desc","set","centerFocus","elem","horiz","on","Promise","_resolve","_reject","imported","then","_ref","scrollHelper","fn","onSubmit","e","loading","show","dlg","dom","parentWithClass","options","this","apiClient","connectionManager","getApiClient","serverId","replaceAllMetadata","querySelector","value","mode","replaceAllImages","checked","itemIds","forEach","itemId","refreshItem","Recursive","ImageRefreshMode","MetadataRefreshMode","ReplaceAllImages","ReplaceAllMetadata","dialogHelper","close","_ref2","toast","globalize","translate","hide","preventDefault","_default","RefreshDialog","_classCallCheck","instance","Constructor","TypeError","_createClass","protoProps","staticProps","dialogOptions","removeOnClose","scrollY","layoutManager","tv","size","createDialog","classList","add","html","getEditorHtml","innerHTML","addEventListener","bind","remove","dispatchEvent","CustomEvent","resolve","reject","open"],"mappings":"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","file":"refreshdialog.js","sourcesContent":["import dom from 'dom';\nimport dialogHelper from 'dialogHelper';\nimport loading from 'loading';\nimport layoutManager from 'layoutManager';\nimport connectionManager from 'connectionManager';\nimport globalize from 'globalize';\nimport 'emby-input';\nimport 'emby-checkbox';\nimport 'paper-icon-button-light';\nimport 'emby-select';\nimport 'material-icons';\nimport 'css!./../formdialog';\nimport 'emby-button';\n\n/*eslint prefer-const: \"error\"*/\n\nfunction getEditorHtml() {\n    let html = '';\n\n    html += '<div class=\"formDialogContent smoothScrollY\" style=\"padding-top:2em;\">';\n    html += '<div class=\"dialogContentInner dialog-content-centered\">';\n    html += '<form style=\"margin:auto;\">';\n\n    html += '<div class=\"fldSelectPlaylist selectContainer\">';\n    html += '<select is=\"emby-select\" id=\"selectMetadataRefreshMode\" label=\"' + globalize.translate('LabelRefreshMode') + '\">';\n    html += '<option value=\"scan\">' + globalize.translate('ScanForNewAndUpdatedFiles') + '</option>';\n    html += '<option value=\"missing\">' + globalize.translate('SearchForMissingMetadata') + '</option>';\n    html += '<option value=\"all\" selected>' + globalize.translate('ReplaceAllMetadata') + '</option>';\n    html += '</select>';\n    html += '</div>';\n\n    html += '<label class=\"checkboxContainer hide fldReplaceExistingImages\">';\n    html += '<input type=\"checkbox\" is=\"emby-checkbox\" class=\"chkReplaceImages\" />';\n    html += '<span>' + globalize.translate('ReplaceExistingImages') + '</span>';\n    html += '</label>';\n\n    html += '<div class=\"fieldDescription\">';\n    html += globalize.translate('RefreshDialogHelp');\n    html += '</div>';\n\n    html += '<input type=\"hidden\" class=\"fldSelectedItemIds\" />';\n\n    html += '<br />';\n    html += '<div class=\"formDialogFooter\">';\n    html += '<button is=\"emby-button\" type=\"submit\" class=\"raised btnSubmit block formDialogFooterItem button-submit\">' + globalize.translate('Refresh') + '</button>';\n    html += '</div>';\n\n    html += '</form>';\n    html += '</div>';\n    html += '</div>';\n\n    return html;\n}\n\nfunction centerFocus(elem, horiz, on) {\n    import('scrollHelper').then(({default: scrollHelper}) => {\n        const fn = on ? 'on' : 'off';\n        scrollHelper.centerFocus[fn](elem, horiz);\n    });\n}\n\nfunction onSubmit(e) {\n    loading.show();\n\n    const instance = this;\n    const dlg = dom.parentWithClass(e.target, 'dialog');\n    const options = instance.options;\n\n    const apiClient = connectionManager.getApiClient(options.serverId);\n\n    const replaceAllMetadata = dlg.querySelector('#selectMetadataRefreshMode').value === 'all';\n\n    const mode = dlg.querySelector('#selectMetadataRefreshMode').value === 'scan' ? 'Default' : 'FullRefresh';\n    const replaceAllImages = mode === 'FullRefresh' && dlg.querySelector('.chkReplaceImages').checked;\n\n    options.itemIds.forEach(function (itemId) {\n        apiClient.refreshItem(itemId, {\n\n            Recursive: true,\n            ImageRefreshMode: mode,\n            MetadataRefreshMode: mode,\n            ReplaceAllImages: replaceAllImages,\n            ReplaceAllMetadata: replaceAllMetadata\n        });\n    });\n\n    dialogHelper.close(dlg);\n\n    import('toast').then(({default: toast}) => {\n        toast(globalize.translate('RefreshQueued'));\n    });\n\n    loading.hide();\n\n    e.preventDefault();\n    return false;\n}\n\nclass RefreshDialog {\n    constructor(options) {\n        this.options = options;\n    }\n\n    show() {\n        const dialogOptions = {\n            removeOnClose: true,\n            scrollY: false\n        };\n\n        if (layoutManager.tv) {\n            dialogOptions.size = 'fullscreen';\n        } else {\n            dialogOptions.size = 'small';\n        }\n\n        const dlg = dialogHelper.createDialog(dialogOptions);\n\n        dlg.classList.add('formDialog');\n\n        let html = '';\n        const title = globalize.translate('RefreshMetadata');\n\n        html += '<div class=\"formDialogHeader\">';\n        html += '<button is=\"paper-icon-button-light\" class=\"btnCancel autoSize\" tabindex=\"-1\"><span class=\"material-icons arrow_back\"></span></button>';\n        html += '<h3 class=\"formDialogHeaderTitle\">';\n        html += title;\n        html += '</h3>';\n\n        html += '</div>';\n\n        html += getEditorHtml();\n\n        dlg.innerHTML = html;\n\n        dlg.querySelector('form').addEventListener('submit', onSubmit.bind(this));\n\n        dlg.querySelector('#selectMetadataRefreshMode').addEventListener('change', function () {\n            if (this.value === 'scan') {\n                dlg.querySelector('.fldReplaceExistingImages').classList.add('hide');\n            } else {\n                dlg.querySelector('.fldReplaceExistingImages').classList.remove('hide');\n            }\n        });\n\n        if (this.options.mode) {\n            dlg.querySelector('#selectMetadataRefreshMode').value = this.options.mode;\n        }\n\n        dlg.querySelector('#selectMetadataRefreshMode').dispatchEvent(new CustomEvent('change'));\n\n        dlg.querySelector('.btnCancel').addEventListener('click', function () {\n            dialogHelper.close(dlg);\n        });\n\n        if (layoutManager.tv) {\n            centerFocus(dlg.querySelector('.formDialogContent'), false, true);\n        }\n\n        return new Promise(function (resolve, reject) {\n            if (layoutManager.tv) {\n                centerFocus(dlg.querySelector('.formDialogContent'), false, false);\n            }\n\n            dlg.addEventListener('close', resolve);\n            dialogHelper.open(dlg);\n        });\n    }\n}\n\nexport default RefreshDialog;\n"]}