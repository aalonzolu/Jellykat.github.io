{"version":3,"sources":["components/playback/playqueuemanager.js"],"names":["define","_exports","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","from","test","length","i","F","s","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","arr","len","arr2","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","default","currentId","addUniquePlaylistItemId","item","PlaylistItemId","findPlaylistIndex","playlistItemId","list","_default","PlayQueueManager","_classCallCheck","instance","Constructor","this","_sortedPlaylist","_playlist","_repeatMode","_shuffleMode","_createClass","protoProps","staticProps","getPlaylist","setPlaylist","items","_currentPlaylistItemId","queue","push","shufflePlaylist","_step","_iterator","currentPlaylistItem","splice","getCurrentPlaylistIndex","j","Math","floor","random","temp","unshift","sortShuffledPlaylist","_step2","_iterator2","clearPlaylist","clearCurrentItem","arguments","undefined","queueNext","currentIndex","arrayInsertAt","destArray","pos","arrayToInsert","args","concat","apply","getCurrentPlaylistItemId","getCurrentItem","index","setPlaylistState","playlistIndex","setPlaylistIndex","removeFromPlaylist","playlistItemIds","result","currentPlaylistItemId","isCurrentIndex","indexOf","filter","includes","movePlaylistItem","newIndex","oldIndex","playlist","Error","moveInArray","array","to","reset","setRepeatMode","getRepeatMode","setShuffleMode","toggleShuffleMode","getShuffleMode","getNextItemInfo","playlistLength"],"mappings":"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","file":"playqueuemanager.js","sourcesContent":["/*eslint prefer-const: \"error\"*/\n\nlet currentId = 0;\nfunction addUniquePlaylistItemId(item) {\n    if (!item.PlaylistItemId) {\n        item.PlaylistItemId = 'playlistItem' + currentId;\n        currentId++;\n    }\n}\n\nfunction findPlaylistIndex(playlistItemId, list) {\n    for (let i = 0, length = list.length; i < length; i++) {\n        if (list[i].PlaylistItemId === playlistItemId) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nclass PlayQueueManager {\n    constructor() {\n        this._sortedPlaylist = [];\n        this._playlist = [];\n        this._repeatMode = 'RepeatNone';\n        this._shuffleMode = 'Sorted';\n    }\n\n    getPlaylist() {\n        return this._playlist.slice(0);\n    }\n\n    setPlaylist(items) {\n        items = items.slice(0);\n\n        for (let i = 0, length = items.length; i < length; i++) {\n            addUniquePlaylistItemId(items[i]);\n        }\n\n        this._currentPlaylistItemId = null;\n        this._playlist = items;\n        this._repeatMode = 'RepeatNone';\n    }\n\n    queue(items) {\n        for (let i = 0, length = items.length; i < length; i++) {\n            addUniquePlaylistItemId(items[i]);\n\n            this._playlist.push(items[i]);\n        }\n    }\n\n    shufflePlaylist() {\n        this._sortedPlaylist = [];\n        for (const item of this._playlist) {\n            this._sortedPlaylist.push(item);\n        }\n        const currentPlaylistItem = this._playlist.splice(this.getCurrentPlaylistIndex(), 1)[0];\n\n        for (let i = this._playlist.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * i);\n            const temp = this._playlist[i];\n            this._playlist[i] = this._playlist[j];\n            this._playlist[j] = temp;\n        }\n        this._playlist.unshift(currentPlaylistItem);\n        this._shuffleMode = 'Shuffle';\n    }\n\n    sortShuffledPlaylist() {\n        this._playlist = [];\n        for (const item of this._sortedPlaylist) {\n            this._playlist.push(item);\n        }\n        this._sortedPlaylist = [];\n        this._shuffleMode = 'Sorted';\n    }\n\n    clearPlaylist(clearCurrentItem = false) {\n        const currentPlaylistItem = this._playlist.splice(this.getCurrentPlaylistIndex(), 1)[0];\n        this._playlist = [];\n        if (!clearCurrentItem) {\n            this._playlist.push(currentPlaylistItem);\n        }\n    }\n\n    queueNext(items) {\n        for (let i = 0, length = items.length; i < length; i++) {\n            addUniquePlaylistItemId(items[i]);\n        }\n\n        let currentIndex = this.getCurrentPlaylistIndex();\n\n        if (currentIndex === -1) {\n            currentIndex = this._playlist.length;\n        } else {\n            currentIndex++;\n        }\n\n        arrayInsertAt(this._playlist, currentIndex, items);\n    }\n\n    getCurrentPlaylistIndex() {\n        return findPlaylistIndex(this.getCurrentPlaylistItemId(), this._playlist);\n    }\n\n    getCurrentItem() {\n        const index = findPlaylistIndex(this.getCurrentPlaylistItemId(), this._playlist);\n\n        return index === -1 ? null : this._playlist[index];\n    }\n\n    getCurrentPlaylistItemId() {\n        return this._currentPlaylistItemId;\n    }\n\n    setPlaylistState(playlistItemId, playlistIndex) {\n        this._currentPlaylistItemId = playlistItemId;\n    }\n\n    setPlaylistIndex(playlistIndex) {\n        if (playlistIndex < 0) {\n            this.setPlaylistState(null);\n        } else {\n            this.setPlaylistState(this._playlist[playlistIndex].PlaylistItemId);\n        }\n    }\n\n    removeFromPlaylist(playlistItemIds) {\n        if (this._playlist.length <= playlistItemIds.length) {\n            return {\n                result: 'empty'\n            };\n        }\n\n        const currentPlaylistItemId = this.getCurrentPlaylistItemId();\n        const isCurrentIndex = playlistItemIds.indexOf(currentPlaylistItemId) !== -1;\n\n        this._sortedPlaylist = this._sortedPlaylist.filter(function (item) {\n            return !playlistItemIds.includes(item.PlaylistItemId);\n        });\n\n        this._playlist = this._playlist.filter(function (item) {\n            return !playlistItemIds.includes(item.PlaylistItemId);\n        });\n\n        return {\n            result: 'removed',\n            isCurrentIndex: isCurrentIndex\n        };\n    }\n\n    movePlaylistItem(playlistItemId, newIndex) {\n        const playlist = this.getPlaylist();\n\n        let oldIndex;\n        for (let i = 0, length = playlist.length; i < length; i++) {\n            if (playlist[i].PlaylistItemId === playlistItemId) {\n                oldIndex = i;\n                break;\n            }\n        }\n\n        if (oldIndex === -1 || oldIndex === newIndex) {\n            return {\n                result: 'noop'\n            };\n        }\n\n        if (newIndex >= playlist.length) {\n            throw new Error('newIndex out of bounds');\n        }\n\n        moveInArray(playlist, oldIndex, newIndex);\n\n        this._playlist = playlist;\n\n        return {\n            result: 'moved',\n            playlistItemId: playlistItemId,\n            newIndex: newIndex\n        };\n    }\n\n    reset() {\n        this._sortedPlaylist = [];\n        this._playlist = [];\n        this._currentPlaylistItemId = null;\n        this._repeatMode = 'RepeatNone';\n        this._shuffleMode = 'Sorted';\n    }\n\n    setRepeatMode(value) {\n        const repeatModes = ['RepeatOne', 'RepeatAll', 'RepeatNone'];\n        if (repeatModes.includes(value)) {\n            this._repeatMode = value;\n        } else {\n            throw new TypeError('invalid value provided for setRepeatMode');\n        }\n    }\n\n    getRepeatMode() {\n        return this._repeatMode;\n    }\n\n    setShuffleMode(value) {\n        switch (value) {\n            case 'Shuffle':\n                this.shufflePlaylist();\n                break;\n            case 'Sorted':\n                this.sortShuffledPlaylist();\n                break;\n            default:\n                throw new TypeError('invalid value provided to setShuffleMode');\n        }\n    }\n\n    toggleShuffleMode() {\n        switch (this._shuffleMode) {\n            case 'Shuffle':\n                this.setShuffleMode('Sorted');\n                break;\n            case 'Sorted':\n                this.setShuffleMode('Shuffle');\n                break;\n            default:\n                throw new TypeError('current value for shufflequeue is invalid');\n        }\n    }\n\n    getShuffleMode() {\n        return this._shuffleMode;\n    }\n\n    getNextItemInfo() {\n        let newIndex;\n        const playlist = this.getPlaylist();\n        const playlistLength = playlist.length;\n\n        switch (this.getRepeatMode()) {\n            case 'RepeatOne':\n                newIndex = this.getCurrentPlaylistIndex();\n                break;\n            case 'RepeatAll':\n                newIndex = this.getCurrentPlaylistIndex() + 1;\n                if (newIndex >= playlistLength) {\n                    newIndex = 0;\n                }\n                break;\n            default:\n                newIndex = this.getCurrentPlaylistIndex() + 1;\n                break;\n        }\n\n        if (newIndex < 0 || newIndex >= playlistLength) {\n            return null;\n        }\n\n        const item = playlist[newIndex];\n\n        if (!item) {\n            return null;\n        }\n\n        return {\n            item: item,\n            index: newIndex\n        };\n    }\n}\n\nfunction arrayInsertAt(destArray, pos, arrayToInsert) {\n    let args = [];\n    args.push(pos); // where to insert\n    args.push(0); // nothing to remove\n    args = args.concat(arrayToInsert); // add on array to insert\n    destArray.splice.apply(destArray, args); // splice it in\n}\n\nfunction moveInArray(array, from, to) {\n    array.splice(to, 0, array.splice(from, 1)[0]);\n}\n\nexport default PlayQueueManager;\n"]}