{"version":3,"sources":["components/prompt/prompt.js"],"names":["define","_require","_exports","_browser","_dialogHelper","_layoutManager","_scrollHelper","_globalize","_dom","_materialIcons","_embyButton","_paperIconButtonLight","_embyInput","_formDialogStyle","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","Object","defineProperty","value","_default","browser","tv","xboxOne","window","confirm","options","label","text","replaceAll","str","find","replace","split","join","result","prompt","Promise","resolve","reject","_resolve","_reject","imported","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","then","_ref","template","title","showDialog","dialogOptions","removeOnClose","scrollY","layoutManager","size","submitValue","dlg","dialogHelper","createDialog","classList","add","innerHTML","globalize","translateHtml","scrollHelper","centerFocus","on","querySelector","addEventListener","close","description","setInputProperties","txtInput","setAttribute","e","preventDefault","stopPropagation","setTimeout","confirmText","translate","style","minWidth","concat","Math","min","dom","getWindowSize","innerWidth","open","off"],"mappings":"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","file":"prompt.js","sourcesContent":["import browser from 'browser';\nimport dialogHelper from 'dialogHelper';\nimport layoutManager from 'layoutManager';\nimport scrollHelper from 'scrollHelper';\nimport globalize from 'globalize';\nimport dom from 'dom';\nimport 'material-icons';\nimport 'emby-button';\nimport 'paper-icon-button-light';\nimport 'emby-input';\nimport 'formDialogStyle';\n\n/* eslint-disable indent */\nexport default (() => {\n    function replaceAll(str, find, replace) {\n        return str.split(find).join(replace);\n    }\n\n    function setInputProperties(dlg, options) {\n        const txtInput = dlg.querySelector('#txtInput');\n\n        if (txtInput.label) {\n            txtInput.label(options.label || '');\n        } else {\n            txtInput.setAttribute('label', options.label || '');\n        }\n        txtInput.value = options.value || '';\n    }\n\n    function showDialog(options, template) {\n        const dialogOptions = {\n            removeOnClose: true,\n            scrollY: false\n        };\n\n        if (layoutManager.tv) {\n            dialogOptions.size = 'fullscreen';\n        }\n\n        const dlg = dialogHelper.createDialog(dialogOptions);\n\n        dlg.classList.add('formDialog');\n\n        dlg.innerHTML = globalize.translateHtml(template, 'core');\n\n        if (layoutManager.tv) {\n            scrollHelper.centerFocus.on(dlg.querySelector('.formDialogContent'), false);\n        } else {\n            dlg.querySelector('.dialogContentInner').classList.add('dialogContentInner-mini');\n            dlg.classList.add('dialog-fullscreen-lowres');\n        }\n\n        dlg.querySelector('.btnCancel').addEventListener('click', () => {\n            dialogHelper.close(dlg);\n        });\n\n        dlg.querySelector('.formDialogHeaderTitle').innerHTML = options.title || '';\n\n        if (options.description) {\n            dlg.querySelector('.fieldDescription').innerHTML = options.description;\n        } else {\n            dlg.querySelector('.fieldDescription').classList.add('hide');\n        }\n\n        setInputProperties(dlg, options);\n\n        let submitValue;\n\n        dlg.querySelector('form').addEventListener('submit', e => {\n            submitValue = dlg.querySelector('#txtInput').value;\n            e.preventDefault();\n            e.stopPropagation();\n\n            // Important, don't close the dialog until after the form has completed submitting, or it will cause an error in Chrome\n            setTimeout(() => {\n                dialogHelper.close(dlg);\n            }, 300);\n\n            return false;\n        });\n\n        dlg.querySelector('.submitText').innerHTML = options.confirmText || globalize.translate('ButtonOk');\n\n        dlg.style.minWidth = `${Math.min(400, dom.getWindowSize().innerWidth - 50)}px`;\n\n        return dialogHelper.open(dlg).then(() => {\n            if (layoutManager.tv) {\n                scrollHelper.centerFocus.off(dlg.querySelector('.formDialogContent'), false);\n            }\n\n            if (submitValue) {\n                return submitValue;\n            } else {\n                return Promise.reject();\n            }\n        });\n    }\n\n    if ((browser.tv || browser.xboxOne) && window.confirm) {\n        return options => {\n            if (typeof options === 'string') {\n                options = {\n                    label: '',\n                    text: options\n                };\n            }\n\n            const label = replaceAll(options.label || '', '<br/>', '\\n');\n            const result = prompt(label, options.text || '');\n\n            if (result) {\n                return Promise.resolve(result);\n            } else {\n                return Promise.reject(result);\n            }\n        };\n    } else {\n        return options => {\n            return new Promise((resolve, reject) => {\n                import('text!./prompt.template.html').then(({default: template}) => {\n                    if (typeof options === 'string') {\n                        options = {\n                            title: '',\n                            text: options\n                        };\n                    }\n                    showDialog(options, template).then(resolve, reject);\n                });\n            });\n        };\n    }\n})();\n/* eslint-enable indent */\n"]}