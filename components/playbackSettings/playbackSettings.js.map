{"version":3,"sources":["components/playbackSettings/playbackSettings.js"],"names":["define","_require","_exports","_browser","_appSettings","_apphost","_focusManager","_qualityoptions","_globalize","_loading","_connectionManager","_events","_embySelect","_embyCheckbox","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","call","desc","set","fillSkipLengths","select","innerHTML","map","option","name","globalize","translate","value","o","concat","join","setMaxBitrateIntoField","isInNetwork","mediatype","options","qualityoptions","getAudioQualityOptions","currentMaxBitrate","appSettings","maxStreamingBitrate","isAutomaticBitrateEnabled","enableAutomaticBitrateDetection","enableAuto","getVideoQualityOptions","bitrate","setMaxBitrateFromField","loadForm","context","user","userSettings","apiClient","loggedInUserId","getCurrentUserId","userId","Id","showHideQualityFields","Policy","EnableVideoPlaybackTranscoding","querySelector","classList","remove","add","appHost","supports","EnableAudioPlaybackTranscoding","getEndpointInfo","then","endpointInfo","IsInNetwork","getCultures","allCultures","populateLanguages","languages","html","culture","ThreeLetterISOLanguageName","DisplayName","Configuration","AudioLanguagePreference","checked","EnableNextEpisodeAutoPlay","getNamedConfiguration","cinemaConfig","EnableIntrosForMovies","EnableIntrosForEpisodes","browser","tizen","web0s","PlayDefaultAudioTrack","enableCinemaMode","enableNextVideoInfoOverlay","enableSystemExternalPlayers","fillChromecastQuality","maxChromecastBitrate","chromecastVersion","selectSkipForwardLength","skipForwardLength","selectSkipBackLength","skipBackLength","showOrHideEpisodesField","loading","hide","save","instance","enableSaveConfirmation","show","getUser","saveUser","userSettingsInstance","updateUserConfiguration","Promise","_resolve","_reject","imported","_ref","toast","events","trigger","onSubmit","e","self","this","connectionManager","getApiClient","serverId","setUserInfo","element","preventDefault","_default","PlaybackSettings","_classCallCheck","Constructor","TypeError","embed","_ref2","template","translateHtml","addEventListener","bind","enableSaveButton","loadData","autoFocus","focusManager","_createClass","protoProps","staticProps","dataLoaded","submit","destroy"],"mappings":"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","file":"playbackSettings.js","sourcesContent":["import browser from 'browser';\nimport appSettings from 'appSettings';\nimport appHost from 'apphost';\nimport focusManager from 'focusManager';\nimport qualityoptions from 'qualityoptions';\nimport globalize from 'globalize';\nimport loading from 'loading';\nimport connectionManager from 'connectionManager';\nimport events from 'events';\nimport 'emby-select';\nimport 'emby-checkbox';\n\n/* eslint-disable indent */\n\n    function fillSkipLengths(select) {\n        const options = [5, 10, 15, 20, 25, 30];\n\n        select.innerHTML = options.map(option => {\n            return {\n                name: globalize.translate('ValueSeconds', option),\n                value: option * 1000\n            };\n        }).map(o => {\n            return `<option value=\"${o.value}\">${o.name}</option>`;\n        }).join('');\n    }\n\n    function populateLanguages(select, languages) {\n        let html = '';\n\n        html += `<option value=''>${globalize.translate('AnyLanguage')}</option>`;\n\n        for (let i = 0, length = languages.length; i < length; i++) {\n            const culture = languages[i];\n\n            html += `<option value='${culture.ThreeLetterISOLanguageName}'>${culture.DisplayName}</option>`;\n        }\n\n        select.innerHTML = html;\n    }\n\n    function setMaxBitrateIntoField(select, isInNetwork, mediatype) {\n        const options = mediatype === 'Audio' ? qualityoptions.getAudioQualityOptions({\n\n            currentMaxBitrate: appSettings.maxStreamingBitrate(isInNetwork, mediatype),\n            isAutomaticBitrateEnabled: appSettings.enableAutomaticBitrateDetection(isInNetwork, mediatype),\n            enableAuto: true\n\n        }) : qualityoptions.getVideoQualityOptions({\n\n            currentMaxBitrate: appSettings.maxStreamingBitrate(isInNetwork, mediatype),\n            isAutomaticBitrateEnabled: appSettings.enableAutomaticBitrateDetection(isInNetwork, mediatype),\n            enableAuto: true\n\n        });\n\n        select.innerHTML = options.map(i => {\n            // render empty string instead of 0 for the auto option\n            return `<option value=\"${i.bitrate || ''}\">${i.name}</option>`;\n        }).join('');\n\n        if (appSettings.enableAutomaticBitrateDetection(isInNetwork, mediatype)) {\n            select.value = '';\n        } else {\n            select.value = appSettings.maxStreamingBitrate(isInNetwork, mediatype);\n        }\n    }\n\n    function fillChromecastQuality(select) {\n        const options = qualityoptions.getVideoQualityOptions({\n\n            currentMaxBitrate: appSettings.maxChromecastBitrate(),\n            isAutomaticBitrateEnabled: !appSettings.maxChromecastBitrate(),\n            enableAuto: true\n        });\n\n        select.innerHTML = options.map(i => {\n            // render empty string instead of 0 for the auto option\n            return `<option value=\"${i.bitrate || ''}\">${i.name}</option>`;\n        }).join('');\n\n        select.value = appSettings.maxChromecastBitrate() || '';\n    }\n\n    function setMaxBitrateFromField(select, isInNetwork, mediatype) {\n        if (select.value) {\n            appSettings.maxStreamingBitrate(isInNetwork, mediatype, select.value);\n            appSettings.enableAutomaticBitrateDetection(isInNetwork, mediatype, false);\n        } else {\n            appSettings.enableAutomaticBitrateDetection(isInNetwork, mediatype, true);\n        }\n    }\n\n    function showHideQualityFields(context, user, apiClient) {\n        if (user.Policy.EnableVideoPlaybackTranscoding) {\n            context.querySelector('.videoQualitySection').classList.remove('hide');\n        } else {\n            context.querySelector('.videoQualitySection').classList.add('hide');\n        }\n\n        if (appHost.supports('multiserver')) {\n            context.querySelector('.fldVideoInNetworkQuality').classList.remove('hide');\n            context.querySelector('.fldVideoInternetQuality').classList.remove('hide');\n\n            if (user.Policy.EnableAudioPlaybackTranscoding) {\n                context.querySelector('.musicQualitySection').classList.remove('hide');\n            } else {\n                context.querySelector('.musicQualitySection').classList.add('hide');\n            }\n\n            return;\n        }\n\n        apiClient.getEndpointInfo().then(endpointInfo => {\n            if (endpointInfo.IsInNetwork) {\n                context.querySelector('.fldVideoInNetworkQuality').classList.remove('hide');\n\n                context.querySelector('.fldVideoInternetQuality').classList.add('hide');\n                context.querySelector('.musicQualitySection').classList.add('hide');\n            } else {\n                context.querySelector('.fldVideoInNetworkQuality').classList.add('hide');\n\n                context.querySelector('.fldVideoInternetQuality').classList.remove('hide');\n\n                if (user.Policy.EnableAudioPlaybackTranscoding) {\n                    context.querySelector('.musicQualitySection').classList.remove('hide');\n                } else {\n                    context.querySelector('.musicQualitySection').classList.add('hide');\n                }\n            }\n        });\n    }\n\n    function showOrHideEpisodesField(context) {\n        if (browser.tizen || browser.web0s) {\n            context.querySelector('.fldEpisodeAutoPlay').classList.add('hide');\n            return;\n        }\n\n        context.querySelector('.fldEpisodeAutoPlay').classList.remove('hide');\n    }\n\n    function loadForm(context, user, userSettings, apiClient) {\n        const loggedInUserId = apiClient.getCurrentUserId();\n        const userId = user.Id;\n\n        showHideQualityFields(context, user, apiClient);\n\n        apiClient.getCultures().then(allCultures => {\n            populateLanguages(context.querySelector('#selectAudioLanguage'), allCultures);\n\n            context.querySelector('#selectAudioLanguage', context).value = user.Configuration.AudioLanguagePreference || '';\n            context.querySelector('.chkEpisodeAutoPlay').checked = user.Configuration.EnableNextEpisodeAutoPlay || false;\n        });\n\n        // hide cinema mode options if disabled at server level\n        apiClient.getNamedConfiguration('cinemamode').then(cinemaConfig => {\n            if (cinemaConfig.EnableIntrosForMovies || cinemaConfig.EnableIntrosForEpisodes) {\n                context.querySelector('.cinemaModeOptions').classList.remove('hide');\n            } else {\n                context.querySelector('.cinemaModeOptions').classList.add('hide');\n            }\n        });\n\n        if (appHost.supports('externalplayerintent') && userId === loggedInUserId) {\n            context.querySelector('.fldExternalPlayer').classList.remove('hide');\n        } else {\n            context.querySelector('.fldExternalPlayer').classList.add('hide');\n        }\n\n        if (userId === loggedInUserId && (user.Policy.EnableVideoPlaybackTranscoding || user.Policy.EnableAudioPlaybackTranscoding)) {\n            context.querySelector('.qualitySections').classList.remove('hide');\n\n            if (appHost.supports('chromecast') && user.Policy.EnableVideoPlaybackTranscoding) {\n                context.querySelector('.fldChromecastQuality').classList.remove('hide');\n            } else {\n                context.querySelector('.fldChromecastQuality').classList.add('hide');\n            }\n        } else {\n            context.querySelector('.qualitySections').classList.add('hide');\n            context.querySelector('.fldChromecastQuality').classList.add('hide');\n        }\n\n        if (browser.tizen || browser.web0s) {\n            context.querySelector('.fldEnableNextVideoOverlay').classList.add('hide');\n        } else {\n            context.querySelector('.fldEnableNextVideoOverlay').classList.remove('hide');\n        }\n\n        context.querySelector('.chkPlayDefaultAudioTrack').checked = user.Configuration.PlayDefaultAudioTrack || false;\n        context.querySelector('.chkEnableCinemaMode').checked = userSettings.enableCinemaMode();\n        context.querySelector('.chkEnableNextVideoOverlay').checked = userSettings.enableNextVideoInfoOverlay();\n        context.querySelector('.chkExternalVideoPlayer').checked = appSettings.enableSystemExternalPlayers();\n\n        setMaxBitrateIntoField(context.querySelector('.selectVideoInNetworkQuality'), true, 'Video');\n        setMaxBitrateIntoField(context.querySelector('.selectVideoInternetQuality'), false, 'Video');\n        setMaxBitrateIntoField(context.querySelector('.selectMusicInternetQuality'), false, 'Audio');\n\n        fillChromecastQuality(context.querySelector('.selectChromecastVideoQuality'));\n\n        const selectChromecastVersion = context.querySelector('.selectChromecastVersion');\n        selectChromecastVersion.value = userSettings.chromecastVersion();\n\n        const selectSkipForwardLength = context.querySelector('.selectSkipForwardLength');\n        fillSkipLengths(selectSkipForwardLength);\n        selectSkipForwardLength.value = userSettings.skipForwardLength();\n\n        const selectSkipBackLength = context.querySelector('.selectSkipBackLength');\n        fillSkipLengths(selectSkipBackLength);\n        selectSkipBackLength.value = userSettings.skipBackLength();\n\n        showOrHideEpisodesField(context);\n\n        loading.hide();\n    }\n\n    function saveUser(context, user, userSettingsInstance, apiClient) {\n        appSettings.enableSystemExternalPlayers(context.querySelector('.chkExternalVideoPlayer').checked);\n\n        appSettings.maxChromecastBitrate(context.querySelector('.selectChromecastVideoQuality').value);\n\n        setMaxBitrateFromField(context.querySelector('.selectVideoInNetworkQuality'), true, 'Video');\n        setMaxBitrateFromField(context.querySelector('.selectVideoInternetQuality'), false, 'Video');\n        setMaxBitrateFromField(context.querySelector('.selectMusicInternetQuality'), false, 'Audio');\n\n        user.Configuration.AudioLanguagePreference = context.querySelector('#selectAudioLanguage').value;\n        user.Configuration.PlayDefaultAudioTrack = context.querySelector('.chkPlayDefaultAudioTrack').checked;\n        user.Configuration.EnableNextEpisodeAutoPlay = context.querySelector('.chkEpisodeAutoPlay').checked;\n\n        userSettingsInstance.enableCinemaMode(context.querySelector('.chkEnableCinemaMode').checked);\n\n        userSettingsInstance.enableNextVideoInfoOverlay(context.querySelector('.chkEnableNextVideoOverlay').checked);\n        userSettingsInstance.chromecastVersion(context.querySelector('.selectChromecastVersion').value);\n        userSettingsInstance.skipForwardLength(context.querySelector('.selectSkipForwardLength').value);\n        userSettingsInstance.skipBackLength(context.querySelector('.selectSkipBackLength').value);\n\n        return apiClient.updateUserConfiguration(user.Id, user.Configuration);\n    }\n\n    function save(instance, context, userId, userSettings, apiClient, enableSaveConfirmation) {\n        loading.show();\n\n        apiClient.getUser(userId).then(user => {\n            saveUser(context, user, userSettings, apiClient).then(() => {\n                loading.hide();\n                if (enableSaveConfirmation) {\n                    import('toast').then(({default: toast}) => {\n                        toast(globalize.translate('SettingsSaved'));\n                    });\n                }\n\n                events.trigger(instance, 'saved');\n            }, () => {\n                loading.hide();\n            });\n        });\n    }\n\n    function onSubmit(e) {\n        const self = this;\n        const apiClient = connectionManager.getApiClient(self.options.serverId);\n        const userId = self.options.userId;\n        const userSettings = self.options.userSettings;\n\n        userSettings.setUserInfo(userId, apiClient).then(() => {\n            const enableSaveConfirmation = self.options.enableSaveConfirmation;\n            save(self, self.options.element, userId, userSettings, apiClient, enableSaveConfirmation);\n        });\n\n        // Disable default form submission\n        if (e) {\n            e.preventDefault();\n        }\n        return false;\n    }\n\n    function embed(options, self) {\n        return import('text!./playbackSettings.template.html').then(({default: template}) => {\n            options.element.innerHTML = globalize.translateHtml(template, 'core');\n\n            options.element.querySelector('form').addEventListener('submit', onSubmit.bind(self));\n\n            if (options.enableSaveButton) {\n                options.element.querySelector('.btnSave').classList.remove('hide');\n            }\n\n            self.loadData();\n\n            if (options.autoFocus) {\n                focusManager.autoFocus(options.element);\n            }\n        });\n    }\n\n    class PlaybackSettings {\n        constructor(options) {\n            this.options = options;\n            embed(options, this);\n        }\n\n        loadData() {\n            const self = this;\n            const context = self.options.element;\n\n            loading.show();\n\n            const userId = self.options.userId;\n            const apiClient = connectionManager.getApiClient(self.options.serverId);\n            const userSettings = self.options.userSettings;\n\n            apiClient.getUser(userId).then(user => {\n                userSettings.setUserInfo(userId, apiClient).then(() => {\n                    self.dataLoaded = true;\n\n                    loadForm(context, user, userSettings, apiClient);\n                });\n            });\n        }\n\n        submit() {\n            onSubmit.call(this);\n        }\n\n        destroy() {\n            this.options = null;\n        }\n    }\n\n/* eslint-enable indent */\nexport default PlaybackSettings;\n"]}