{"version":3,"sources":["components/itemMediaInfo/itemMediaInfo.js"],"names":["define","_require","_exports","_dialogHelper","_layoutManager","_globalize","_connectionManager","_loading","_embySelect","_listViewStyle","_paperIconButtonLight","_formdialog","_materialIcons","_embyButton","_flexStyles","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","setMediaInfo","user","page","item","html","MediaSources","map","version","getMediaSourceHtml","Name","concat","Container","createAttribute","globalize","translate","Formats","length","join","Path","Policy","IsAdministrator","Size","size","toFixed","i","MediaStreams","stream","Type","displayType","attributes","DisplayTitle","push","Language","Codec","toUpperCase","CodecTag","IsAVC","Profile","Level","Width","Height","AspectRatio","IsAnamorphic","IsInterlaced","AverageFrameRate","RealFrameRate","ChannelLayout","Channels","BitRate","parseInt","SampleRate","BitDepth","PixelFormat","RefFrames","NalLengthSize","IsDefault","IsForced","IsExternal","Timestamp","querySelector","innerHTML","label","value","show","itemId","serverId","loading","Promise","_resolve","_reject","imported","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","then","_ref","template","resolve","reject","loadMediaInfo","apiClient","connectionManager","getApiClient","getItem","getCurrentUserId","dialogOptions","removeOnClose","scrollY","layoutManager","tv","dlg","dialogHelper","createDialog","classList","add","translateHtml","open","addEventListener","close","getCurrentUser","hide","_default"],"mappings":"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","file":"itemMediaInfo.js","sourcesContent":["/* eslint-disable indent */\n\n/**\n * Module for display media info.\n * @module components/itemMediaInfo/itemMediaInfo\n */\n\nimport dialogHelper from 'dialogHelper';\nimport layoutManager from 'layoutManager';\nimport globalize from 'globalize';\nimport connectionManager from 'connectionManager';\nimport loading from 'loading';\nimport 'emby-select';\nimport 'listViewStyle';\nimport 'paper-icon-button-light';\nimport 'css!./../formdialog';\nimport 'material-icons';\nimport 'emby-button';\nimport 'flexStyles';\n\n    function setMediaInfo(user, page, item) {\n        let html = item.MediaSources.map(version => {\n            return getMediaSourceHtml(user, item, version);\n        }).join('<div style=\"border-top:1px solid #444;margin: 1em 0;\"></div>');\n        if (item.MediaSources.length > 1) {\n            html = `<br/>${html}`;\n        }\n        const mediaInfoContent = page.querySelector('#mediaInfoContent');\n        mediaInfoContent.innerHTML = html;\n    }\n\n    function getMediaSourceHtml(user, item, version) {\n        let html = '';\n        if (version.Name) {\n            html += `<div><h2 class=\"mediaInfoStreamType\">${version.Name}</h2></div>`;\n        }\n        if (version.Container) {\n            html += `${createAttribute(globalize.translate('MediaInfoContainer'), version.Container)}<br/>`;\n        }\n        if (version.Formats && version.Formats.length) {\n            html += `${createAttribute(globalize.translate('MediaInfoFormat'), version.Formats.join(','))}<br/>`;\n        }\n        if (version.Path && user && user.Policy.IsAdministrator) {\n            html += `${createAttribute(globalize.translate('MediaInfoPath'), version.Path)}<br/>`;\n        }\n        if (version.Size) {\n            const size = `${(version.Size / (1024 * 1024)).toFixed(0)} MB`;\n            html += `${createAttribute(globalize.translate('MediaInfoSize'), size)}<br/>`;\n        }\n        for (let i = 0, length = version.MediaStreams.length; i < length; i++) {\n            const stream = version.MediaStreams[i];\n            if (stream.Type === 'Data') {\n                continue;\n            }\n            html += '<div class=\"mediaInfoStream\">';\n            const displayType = globalize.translate(`MediaInfoStreamType${stream.Type}`);\n            html += `<h2 class=\"mediaInfoStreamType\">${displayType}</h2>`;\n            const attributes = [];\n            if (stream.DisplayTitle) {\n                attributes.push(createAttribute('Title', stream.DisplayTitle));\n            }\n            if (stream.Language && stream.Type !== 'Video') {\n                attributes.push(createAttribute(globalize.translate('MediaInfoLanguage'), stream.Language));\n            }\n            if (stream.Codec) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoCodec'), stream.Codec.toUpperCase()));\n            }\n            if (stream.CodecTag) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoCodecTag'), stream.CodecTag));\n            }\n            if (stream.IsAVC != null) {\n                attributes.push(createAttribute('AVC', (stream.IsAVC ? 'Yes' : 'No')));\n            }\n            if (stream.Profile) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoProfile'), stream.Profile));\n            }\n            if (stream.Level) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoLevel'), stream.Level));\n            }\n            if (stream.Width || stream.Height) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoResolution'), `${stream.Width}x${stream.Height}`));\n            }\n            if (stream.AspectRatio && stream.Codec !== 'mjpeg') {\n                attributes.push(createAttribute(globalize.translate('MediaInfoAspectRatio'), stream.AspectRatio));\n            }\n            if (stream.Type === 'Video') {\n                if (stream.IsAnamorphic != null) {\n                    attributes.push(createAttribute(globalize.translate('MediaInfoAnamorphic'), (stream.IsAnamorphic ? 'Yes' : 'No')));\n                }\n                attributes.push(createAttribute(globalize.translate('MediaInfoInterlaced'), (stream.IsInterlaced ? 'Yes' : 'No')));\n            }\n            if (stream.AverageFrameRate || stream.RealFrameRate) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoFramerate'), (stream.AverageFrameRate || stream.RealFrameRate)));\n            }\n            if (stream.ChannelLayout) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoLayout'), stream.ChannelLayout));\n            }\n            if (stream.Channels) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoChannels'), `${stream.Channels} ch`));\n            }\n            if (stream.BitRate && stream.Codec !== 'mjpeg') {\n                attributes.push(createAttribute(globalize.translate('MediaInfoBitrate'), `${parseInt(stream.BitRate / 1000)} kbps`));\n            }\n            if (stream.SampleRate) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoSampleRate'), `${stream.SampleRate} Hz`));\n            }\n            if (stream.BitDepth) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoBitDepth'), `${stream.BitDepth} bit`));\n            }\n            if (stream.PixelFormat) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoPixelFormat'), stream.PixelFormat));\n            }\n            if (stream.RefFrames) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoRefFrames'), stream.RefFrames));\n            }\n            if (stream.NalLengthSize) {\n                attributes.push(createAttribute('NAL', stream.NalLengthSize));\n            }\n            if (stream.Type !== 'Video') {\n                attributes.push(createAttribute(globalize.translate('MediaInfoDefault'), (stream.IsDefault ? 'Yes' : 'No')));\n            }\n            if (stream.Type === 'Subtitle') {\n                attributes.push(createAttribute(globalize.translate('MediaInfoForced'), (stream.IsForced ? 'Yes' : 'No')));\n                attributes.push(createAttribute(globalize.translate('MediaInfoExternal'), (stream.IsExternal ? 'Yes' : 'No')));\n            }\n            if (stream.Type === 'Video' && version.Timestamp) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoTimestamp'), version.Timestamp));\n            }\n            html += attributes.join('<br/>');\n            html += '</div>';\n        }\n        return html;\n    }\n\n    function createAttribute(label, value) {\n        return `<span class=\"mediaInfoLabel\">${label}</span><span class=\"mediaInfoAttribute\">${value}</span>`;\n    }\n\n    function loadMediaInfo(itemId, serverId, template) {\n        const apiClient = connectionManager.getApiClient(serverId);\n        return apiClient.getItem(apiClient.getCurrentUserId(), itemId).then(item => {\n            const dialogOptions = {\n                size: 'small',\n                removeOnClose: true,\n                scrollY: false\n            };\n            if (layoutManager.tv) {\n                dialogOptions.size = 'fullscreen';\n            }\n            const dlg = dialogHelper.createDialog(dialogOptions);\n            dlg.classList.add('formDialog');\n            let html = '';\n            html += globalize.translateHtml(template, 'core');\n            dlg.innerHTML = html;\n            if (layoutManager.tv) {\n                dlg.querySelector('.formDialogContent');\n            }\n            dialogHelper.open(dlg);\n            dlg.querySelector('.btnCancel').addEventListener('click', () => {\n                dialogHelper.close(dlg);\n            });\n            apiClient.getCurrentUser().then(user => {\n                setMediaInfo(user, dlg, item);\n            });\n            loading.hide();\n        });\n    }\n\n    export function show(itemId, serverId) {\n        loading.show();\n        return import('text!./itemMediaInfo.template.html').then(({default: template}) => {\n            return new Promise((resolve, reject) => {\n                loadMediaInfo(itemId, serverId, template).then(resolve, reject);\n            });\n        });\n    }\n\n/* eslint-enable indent */\nexport default {\n    show: show\n};\n"]}