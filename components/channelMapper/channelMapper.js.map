{"version":3,"sources":["components/channelMapper/channelMapper.js"],"names":["define","_exports","_dom","_dialogHelper","_loading","_connectionManager","_globalize","_actionsheet","_embyInput","_paperIconButtonLight","_embyButton","_listViewStyle","_materialIcons","_formDialogStyle","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","channelMapper","options","onChannelsElementClick","e","btnMap","dom","parentWithClass","target","channelId","getAttribute","providerChannelId","menuItems","currentMappingOptions","ProviderChannels","map","m","name","Name","id","Id","selected","toLowerCase","sort","a","b","localeCompare","actionsheet","show","positionTo","items","then","newChannelId","mapChannel","button","loading","providerId","connectionManager","getApiClient","serverId","ajax","type","url","ApiClient","getUrl","data","JSON","stringify","tunerChannelId","dataType","mapping","listItem","setAttribute","ProviderChannelId","querySelector","innerHTML","getMappingSecondaryName","ProviderName","hide","providerName","concat","ProviderChannelName","initEditor","dlg","getChannelMappingOptions","apiClient","getJSON","result","channelsElement","TunerChannels","channel","getTunerChannelHtml","html","join","addEventListener","_classCallCheck","instance","Constructor","TypeError","this","dialogOptions","removeOnClose","dialogHelper","createDialog","classList","add","globalize","translate","getEditorHtml","close","Promise","resolve","open"],"mappings":"AAAAA,OAAO,CAAC,UAAW,MAAO,eAAgB,UAAW,oBAAqB,YAAa,cAAe,aAAc,0BAA2B,cAAe,gBAAiB,iBAAkB,oBAAoB,SAAUC,SAAUC,KAAMC,cAAeC,SAAUC,mBAAoBC,WAAYC,aAAcC,WAAYC,sBAAuBC,YAAaC,eAAgBC,eAAgBC,kBACpY,aAaA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KAXvFG,OAAOC,eAAelB,SAAU,aAAc,CAC5CmB,OAAO,IAETnB,SAASgB,aAAU,EANrBf,KAAAY,uBAAAZ,MACAC,cAAAW,uBAAAX,eACAC,SAAAU,uBAAAV,UACAC,mBAAAS,uBAAAT,oBACAC,WAAAQ,uBAAAR,YACAC,aAAAO,uBAAAP,cA8JEN,SAASgB,QArJP,SAAAI,cAAYC,SAqBR,SAASC,uBAAuBC,GAC5B,IAAMC,OAASC,KAAAA,QAAIC,gBAAgBH,EAAEI,OAAQ,UAE7C,GAAIH,OAAQ,CACR,IAAMI,UAAYJ,OAAOK,aAAa,WAChCC,kBAAoBN,OAAOK,aAAa,mBACxCE,UAAYC,sBAAsBC,iBAAiBC,KAAI,SAAAC,GACzD,MAAO,CACHC,KAAMD,EAAEE,KACRC,GAAIH,EAAEI,GACNC,SAAUL,EAAEI,GAAGE,gBAAkBX,kBAAkBW,kBAExDC,MAAK,SAACC,EAAGC,GACR,OAAOD,EAAEP,KAAKS,cAAcD,EAAER,SAElCU,aAAAA,QAAYC,KAAK,CACbC,WAAYxB,OACZyB,MAAOlB,YACRmB,MAAK,SAAAC,eAtChB,SAASC,WAAWC,OAAQzB,UAAWE,mBACnCwB,SAAAA,QAAQP,OACR,IAAMQ,WAAalC,QAAQkC,WAC3BC,mBAAAA,QAAkBC,aAAapC,QAAQqC,UAAUC,KAAK,CAClDC,KAAM,OACNC,IAAKC,UAAUC,OAAO,0BACtBC,KAAMC,KAAKC,UAAU,CACjBX,WAAYA,WACZY,eAAgBvC,UAChBE,kBAAmBA,oBAEvBsC,SAAU,SACXlB,MAAK,SAAAmB,SACJ,IAAMC,SAAW7C,KAAAA,QAAIC,gBAAgB2B,OAAQ,YAC7CA,OAAOkB,aAAa,kBAAmBF,QAAQG,mBAC/CF,SAASG,cAAc,cAAcC,UAAYC,wBAAwBN,QAASrC,sBAAsB4C,cACxGtB,SAAAA,QAAQuB,UAuBJzB,CAAW5B,OAAQI,UAAWuB,kBAY1C,SAASwB,wBAAwBN,QAASS,cACtC,MAAA,GAAAC,OAAUV,QAAQW,qBAAuB,GAAzC,OAAAD,OAAiDD,cAoCrD,SAASG,WAAWC,IAAK7D,UA5CzB,SAAS8D,yBAAyBzB,SAAUH,YACxC,IAAM6B,UAAY5B,mBAAAA,QAAkBC,aAAaC,UACjD,OAAO0B,UAAUC,QAAQD,UAAUrB,OAAO,+BAAgC,CACtER,WAAYA,eA0ChB4B,CAAyB9D,QAAQqC,SAAUrC,QAAQkC,YAAYL,MAAK,SAAAoC,QAChEtD,sBAAwBsD,OACxB,IAAMC,gBAAkBL,IAAIT,cAAc,aAC1Cc,gBAAgBb,UAAYY,OAAOE,cAActD,KAAI,SAAAuD,SACjD,OAtCZ,SAASC,oBAAoBD,QAASX,cAClC,IAAIa,KAAO,GAgBX,OAfAA,MAAQ,yBACRA,MAAQ,wDACRA,MAAQ,sCACRA,MAAQ,gCACRA,MAAQF,QAAQpD,KAChBsD,MAAQ,QACRA,MAAQ,2CAEJF,QAAQT,sBACRW,MAAQhB,wBAAwBc,QAASX,eAG7Ca,MAAQ,SACRA,MAAQ,UACRA,MAAI,uFAAAZ,OAA2FU,QAAQlD,GAAnG,uBAAAwC,OAA2HU,QAAQjB,kBAAnI,8DACW,SAqBAkB,CAAoBD,QAASH,OAAOV,iBAC5CgB,KAAK,IACRL,gBAAgBM,iBAAiB,QAASvE,2BAIlD,IAAIU,uBAlGV,SAAS8D,gBAAgBC,SAAUC,aAAe,KAAMD,oBAAoBC,aAAgB,MAAM,IAAIC,UAAU,qCAFzFH,CAAAI,KAAA9E,eAsGjB8E,KAAKnD,KAAO,WACR,IAAMoD,cAAgB,CAClBC,eAAe,EAEnBD,KAAqB,SACfjB,IAAMmB,cAAAA,QAAaC,aAAaH,eACtCjB,IAAIqB,UAAUC,IAAI,cAClBtB,IAAIqB,UAAUC,IAAI,aAClBtB,IAAIqB,UAAUC,IAAI,sBAClB,IAAIb,KAAO,GAcX,OAZAA,MAAQ,iCACRA,MAAQ,yIACRA,MAAQ,qCACRA,MAJcc,WAAAA,QAAUC,UAAU,eAKlCf,MAAQ,QACRA,MAAQ,SACRA,MA3CJ,SAASgB,gBACL,IAAIhB,KAAO,GASX,OARAA,MAAQ,gDACRA,MAAQ,2DACRA,MAAQ,8BACRA,MAAI,OAAAZ,OAAW0B,WAAAA,QAAUC,UAAU,YAA/B,SACJf,MAAQ,mCACRA,MAAQ,SACRA,MAAQ,WACRA,MAAQ,UACO,SAiCPgB,GACRzB,IAAIR,UAAYiB,KAChBV,WAAWC,IAAK7D,SAChB6D,IAAIT,cAAc,cAAcoB,iBAAiB,SAAS,WACtDQ,cAAAA,QAAaO,MAAM1B,QAEhB,IAAI2B,SAAQ,SAAAC,SACf5B,IAAIW,iBAAiB,QAASiB,SAC9BT,cAAAA,QAAaU,KAAK7B","file":"channelMapper.js","sourcesContent":["import dom from 'dom';\nimport dialogHelper from 'dialogHelper';\nimport loading from 'loading';\nimport connectionManager from 'connectionManager';\nimport globalize from 'globalize';\nimport actionsheet from 'actionsheet';\nimport 'emby-input';\nimport 'paper-icon-button-light';\nimport 'emby-button';\nimport 'listViewStyle';\nimport 'material-icons';\nimport 'formDialogStyle';\n\nexport default class channelMapper {\n    constructor(options) {\n        function mapChannel(button, channelId, providerChannelId) {\n            loading.show();\n            const providerId = options.providerId;\n            connectionManager.getApiClient(options.serverId).ajax({\n                type: 'POST',\n                url: ApiClient.getUrl('LiveTv/ChannelMappings'),\n                data: JSON.stringify({\n                    providerId: providerId,\n                    tunerChannelId: channelId,\n                    providerChannelId: providerChannelId\n                }),\n                dataType: 'json'\n            }).then(mapping => {\n                const listItem = dom.parentWithClass(button, 'listItem');\n                button.setAttribute('data-providerid', mapping.ProviderChannelId);\n                listItem.querySelector('.secondary').innerHTML = getMappingSecondaryName(mapping, currentMappingOptions.ProviderName);\n                loading.hide();\n            });\n        }\n\n        function onChannelsElementClick(e) {\n            const btnMap = dom.parentWithClass(e.target, 'btnMap');\n\n            if (btnMap) {\n                const channelId = btnMap.getAttribute('data-id');\n                const providerChannelId = btnMap.getAttribute('data-providerid');\n                const menuItems = currentMappingOptions.ProviderChannels.map(m => {\n                    return {\n                        name: m.Name,\n                        id: m.Id,\n                        selected: m.Id.toLowerCase() === providerChannelId.toLowerCase()\n                    };\n                }).sort((a, b) => {\n                    return a.name.localeCompare(b.name);\n                });\n                actionsheet.show({\n                    positionTo: btnMap,\n                    items: menuItems\n                }).then(newChannelId => {\n                    mapChannel(btnMap, channelId, newChannelId);\n                });\n            }\n        }\n\n        function getChannelMappingOptions(serverId, providerId) {\n            const apiClient = connectionManager.getApiClient(serverId);\n            return apiClient.getJSON(apiClient.getUrl('LiveTv/ChannelMappingOptions', {\n                providerId: providerId\n            }));\n        }\n\n        function getMappingSecondaryName(mapping, providerName) {\n            return `${mapping.ProviderChannelName || ''} - ${providerName}`;\n        }\n\n        function getTunerChannelHtml(channel, providerName) {\n            let html = '';\n            html += '<div class=\"listItem\">';\n            html += '<span class=\"material-icons listItemIcon dvr\"></span>';\n            html += '<div class=\"listItemBody two-line\">';\n            html += '<h3 class=\"listItemBodyText\">';\n            html += channel.Name;\n            html += '</h3>';\n            html += '<div class=\"secondary listItemBodyText\">';\n\n            if (channel.ProviderChannelName) {\n                html += getMappingSecondaryName(channel, providerName);\n            }\n\n            html += '</div>';\n            html += '</div>';\n            html += `<button class=\"btnMap autoSize\" is=\"paper-icon-button-light\" type=\"button\" data-id=\"${channel.Id}\" data-providerid=\"${channel.ProviderChannelId}\"><span class=\"material-icons mode_edit\"></span></button>`;\n            return html += '</div>';\n        }\n\n        function getEditorHtml() {\n            let html = '';\n            html += '<div class=\"formDialogContent smoothScrollY\">';\n            html += '<div class=\"dialogContentInner dialog-content-centered\">';\n            html += '<form style=\"margin:auto;\">';\n            html += `<h1>${globalize.translate('Channels')}</h1>`;\n            html += '<div class=\"channels paperList\">';\n            html += '</div>';\n            html += '</form>';\n            html += '</div>';\n            return html += '</div>';\n        }\n\n        function initEditor(dlg, options) {\n            getChannelMappingOptions(options.serverId, options.providerId).then(result => {\n                currentMappingOptions = result;\n                const channelsElement = dlg.querySelector('.channels');\n                channelsElement.innerHTML = result.TunerChannels.map(channel => {\n                    return getTunerChannelHtml(channel, result.ProviderName);\n                }).join('');\n                channelsElement.addEventListener('click', onChannelsElementClick);\n            });\n        }\n\n        let currentMappingOptions;\n\n        this.show = () => {\n            const dialogOptions = {\n                removeOnClose: true\n            };\n            dialogOptions.size = 'small';\n            const dlg = dialogHelper.createDialog(dialogOptions);\n            dlg.classList.add('formDialog');\n            dlg.classList.add('ui-body-a');\n            dlg.classList.add('background-theme-a');\n            let html = '';\n            const title = globalize.translate('MapChannels');\n            html += '<div class=\"formDialogHeader\">';\n            html += '<button is=\"paper-icon-button-light\" class=\"btnCancel autoSize\" tabindex=\"-1\"><span class=\"material-icons arrow_back\"></span></button>';\n            html += '<h3 class=\"formDialogHeaderTitle\">';\n            html += title;\n            html += '</h3>';\n            html += '</div>';\n            html += getEditorHtml();\n            dlg.innerHTML = html;\n            initEditor(dlg, options);\n            dlg.querySelector('.btnCancel').addEventListener('click', () => {\n                dialogHelper.close(dlg);\n            });\n            return new Promise(resolve => {\n                dlg.addEventListener('close', resolve);\n                dialogHelper.open(dlg);\n            });\n        };\n    }\n}\n"]}