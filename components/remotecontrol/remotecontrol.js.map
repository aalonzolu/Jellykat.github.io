{"version":3,"sources":["components/remotecontrol/remotecontrol.js"],"names":["define","_require","_exports","_datetime","_backdrop","_listView","_imageLoader","_playbackManager","_nowPlayingHelper","_events","_connectionManager","_apphost","_globalize","_layoutManager","userSettings","_cardBuilder","_itemContextMenu","_cardStyle","_embyItemscontainer","_remotecontrol","_embyRatingbutton","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","from","test","length","i","F","s","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","arr","len","arr2","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","desc","set","_default","updatePlayerState","player","context","state","lastPlayerState","item","NowPlayingItem","supportedCommands","playbackManager","getPlayerInfo","currentPlayerSupportedCommands","playState","PlayState","isSupportedCommands","includes","buttonVisible","querySelector","MediaType","updateAudioTracksDisplay","audioTracks","indexOf","updateSubtitleTracksDisplay","subtitleTracks","currentPlayer","isLocalPlayer","classList","remove","add","layoutManager","mobile","playingVideo","isPlayingVideo","playingAudio","positionSlider","RunTimeTicks","setKeyboardSteps","skipBackLength","skipForwardLength","dragging","disabled","CanSeek","isProgressClear","MediaSource","setIsClear","updatePlayPauseState","IsPaused","updateTimeDisplay","PositionTicks","updatePlayerVolumeState","IsMuted","VolumeLevel","updateRepeatModeDisplay","getRepeatMode","onShuffleQueueModeChange","updateNowPlayingInfo","serverId","displayName","getNowPlayingNameHtml","nowPlayingItem","includeNonNameInfo","nowPlayingHelper","getNowPlayingNames","map","text","join","replace","nowPlayingServerId","ServerId","Type","MediaStreams","songName","Name","artistsSeries","albumName","Artists","ArtistItems","_step","_iterator","artist","artistName","artistId","Id","concat","_step2","_iterator2","Album","AlbumId","innerHTML","SeasonName","seasonName","SeasonId","SeriesName","seriesName","SeriesId","url","seriesImageUrl","options","type","SeriesPrimaryImageTag","tag","connectionManager","getApiClient","getScaledImageUrl","SeriesThumbImageTag","ParentThumbImageTag","ParentThumbItemId","maxHeight","imageUrl","ImageTags","PrimaryImageItemId","AlbumPrimaryImageTag","contextButton","autoFocusContextButton","document","activeElement","contextButtonClone","cloneNode","parentNode","replaceChild","focus","play","queue","stopPlayback","clearQueue","openAlbum","positionTo","apiClient","getItem","getCurrentUserId","then","fullItem","getCurrentUser","user","addEventListener","itemContextMenu","show","assign","setImageUrl","imgContainer","cardBuilder","getDefaultBackgroundClass","backdrop","setBackdrops","userData","UserData","likes","Likes","IsFavorite","clearBackdrop","repeatMode","toggleRepeatButtons","dlg","querySelectorAll","innHtml","repeatOn","_step3","_iterator3","toggleRepeatButton","toggle","isMuted","volumeLevel","view","showMuteButton","showVolumeSlider","appHost","supports","buttonMute","buttonMuteIcon","setAttribute","globalize","translate","nowPlayingVolumeSlider","nowPlayingVolumeSliderContainer","isPaused","isActive","btnPlayPause","btnPlayPauseIcon","positionTicks","runtimeTicks","pct","datetime","getDisplayRunningTime","getPlaylistItems","getPlaylist","onPlaybackStart","console","debug","onStateChanged","this","onRepeatModeChange","_step4","updateView","arguments","undefined","shuffleMode","getQueueShuffleMode","cssClass","shuffleButtons","_iterator4","shuffleButton","onPlaylistUpdate","loadPlaylist","items","html","favoritesEnabled","listView","getListViewHtml","smallIcon","action","enableUserDataButtons","rightButtons","icon","title","id","dragHandle","itemsContainer","focusedItemPlaylistId","getAttribute","newFocusedItem","playlistItemId","getCurrentPlaylistItemId","img","imageLoader","lazyChildren","onPlaylistItemRemoved","info","playlistItemIds","listItem","removeChild","onPlaybackStopped","NextMediaType","Emby","Page","back","onPlayPauseStateChanged","paused","event","onTimeUpdate","now","Date","getTime","lastUpdateTime","currentRuntimeTicks","duration","currentTime","onVolumeChanged","getVolume","releaseCurrentPlayer","events","off","bindToPlayer","getPlayerState","on","updateSupportedCommands","commands","all","enableButton","onBtnCommandClick","contains","toggleRepeat","setRepeatMode","sendCommand","savePlaylist","Promise","_resolve","_reject","imported","_ref3","playlistEditor","getSaveablePlaylistItems","filter","ApiClient","enableAddToPlayQueue","defaultValue","bindEvents","btnCommand","target","showAudioMenu","button","currentIndex","getAudioStreamIndex","menuItems","menuItem","DisplayTitle","Index","selected","_ref","callback","setAudioStreamIndex","parseInt","showSubtitleMenu","getSubtitleStreamIndex","unshift","_ref2","setSubtitleStreamIndex","stop","playPause","nextTrack","rewind","fastForward","_step5","_iterator5","toggleQueueShuffleMode","_currentTime","previousTrack","detail","seekPercent","newPercent","parseFloat","getBubbleText","ticks","setVolume","toggleMute","playlistContainer","removeFromPlaylist","newIndex","movePlaylistItem","onPlayerChange","getCurrentPlayer","onMessageSubmit","form","Arguments","Header","Text","_ref4","toast","preventDefault","stopPropagation","onSendStringSubmit","String","_ref5","init","ownerView","volumecontrolHtml","optionsSection","insertAdjacentHTML","tv","enableKeyboardDragging","onShow","tab","window","location","hash","destroy","onDialogClosed","btn","enabled"],"mappings":"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","file":"remotecontrol.js","sourcesContent":["import datetime from 'datetime';\nimport backdrop from 'backdrop';\nimport listView from 'listView';\nimport imageLoader from 'imageLoader';\nimport playbackManager from 'playbackManager';\nimport nowPlayingHelper from 'nowPlayingHelper';\nimport events from 'events';\nimport connectionManager from 'connectionManager';\nimport appHost from 'apphost';\nimport globalize from 'globalize';\nimport layoutManager from 'layoutManager';\nimport * as userSettings from 'userSettings';\nimport cardBuilder from 'cardBuilder';\nimport itemContextMenu from 'itemContextMenu';\nimport 'cardStyle';\nimport 'emby-itemscontainer';\nimport 'css!./remotecontrol.css';\nimport 'emby-ratingbutton';\n\n/*eslint prefer-const: \"error\"*/\n\nlet showMuteButton = true;\nlet showVolumeSlider = true;\n\nfunction showAudioMenu(context, player, button, item) {\n    const currentIndex = playbackManager.getAudioStreamIndex(player);\n    const streams = playbackManager.audioTracks(player);\n    const menuItems = streams.map(function (s) {\n        const menuItem = {\n            name: s.DisplayTitle,\n            id: s.Index\n        };\n\n        if (s.Index == currentIndex) {\n            menuItem.selected = true;\n        }\n\n        return menuItem;\n    });\n\n    import('actionsheet').then(({ default: actionsheet }) => {\n        actionsheet.show({\n            items: menuItems,\n            positionTo: button,\n            callback: function (id) {\n                playbackManager.setAudioStreamIndex(parseInt(id), player);\n            }\n        });\n    });\n}\n\nfunction showSubtitleMenu(context, player, button, item) {\n    const currentIndex = playbackManager.getSubtitleStreamIndex(player);\n    const streams = playbackManager.subtitleTracks(player);\n    const menuItems = streams.map(function (s) {\n        const menuItem = {\n            name: s.DisplayTitle,\n            id: s.Index\n        };\n\n        if (s.Index == currentIndex) {\n            menuItem.selected = true;\n        }\n\n        return menuItem;\n    });\n    menuItems.unshift({\n        id: -1,\n        name: globalize.translate('Off'),\n        selected: currentIndex == null\n    });\n\n    import('actionsheet').then(({ default: actionsheet }) => {\n        actionsheet.show({\n            items: menuItems,\n            positionTo: button,\n            callback: function (id) {\n                playbackManager.setSubtitleStreamIndex(parseInt(id), player);\n            }\n        });\n    });\n}\n\nfunction getNowPlayingNameHtml(nowPlayingItem, includeNonNameInfo) {\n    return nowPlayingHelper.getNowPlayingNames(nowPlayingItem, includeNonNameInfo).map(function (i) {\n        return i.text;\n    }).join('<br/>');\n}\n\nfunction seriesImageUrl(item, options) {\n    if (item.Type !== 'Episode') {\n        return null;\n    }\n\n    options = options || {};\n    options.type = options.type || 'Primary';\n    if (options.type === 'Primary' && item.SeriesPrimaryImageTag) {\n        options.tag = item.SeriesPrimaryImageTag;\n        return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n    }\n\n    if (options.type === 'Thumb') {\n        if (item.SeriesThumbImageTag) {\n            options.tag = item.SeriesThumbImageTag;\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n        }\n\n        if (item.ParentThumbImageTag) {\n            options.tag = item.ParentThumbImageTag;\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.ParentThumbItemId, options);\n        }\n    }\n\n    return null;\n}\n\nfunction imageUrl(item, options) {\n    options = options || {};\n    options.type = options.type || 'Primary';\n\n    if (item.ImageTags && item.ImageTags[options.type]) {\n        options.tag = item.ImageTags[options.type];\n        return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.PrimaryImageItemId || item.Id, options);\n    }\n\n    if (item.AlbumId && item.AlbumPrimaryImageTag) {\n        options.tag = item.AlbumPrimaryImageTag;\n        return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.AlbumId, options);\n    }\n\n    return null;\n}\n\nfunction updateNowPlayingInfo(context, state, serverId) {\n    const item = state.NowPlayingItem;\n    const displayName = item ? getNowPlayingNameHtml(item).replace('<br/>', ' - ') : '';\n    if (item) {\n        const nowPlayingServerId = (item.ServerId || serverId);\n        if (item.Type == 'Audio' || item.MediaStreams[0].Type == 'Audio') {\n            const songName = item.Name;\n            let artistsSeries = '';\n            let albumName = '';\n            if (item.Artists != null) {\n                if (item.ArtistItems != null) {\n                    for (const artist of item.ArtistItems) {\n                        const artistName = artist.Name;\n                        const artistId = artist.Id;\n                        artistsSeries += `<a class=\"button-link emby-button\" is=\"emby-linkbutton\" href=\"details?id=${artistId}&serverId=${nowPlayingServerId}\">${artistName}</a>`;\n                        if (artist !== item.ArtistItems.slice(-1)[0]) {\n                            artistsSeries += ', ';\n                        }\n                    }\n                } else if (item.Artists) {\n                    // For some reason, Chromecast Player doesn't return a item.ArtistItems object, so we need to fallback\n                    // to normal item.Artists item.\n                    // TODO: Normalise fields returned by all the players\n                    for (const artist of item.Artists) {\n                        artistsSeries += `<a>${artist}</a>`;\n                        if (artist !== item.Artists.slice(-1)[0]) {\n                            artistsSeries += ', ';\n                        }\n                    }\n                }\n            }\n            if (item.Album != null) {\n                albumName = '<a class=\"button-link emby-button\" is=\"emby-linkbutton\" href=\"details?id=' + item.AlbumId + `&serverId=${nowPlayingServerId}\">` + item.Album + '</a>';\n            }\n            context.querySelector('.nowPlayingAlbum').innerHTML = albumName;\n            context.querySelector('.nowPlayingArtist').innerHTML = artistsSeries;\n            context.querySelector('.nowPlayingSongName').innerHTML = songName;\n        } else if (item.Type == 'Episode') {\n            if (item.SeasonName != null) {\n                const seasonName = item.SeasonName;\n                context.querySelector('.nowPlayingSeason').innerHTML = '<a class=\"button-link emby-button\" is=\"emby-linkbutton\" href=\"details?id=' + item.SeasonId + `&serverId=${nowPlayingServerId}\">${seasonName}</a>`;\n            }\n            if (item.SeriesName != null) {\n                const seriesName = item.SeriesName;\n                if (item.SeriesId != null) {\n                    context.querySelector('.nowPlayingSerie').innerHTML = '<a class=\"button-link emby-button\" is=\"emby-linkbutton\" href=\"details?id=' + item.SeriesId + `&serverId=${nowPlayingServerId}\">${seriesName}</a>`;\n                } else {\n                    context.querySelector('.nowPlayingSerie').innerHTML = seriesName;\n                }\n            }\n            context.querySelector('.nowPlayingEpisode').innerHTML = item.Name;\n        } else {\n            context.querySelector('.nowPlayingPageTitle').innerHTML = displayName;\n        }\n\n        if (displayName.length > 0 && item.Type != 'Audio' && item.Type != 'Episode') {\n            context.querySelector('.nowPlayingPageTitle').classList.remove('hide');\n        } else {\n            context.querySelector('.nowPlayingPageTitle').classList.add('hide');\n        }\n\n        const url = seriesImageUrl(item, {\n            maxHeight: 300\n        }) || imageUrl(item, {\n            maxHeight: 300\n        });\n\n        let contextButton = context.querySelector('.btnToggleContextMenu');\n        // We remove the previous event listener by replacing the item in each update event\n        const autoFocusContextButton = document.activeElement === contextButton;\n        const contextButtonClone = contextButton.cloneNode(true);\n        contextButton.parentNode.replaceChild(contextButtonClone, contextButton);\n        contextButton = context.querySelector('.btnToggleContextMenu');\n        if (autoFocusContextButton) {\n            contextButton.focus();\n        }\n        const stopPlayback = !!layoutManager.mobile;\n        const options = {\n            play: false,\n            queue: false,\n            stopPlayback: stopPlayback,\n            clearQueue: true,\n            openAlbum: false,\n            positionTo: contextButton\n        };\n        const apiClient = connectionManager.getApiClient(item.ServerId);\n        apiClient.getItem(apiClient.getCurrentUserId(), item.Id).then(function (fullItem) {\n            apiClient.getCurrentUser().then(function (user) {\n                contextButton.addEventListener('click', function () {\n                    itemContextMenu.show(Object.assign({\n                        item: fullItem,\n                        user: user\n                    }, options));\n                });\n            });\n        });\n        setImageUrl(context, state, url);\n        backdrop.setBackdrops([item]);\n        apiClient.getItem(apiClient.getCurrentUserId(), item.Id).then(function (fullItem) {\n            const userData = fullItem.UserData || {};\n            const likes = userData.Likes == null ? '' : userData.Likes;\n            context.querySelector('.nowPlayingPageUserDataButtonsTitle').innerHTML = '<button is=\"emby-ratingbutton\" type=\"button\" class=\"listItemButton paper-icon-button-light\" data-id=\"' + fullItem.Id + '\" data-serverid=\"' + fullItem.ServerId + '\" data-itemtype=\"' + fullItem.Type + '\" data-likes=\"' + likes + '\" data-isfavorite=\"' + userData.IsFavorite + '\"><span class=\"material-icons favorite\"></span></button>';\n            context.querySelector('.nowPlayingPageUserDataButtons').innerHTML = '<button is=\"emby-ratingbutton\" type=\"button\" class=\"listItemButton paper-icon-button-light\" data-id=\"' + fullItem.Id + '\" data-serverid=\"' + fullItem.ServerId + '\" data-itemtype=\"' + fullItem.Type + '\" data-likes=\"' + likes + '\" data-isfavorite=\"' + userData.IsFavorite + '\"><span class=\"material-icons favorite\"></span></button>';\n        });\n    } else {\n        backdrop.clearBackdrop();\n        context.querySelector('.nowPlayingPageUserDataButtons').innerHTML = '';\n    }\n}\n\nfunction setImageUrl(context, state, url) {\n    const item = state.NowPlayingItem;\n    const imgContainer = context.querySelector('.nowPlayingPageImageContainer');\n\n    if (url) {\n        imgContainer.innerHTML = '<img class=\"nowPlayingPageImage\" src=\"' + url + '\" />';\n        if (item.Type == 'Audio') {\n            context.querySelector('.nowPlayingPageImage').classList.add('nowPlayingPageImageAudio');\n            context.querySelector('.nowPlayingPageImageContainer').classList.remove('nowPlayingPageImageAudio');\n        } else {\n            context.querySelector('.nowPlayingPageImageContainer').classList.add('nowPlayingPageImagePoster');\n            context.querySelector('.nowPlayingPageImage').classList.remove('nowPlayingPageImageAudio');\n        }\n    } else {\n        imgContainer.innerHTML = '<div class=\"nowPlayingPageImageContainerNoAlbum\"><button data-action=\"link\" class=\"cardImageContainer coveredImage ' + cardBuilder.getDefaultBackgroundClass(item.Name) + ' cardContent cardContent-shadow itemAction\"><span class=\"cardImageIcon material-icons album\"></span></button></div>';\n    }\n}\n\nfunction buttonVisible(btn, enabled) {\n    if (enabled) {\n        btn.classList.remove('hide');\n    } else {\n        btn.classList.add('hide');\n    }\n}\n\nfunction updateSupportedCommands(context, commands) {\n    const all = context.querySelectorAll('.btnCommand');\n\n    for (let i = 0, length = all.length; i < length; i++) {\n        const enableButton = commands.indexOf(all[i].getAttribute('data-command')) !== -1;\n        all[i].disabled = !enableButton;\n    }\n}\n\nexport default function () {\n    function toggleRepeat() {\n        switch (playbackManager.getRepeatMode()) {\n            case 'RepeatAll':\n                playbackManager.setRepeatMode('RepeatOne');\n                break;\n            case 'RepeatOne':\n                playbackManager.setRepeatMode('RepeatNone');\n                break;\n            case 'RepeatNone':\n                playbackManager.setRepeatMode('RepeatAll');\n        }\n    }\n\n    function updatePlayerState(player, context, state) {\n        lastPlayerState = state;\n        const item = state.NowPlayingItem;\n        const playerInfo = playbackManager.getPlayerInfo();\n        const supportedCommands = playerInfo.supportedCommands;\n        currentPlayerSupportedCommands = supportedCommands;\n        const playState = state.PlayState || {};\n        const isSupportedCommands = supportedCommands.includes('DisplayMessage') || supportedCommands.includes('SendString') || supportedCommands.includes('Select');\n        buttonVisible(context.querySelector('.btnToggleFullscreen'), item && item.MediaType == 'Video' && supportedCommands.includes('ToggleFullscreen'));\n        updateAudioTracksDisplay(player, context);\n        updateSubtitleTracksDisplay(player, context);\n\n        if (supportedCommands.includes('DisplayMessage') && !currentPlayer.isLocalPlayer) {\n            context.querySelector('.sendMessageSection').classList.remove('hide');\n        } else {\n            context.querySelector('.sendMessageSection').classList.add('hide');\n        }\n\n        if (supportedCommands.includes('SendString') && !currentPlayer.isLocalPlayer) {\n            context.querySelector('.sendTextSection').classList.remove('hide');\n        } else {\n            context.querySelector('.sendTextSection').classList.add('hide');\n        }\n\n        if (supportedCommands.includes('Select') && !currentPlayer.isLocalPlayer) {\n            context.querySelector('.navigationSection').classList.remove('hide');\n        } else {\n            context.querySelector('.navigationSection').classList.add('hide');\n        }\n\n        if (isSupportedCommands && !currentPlayer.isLocalPlayer) {\n            context.querySelector('.remoteControlSection').classList.remove('hide');\n        } else {\n            context.querySelector('.remoteControlSection').classList.add('hide');\n        }\n\n        buttonVisible(context.querySelector('.btnStop'), item != null);\n        buttonVisible(context.querySelector('.btnNextTrack'), item != null);\n        buttonVisible(context.querySelector('.btnPreviousTrack'), item != null);\n        if (layoutManager.mobile) {\n            const playingVideo = playbackManager.isPlayingVideo() && item !== null;\n            const playingAudio = !playbackManager.isPlayingVideo() && item !== null;\n            buttonVisible(context.querySelector('.btnRepeat'), playingAudio);\n            buttonVisible(context.querySelector('.btnShuffleQueue'), playingAudio);\n            buttonVisible(context.querySelector('.btnRewind'), playingVideo);\n            buttonVisible(context.querySelector('.btnFastForward'), playingVideo);\n            buttonVisible(context.querySelector('.nowPlayingSecondaryButtons .btnShuffleQueue'), playingVideo);\n            buttonVisible(context.querySelector('.nowPlayingSecondaryButtons .btnRepeat'), playingVideo);\n        } else {\n            buttonVisible(context.querySelector('.btnRewind'), item != null);\n            buttonVisible(context.querySelector('.btnFastForward'), item != null);\n        }\n        const positionSlider = context.querySelector('.nowPlayingPositionSlider');\n\n        if (positionSlider && item && item.RunTimeTicks) {\n            positionSlider.setKeyboardSteps(userSettings.skipBackLength() * 1000000 / item.RunTimeTicks,\n                userSettings.skipForwardLength() * 1000000 / item.RunTimeTicks);\n        }\n\n        if (positionSlider && !positionSlider.dragging) {\n            positionSlider.disabled = !playState.CanSeek;\n            const isProgressClear = state.MediaSource && state.MediaSource.RunTimeTicks == null;\n            positionSlider.setIsClear(isProgressClear);\n        }\n\n        updatePlayPauseState(playState.IsPaused, item != null);\n        updateTimeDisplay(playState.PositionTicks, item ? item.RunTimeTicks : null);\n        updatePlayerVolumeState(context, playState.IsMuted, playState.VolumeLevel);\n\n        if (item && item.MediaType == 'Video') {\n            context.classList.remove('hideVideoButtons');\n        } else {\n            context.classList.add('hideVideoButtons');\n        }\n\n        updateRepeatModeDisplay(playbackManager.getRepeatMode());\n        onShuffleQueueModeChange(false);\n        updateNowPlayingInfo(context, state);\n    }\n\n    function updateAudioTracksDisplay(player, context) {\n        const supportedCommands = currentPlayerSupportedCommands;\n        buttonVisible(context.querySelector('.btnAudioTracks'), playbackManager.audioTracks(player).length > 1 && supportedCommands.indexOf('SetAudioStreamIndex') != -1);\n    }\n\n    function updateSubtitleTracksDisplay(player, context) {\n        const supportedCommands = currentPlayerSupportedCommands;\n        buttonVisible(context.querySelector('.btnSubtitles'), playbackManager.subtitleTracks(player).length && supportedCommands.indexOf('SetSubtitleStreamIndex') != -1);\n    }\n\n    function updateRepeatModeDisplay(repeatMode) {\n        const context = dlg;\n        const toggleRepeatButtons = context.querySelectorAll('.repeatToggleButton');\n        const cssClass = 'buttonActive';\n        let innHtml = '<span class=\"material-icons repeat\"></span>';\n        let repeatOn = true;\n\n        switch (repeatMode) {\n            case 'RepeatAll':\n                break;\n            case 'RepeatOne':\n                innHtml = '<span class=\"material-icons repeat_one\"></span>';\n                break;\n            case 'RepeatNone':\n            default:\n                repeatOn = false;\n                break;\n        }\n\n        for (const toggleRepeatButton of toggleRepeatButtons) {\n            toggleRepeatButton.classList.toggle(cssClass, repeatOn);\n            toggleRepeatButton.innerHTML = innHtml;\n        }\n    }\n\n    function updatePlayerVolumeState(context, isMuted, volumeLevel) {\n        const view = context;\n        const supportedCommands = currentPlayerSupportedCommands;\n\n        if (supportedCommands.indexOf('Mute') === -1) {\n            showMuteButton = false;\n        }\n\n        if (supportedCommands.indexOf('SetVolume') === -1) {\n            showVolumeSlider = false;\n        }\n\n        if (currentPlayer.isLocalPlayer && appHost.supports('physicalvolumecontrol')) {\n            showMuteButton = false;\n            showVolumeSlider = false;\n        }\n\n        const buttonMute = view.querySelector('.buttonMute');\n        const buttonMuteIcon = buttonMute.querySelector('.material-icons');\n\n        buttonMuteIcon.classList.remove('volume_off', 'volume_up');\n\n        if (isMuted) {\n            buttonMute.setAttribute('title', globalize.translate('Unmute'));\n            buttonMuteIcon.classList.add('volume_off');\n        } else {\n            buttonMute.setAttribute('title', globalize.translate('Mute'));\n            buttonMuteIcon.classList.add('volume_up');\n        }\n\n        if (!showMuteButton && !showVolumeSlider) {\n            context.querySelector('.volumecontrol').classList.add('hide');\n        } else {\n            buttonMute.classList.toggle('hide', !showMuteButton);\n\n            const nowPlayingVolumeSlider = context.querySelector('.nowPlayingVolumeSlider');\n            const nowPlayingVolumeSliderContainer = context.querySelector('.nowPlayingVolumeSliderContainer');\n\n            if (nowPlayingVolumeSlider) {\n                nowPlayingVolumeSliderContainer.classList.toggle('hide', !showVolumeSlider);\n\n                if (!nowPlayingVolumeSlider.dragging) {\n                    nowPlayingVolumeSlider.value = volumeLevel || 0;\n                }\n            }\n        }\n    }\n\n    function updatePlayPauseState(isPaused, isActive) {\n        const context = dlg;\n        const btnPlayPause = context.querySelector('.btnPlayPause');\n        const btnPlayPauseIcon = btnPlayPause.querySelector('.material-icons');\n\n        btnPlayPauseIcon.classList.remove('play_circle_filled', 'pause_circle_filled');\n        btnPlayPauseIcon.classList.add(isPaused ? 'play_circle_filled' : 'pause_circle_filled');\n\n        buttonVisible(btnPlayPause, isActive);\n    }\n\n    function updateTimeDisplay(positionTicks, runtimeTicks) {\n        const context = dlg;\n        const positionSlider = context.querySelector('.nowPlayingPositionSlider');\n\n        if (positionSlider && !positionSlider.dragging) {\n            if (runtimeTicks) {\n                let pct = positionTicks / runtimeTicks;\n                pct *= 100;\n                positionSlider.value = pct;\n            } else {\n                positionSlider.value = 0;\n            }\n        }\n\n        context.querySelector('.positionTime').innerHTML = positionTicks == null ? '--:--' : datetime.getDisplayRunningTime(positionTicks);\n        context.querySelector('.runtime').innerHTML = runtimeTicks != null ? datetime.getDisplayRunningTime(runtimeTicks) : '--:--';\n    }\n\n    function getPlaylistItems(player) {\n        return playbackManager.getPlaylist(player);\n    }\n\n    function loadPlaylist(context, player) {\n        getPlaylistItems(player).then(function (items) {\n            let html = '';\n            let favoritesEnabled = true;\n            if (layoutManager.mobile) {\n                if (items.length > 0) {\n                    context.querySelector('.btnTogglePlaylist').classList.remove('hide');\n                } else {\n                    context.querySelector('.btnTogglePlaylist').classList.add('hide');\n                }\n                favoritesEnabled = false;\n            }\n\n            html += listView.getListViewHtml({\n                items: items,\n                smallIcon: true,\n                action: 'setplaylistindex',\n                enableUserDataButtons: favoritesEnabled,\n                rightButtons: [{\n                    icon: 'remove_circle_outline',\n                    title: globalize.translate('ButtonRemove'),\n                    id: 'remove'\n                }],\n                dragHandle: true\n            });\n\n            const itemsContainer = context.querySelector('.playlist');\n            let focusedItemPlaylistId = itemsContainer.querySelector('button:focus');\n            itemsContainer.innerHTML = html;\n            if (focusedItemPlaylistId !== null) {\n                focusedItemPlaylistId = focusedItemPlaylistId.getAttribute('data-playlistitemid');\n                const newFocusedItem = itemsContainer.querySelector(`button[data-playlistitemid=\"${focusedItemPlaylistId}\"]`);\n                if (newFocusedItem !== null) {\n                    newFocusedItem.focus();\n                }\n            }\n\n            const playlistItemId = playbackManager.getCurrentPlaylistItemId(player);\n\n            if (playlistItemId) {\n                const img = itemsContainer.querySelector(`.listItem[data-playlistItemId=\"${playlistItemId}\"] .listItemImage`);\n\n                if (img) {\n                    img.classList.remove('lazy');\n                    img.classList.add('playlistIndexIndicatorImage');\n                }\n            }\n\n            imageLoader.lazyChildren(itemsContainer);\n        });\n    }\n\n    function onPlaybackStart(e, state) {\n        console.debug('remotecontrol event: ' + e.type);\n        const player = this;\n        onStateChanged.call(player, e, state);\n    }\n\n    function onRepeatModeChange() {\n        updateRepeatModeDisplay(playbackManager.getRepeatMode());\n    }\n\n    function onShuffleQueueModeChange(updateView = true) {\n        const shuffleMode = playbackManager.getQueueShuffleMode(this);\n        const context = dlg;\n        const cssClass = 'buttonActive';\n        const shuffleButtons = context.querySelectorAll('.btnShuffleQueue');\n\n        for (const shuffleButton of shuffleButtons) {\n            switch (shuffleMode) {\n                case 'Shuffle':\n                    shuffleButton.classList.add(cssClass);\n                    break;\n                case 'Sorted':\n                default:\n                    shuffleButton.classList.remove(cssClass);\n                    break;\n            }\n        }\n\n        if (updateView) {\n            onPlaylistUpdate();\n        }\n    }\n\n    function onPlaylistUpdate(e) {\n        loadPlaylist(dlg, this);\n    }\n\n    function onPlaylistItemRemoved(e, info) {\n        const context = dlg;\n        if (info !== undefined) {\n            const playlistItemIds = info.playlistItemIds;\n\n            for (let i = 0, length = playlistItemIds.length; i < length; i++) {\n                const listItem = context.querySelector('.listItem[data-playlistItemId=\"' + playlistItemIds[i] + '\"]');\n\n                if (listItem) {\n                    listItem.parentNode.removeChild(listItem);\n                }\n            }\n        } else {\n            onPlaylistUpdate();\n        }\n    }\n\n    function onPlaybackStopped(e, state) {\n        console.debug('remotecontrol event: ' + e.type);\n        const player = this;\n\n        if (!state.NextMediaType) {\n            updatePlayerState(player, dlg, {});\n            Emby.Page.back();\n        }\n    }\n\n    function onPlayPauseStateChanged(e) {\n        updatePlayPauseState(this.paused(), true);\n    }\n\n    function onStateChanged(event, state) {\n        const player = this;\n        updatePlayerState(player, dlg, state);\n        onPlaylistUpdate();\n    }\n\n    function onTimeUpdate(e) {\n        const now = new Date().getTime();\n\n        if (!(now - lastUpdateTime < 700)) {\n            lastUpdateTime = now;\n            const player = this;\n            currentRuntimeTicks = playbackManager.duration(player);\n            updateTimeDisplay(playbackManager.currentTime(player), currentRuntimeTicks);\n        }\n    }\n\n    function onVolumeChanged(e) {\n        const player = this;\n        updatePlayerVolumeState(dlg, player.isMuted(), player.getVolume());\n    }\n\n    function releaseCurrentPlayer() {\n        const player = currentPlayer;\n\n        if (player) {\n            events.off(player, 'playbackstart', onPlaybackStart);\n            events.off(player, 'statechange', onStateChanged);\n            events.off(player, 'repeatmodechange', onRepeatModeChange);\n            events.off(player, 'shufflequeuemodechange', onShuffleQueueModeChange);\n            events.off(player, 'playlistitemremove', onPlaylistItemRemoved);\n            events.off(player, 'playlistitemmove', onPlaylistUpdate);\n            events.off(player, 'playlistitemadd', onPlaylistUpdate);\n            events.off(player, 'playbackstop', onPlaybackStopped);\n            events.off(player, 'volumechange', onVolumeChanged);\n            events.off(player, 'pause', onPlayPauseStateChanged);\n            events.off(player, 'unpause', onPlayPauseStateChanged);\n            events.off(player, 'timeupdate', onTimeUpdate);\n            currentPlayer = null;\n        }\n    }\n\n    function bindToPlayer(context, player) {\n        if (releaseCurrentPlayer(), currentPlayer = player, player) {\n            const state = playbackManager.getPlayerState(player);\n            onStateChanged.call(player, {\n                type: 'init'\n            }, state);\n            events.on(player, 'playbackstart', onPlaybackStart);\n            events.on(player, 'statechange', onStateChanged);\n            events.on(player, 'repeatmodechange', onRepeatModeChange);\n            events.on(player, 'shufflequeuemodechange', onShuffleQueueModeChange);\n            events.on(player, 'playlistitemremove', onPlaylistItemRemoved);\n            events.on(player, 'playlistitemmove', onPlaylistUpdate);\n            events.on(player, 'playlistitemadd', onPlaylistUpdate);\n            events.on(player, 'playbackstop', onPlaybackStopped);\n            events.on(player, 'volumechange', onVolumeChanged);\n            events.on(player, 'pause', onPlayPauseStateChanged);\n            events.on(player, 'unpause', onPlayPauseStateChanged);\n            events.on(player, 'timeupdate', onTimeUpdate);\n            const playerInfo = playbackManager.getPlayerInfo();\n            const supportedCommands = playerInfo.supportedCommands;\n            currentPlayerSupportedCommands = supportedCommands;\n            updateSupportedCommands(context, supportedCommands);\n        }\n    }\n\n    function onBtnCommandClick() {\n        if (currentPlayer) {\n            if (this.classList.contains('repeatToggleButton')) {\n                toggleRepeat();\n            } else {\n                playbackManager.sendCommand({\n                    Name: this.getAttribute('data-command')\n                }, currentPlayer);\n            }\n        }\n    }\n\n    function getSaveablePlaylistItems() {\n        return getPlaylistItems(currentPlayer).then(function (items) {\n            return items.filter(function (i) {\n                return i.Id && i.ServerId;\n            });\n        });\n    }\n\n    function savePlaylist() {\n        import('playlistEditor').then(({ default: playlistEditor }) => {\n            getSaveablePlaylistItems().then(function (items) {\n                const serverId = items.length ? items[0].ServerId : ApiClient.serverId();\n                new playlistEditor({\n                    items: items.map(function (i) {\n                        return i.Id;\n                    }),\n                    serverId: serverId,\n                    enableAddToPlayQueue: false,\n                    defaultValue: 'new'\n                });\n            });\n        });\n    }\n\n    function bindEvents(context) {\n        const btnCommand = context.querySelectorAll('.btnCommand');\n        const positionSlider = context.querySelector('.nowPlayingPositionSlider');\n\n        for (let i = 0, length = btnCommand.length; i < length; i++) {\n            btnCommand[i].addEventListener('click', onBtnCommandClick);\n        }\n\n        context.querySelector('.btnToggleFullscreen').addEventListener('click', function (e) {\n            if (currentPlayer) {\n                playbackManager.sendCommand({\n                    Name: e.target.getAttribute('data-command')\n                }, currentPlayer);\n            }\n        });\n        context.querySelector('.btnAudioTracks').addEventListener('click', function (e) {\n            if (currentPlayer && lastPlayerState && lastPlayerState.NowPlayingItem) {\n                showAudioMenu(context, currentPlayer, e.target, lastPlayerState.NowPlayingItem);\n            }\n        });\n        context.querySelector('.btnSubtitles').addEventListener('click', function (e) {\n            if (currentPlayer && lastPlayerState && lastPlayerState.NowPlayingItem) {\n                showSubtitleMenu(context, currentPlayer, e.target, lastPlayerState.NowPlayingItem);\n            }\n        });\n        context.querySelector('.btnStop').addEventListener('click', function () {\n            if (currentPlayer) {\n                playbackManager.stop(currentPlayer);\n            }\n        });\n        context.querySelector('.btnPlayPause').addEventListener('click', function () {\n            if (currentPlayer) {\n                playbackManager.playPause(currentPlayer);\n            }\n        });\n        context.querySelector('.btnNextTrack').addEventListener('click', function () {\n            if (currentPlayer) {\n                playbackManager.nextTrack(currentPlayer);\n            }\n        });\n        context.querySelector('.btnRewind').addEventListener('click', function () {\n            if (currentPlayer) {\n                playbackManager.rewind(currentPlayer);\n            }\n        });\n        context.querySelector('.btnFastForward').addEventListener('click', function () {\n            if (currentPlayer) {\n                playbackManager.fastForward(currentPlayer);\n            }\n        });\n        for (const shuffleButton of context.querySelectorAll('.btnShuffleQueue')) {\n            shuffleButton.addEventListener('click', function () {\n                if (currentPlayer) {\n                    playbackManager.toggleQueueShuffleMode(currentPlayer);\n                }\n            });\n        }\n\n        context.querySelector('.btnPreviousTrack').addEventListener('click', function (e) {\n            if (currentPlayer) {\n                if (lastPlayerState.NowPlayingItem.MediaType === 'Audio' && (currentPlayer._currentTime >= 5 || !playbackManager.previousTrack(currentPlayer))) {\n                    // Cancel this event if doubleclick is fired\n                    if (e.detail > 1 && playbackManager.previousTrack(currentPlayer)) {\n                        return;\n                    }\n                    playbackManager.seekPercent(0, currentPlayer);\n                    // This is done automatically by playbackManager. However, setting this here gives instant visual feedback.\n                    // TODO: Check why seekPercentage doesn't reflect the changes inmmediately, so we can remove this workaround.\n                    positionSlider.value = 0;\n                } else {\n                    playbackManager.previousTrack(currentPlayer);\n                }\n            }\n        });\n\n        context.querySelector('.btnPreviousTrack').addEventListener('dblclick', function () {\n            if (currentPlayer) {\n                playbackManager.previousTrack(currentPlayer);\n            }\n        });\n        positionSlider.addEventListener('change', function () {\n            const value = this.value;\n\n            if (currentPlayer) {\n                const newPercent = parseFloat(value);\n                playbackManager.seekPercent(newPercent, currentPlayer);\n            }\n        });\n\n        positionSlider.getBubbleText = function (value) {\n            const state = lastPlayerState;\n\n            if (!state || !state.NowPlayingItem || !currentRuntimeTicks) {\n                return '--:--';\n            }\n\n            let ticks = currentRuntimeTicks;\n            ticks /= 100;\n            ticks *= value;\n            return datetime.getDisplayRunningTime(ticks);\n        };\n\n        context.querySelector('.nowPlayingVolumeSlider').addEventListener('input', (e) => {\n            playbackManager.setVolume(e.target.value, currentPlayer);\n        });\n\n        context.querySelector('.buttonMute').addEventListener('click', function () {\n            playbackManager.toggleMute(currentPlayer);\n        });\n        const playlistContainer = context.querySelector('.playlist');\n        playlistContainer.addEventListener('action-remove', function (e) {\n            playbackManager.removeFromPlaylist([e.detail.playlistItemId], currentPlayer);\n        });\n        playlistContainer.addEventListener('itemdrop', function (e) {\n            const newIndex = e.detail.newIndex;\n            const playlistItemId = e.detail.playlistItemId;\n            playbackManager.movePlaylistItem(playlistItemId, newIndex, currentPlayer);\n        });\n        context.querySelector('.btnSavePlaylist').addEventListener('click', savePlaylist);\n        context.querySelector('.btnTogglePlaylist').addEventListener('click', function () {\n            if (context.querySelector('.playlist').classList.contains('hide')) {\n                context.querySelector('.playlist').classList.remove('hide');\n                context.querySelector('.btnSavePlaylist').classList.remove('hide');\n                context.querySelector('.volumecontrol').classList.add('hide');\n                if (layoutManager.mobile) {\n                    context.querySelector('.playlistSectionButton').classList.remove('playlistSectionButtonTransparent');\n                }\n            } else {\n                context.querySelector('.playlist').classList.add('hide');\n                context.querySelector('.btnSavePlaylist').classList.add('hide');\n                if (showMuteButton || showVolumeSlider) {\n                    context.querySelector('.volumecontrol').classList.remove('hide');\n                }\n                if (layoutManager.mobile) {\n                    context.querySelector('.playlistSectionButton').classList.add('playlistSectionButtonTransparent');\n                }\n            }\n        });\n    }\n\n    function onPlayerChange() {\n        bindToPlayer(dlg, playbackManager.getCurrentPlayer());\n    }\n\n    function onMessageSubmit(e) {\n        const form = e.target;\n        playbackManager.sendCommand({\n            Name: 'DisplayMessage',\n            Arguments: {\n                Header: form.querySelector('#txtMessageTitle').value,\n                Text: form.querySelector('#txtMessageText', form).value\n            }\n        }, currentPlayer);\n        form.querySelector('input').value = '';\n\n        import('toast').then(({ default: toast }) => {\n            toast('Message sent.');\n        });\n\n        e.preventDefault();\n        e.stopPropagation();\n        return false;\n    }\n\n    function onSendStringSubmit(e) {\n        const form = e.target;\n        playbackManager.sendCommand({\n            Name: 'SendString',\n            Arguments: {\n                String: form.querySelector('#txtTypeText', form).value\n            }\n        }, currentPlayer);\n        form.querySelector('input').value = '';\n\n        import('toast').then(({ default: toast }) => {\n            toast('Text sent.');\n        });\n\n        e.preventDefault();\n        e.stopPropagation();\n        return false;\n    }\n\n    function init(ownerView, context) {\n        let volumecontrolHtml = '<div class=\"volumecontrol flex align-items-center flex-wrap-wrap justify-content-center\">';\n        volumecontrolHtml += `<button is=\"paper-icon-button-light\" class=\"buttonMute autoSize\" title=${globalize.translate('Mute')}><span class=\"xlargePaperIconButton material-icons volume_up\"></span></button>`;\n        volumecontrolHtml += '<div class=\"sliderContainer nowPlayingVolumeSliderContainer\"><input is=\"emby-slider\" type=\"range\" step=\"1\" min=\"0\" max=\"100\" value=\"0\" class=\"nowPlayingVolumeSlider\"/></div>';\n        volumecontrolHtml += '</div>';\n        const optionsSection = context.querySelector('.playlistSectionButton');\n        if (!layoutManager.mobile) {\n            context.querySelector('.nowPlayingSecondaryButtons').insertAdjacentHTML('beforeend', volumecontrolHtml);\n            optionsSection.classList.remove('align-items-center', 'justify-content-center');\n            optionsSection.classList.add('align-items-right', 'justify-content-flex-end');\n            context.querySelector('.playlist').classList.remove('hide');\n            context.querySelector('.btnSavePlaylist').classList.remove('hide');\n            context.classList.add('padded-bottom');\n        } else {\n            optionsSection.querySelector('.btnTogglePlaylist').insertAdjacentHTML('afterend', volumecontrolHtml);\n            optionsSection.classList.add('playlistSectionButtonTransparent');\n            context.querySelector('.btnTogglePlaylist').classList.remove('hide');\n            context.querySelector('.playlistSectionButton').classList.remove('justify-content-center');\n            context.querySelector('.playlistSectionButton').classList.add('justify-content-space-between');\n        }\n\n        bindEvents(context);\n        context.querySelector('.sendMessageForm').addEventListener('submit', onMessageSubmit);\n        context.querySelector('.typeTextForm').addEventListener('submit', onSendStringSubmit);\n        events.on(playbackManager, 'playerchange', onPlayerChange);\n\n        if (layoutManager.tv) {\n            const positionSlider = context.querySelector('.nowPlayingPositionSlider');\n            positionSlider.classList.add('focusable');\n            positionSlider.enableKeyboardDragging();\n        }\n    }\n\n    function onDialogClosed(e) {\n        releaseCurrentPlayer();\n        events.off(playbackManager, 'playerchange', onPlayerChange);\n        lastPlayerState = null;\n    }\n\n    function onShow(context, tab) {\n        bindToPlayer(context, playbackManager.getCurrentPlayer());\n    }\n\n    let dlg;\n    let currentPlayer;\n    let lastPlayerState;\n    let currentPlayerSupportedCommands = [];\n    let lastUpdateTime = 0;\n    let currentRuntimeTicks = 0;\n    const self = this;\n\n    self.init = function (ownerView, context) {\n        dlg = context;\n        init(ownerView, dlg);\n    };\n\n    self.onShow = function () {\n        onShow(dlg, window.location.hash);\n    };\n\n    self.destroy = function () {\n        onDialogClosed();\n    };\n}\n"]}