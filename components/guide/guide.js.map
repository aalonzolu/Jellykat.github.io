{"version":3,"sources":["components/guide/guide.js"],"names":["define","_require","_exports","_inputManager","_browser","_globalize","_connectionManager","_scrollHelper","_serverNotifications","_loading","_datetime","_focusManager","_playbackManager","userSettings","_imageLoader","_events","_layoutManager","_itemShortcuts","_dom","_guide","_programStyles","_materialIcons","_scrollStyles","_embyProgramcell","_embyButton","_paperIconButtonLight","_embyTabs","_embyScroller","_flexStyles","_webcomponents","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","from","test","length","i","F","s","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","arr","len","arr2","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","desc","set","updateProgramCellOnScroll","cell","scrollPct","left","posLeft","parseFloat","style","replace","width","posWidth","right","pctOfWidth","Math","max","min","guideProgramName","querySelector","caret","transform","classList","remove","add","isUpdatingProgramCellScroll","updateProgramCellsOnScroll","programGrid","programCells","requestAnimationFrame","_step","scrollLeft","scrollWidth","_iterator","onProgramGridClick","layoutManager","tv","programCell","dom","parentWithClass","target","startDate","getAttribute","endDate","datetime","parseISO8601Date","toLocal","getTime","now","Date","channelId","serverId","preventDefault","stopPropagation","playbackManager","play","ids","_default","Guide","options","self","this","items","categoryOptions","categories","currentDate","autoRefreshInterval","lastFocusDirection","currentStartIndex","currentChannelLimit","restartAutoRefresh","stopAutoRefresh","setInterval","refresh","clearInterval","showLoading","loading","show","reloadGuide","context","newStartDate","scrollToTimeMs","focusToTimeMs","startTimeOfDayMs","focusProgramOnRender","apiClient","connectionManager","getApiClient","channelQuery","StartIndex","EnableFavoriteSorting","UserId","getCurrentUserId","Limit","AddCurrentProgram","EnableUserData","EnableImageTypes","displayMovieContent","indexOf","displaySportsContent","displayNewsContent","displayKidsContent","displaySeriesContent","IsMovie","IsSports","IsKids","IsNews","IsSeries","SortBy","SortOrder","date","nextDay","allowIndicators","getWindowSize","innerWidth","renderOptions","showHdIcon","showLiveIndicator","showPremiereIndicator","showNewIndicator","showRepeatIndicator","showEpisodeTitle","getLiveTvChannels","then","channelsResult","btnPreviousPage","btnNextPage","TotalRecordCount","disabled","programFields","programQuery","MaxStartDate","toISOString","MinEndDate","channelIds","Items","map","c","Id","join","ImageTypeLimit","EnableImages","EnableTotalRecordCount","push","Fields","getLiveTvPrograms","programsResult","renderGuide","channels","programs","sort","a","b","getProgramSortOrder","activeElement","document","itemId","channelRowId","renderChannelHeaders","_step2","html","_iterator2","channel","hasChannelImage","ImageTags","Primary","cssClass","title","ChannelNumber","Name","IsFolder","ServerId","Type","url","getScaledImageUrl","maxHeight","tag","type","channelList","innerHTML","imageLoader","lazyChildren","getTimeslotHeadersHtml","endDateTime","getDisplayTime","setTime","cellCurationMinutes","renderPrograms","_step3","listInfo","startIndex","_iterator3","getChannelProgramsHtml","querySelectorAll","focusProgram","focusElem","focusManager","focus","autoFocusParent","pct","nextSibling","autoFocus","scrollProgramGridToTimeMs","scrollTop","scrollPos","nativeScrollTo","hideLoading","hide","toLowerCase","parseDates","program","StartDateLocal","StartDate","console","error","EndDateLocal","EndDate","getTimerIndicator","item","status","TimerId","SeriesTimerId","Status","startMs","endMs","programsFound","clickAction","enableColorCodedBackgrounds","ChannelId","startDateLocalMs","endDateLocalMs","renderStartMs","startPercent","endPercent","accentCssClass","displayInnerContent","timerAttributes","indicatorHtml","IsLive","globalize","translate","IsPremiere","IsRepeat","EpisodeTitle","IsHD","channelIndex","container","pos","horizontal","scrollTo","round","reloadPage","element","pause","resume","refreshData","destroy","events","off","serverNotifications","onTimerCreated","onSeriesTimerCreated","onTimerCancelled","onSeriesTimerCancelled","setScrollEvents","itemShortcuts","lastGridScroll","lastHeaderScroll","scrollXPct","changeDate","page","normalizeDateToTimeslot","getMinutes","setHours","getHours","getDateTabText","isActive","tabIndex","tabText","toLocaleDateString","weekday","getDate","getLiveTvGuideInfo","guideInfo","setDateRange","today","nowHours","start","end","setDate","dateTabsHtml","getMonth","getFullYear","newDate","newDateHours","minutes","getChannelProgramsFocusableElements","_step4","elements","list","currentScrollXPct","_iterator4","elem","onInputCommand","focusableElements","newRow","detail","command","previousSibling","moveUp","moveDown","moveLeft","moveRight","onScrollerFocus","id","trigger","scrollHelper","toStart","toCenter","verticalScroller","focusedElement","parentWithTag","view","enabled","guideVerticalScroller","inputManager","on","data","_step5","programId","ProgramId","newTimerId","_iterator5","insertAdjacentHTML","setAttribute","_step6","_iterator6","icon","parentNode","removeChild","removeAttribute","_step7","_iterator7","Promise","_resolve","_reject","imported","_ref2","template","translateHtml","timeslotHeaders","addEventListener","capture","passive","desktop","browser","iOS","osx","onProgramGridScroll","onTimeslotHeadersScroll","showViewSettings","instance","_ref","allTabButtons","tabButton","parseInt","selectedTabIndex","previousButton","previousIndex","previousDate"],"mappings":"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","file":"guide.js","sourcesContent":["import inputManager from 'inputManager';\nimport browser from 'browser';\nimport globalize from 'globalize';\nimport connectionManager from 'connectionManager';\nimport scrollHelper from 'scrollHelper';\nimport serverNotifications from 'serverNotifications';\nimport loading from 'loading';\nimport datetime from 'datetime';\nimport focusManager from 'focusManager';\nimport playbackManager from 'playbackManager';\nimport * as userSettings from 'userSettings';\nimport imageLoader from 'imageLoader';\nimport events from 'events';\nimport layoutManager from 'layoutManager';\nimport itemShortcuts from 'itemShortcuts';\nimport dom from 'dom';\nimport 'css!./guide.css';\nimport 'programStyles';\nimport 'material-icons';\nimport 'scrollStyles';\nimport 'emby-programcell';\nimport 'emby-button';\nimport 'paper-icon-button-light';\nimport 'emby-tabs';\nimport 'emby-scroller';\nimport 'flexStyles';\nimport 'webcomponents';\n\nfunction showViewSettings(instance) {\n    import('guide-settings-dialog').then(({default: guideSettingsDialog}) => {\n        guideSettingsDialog.show(instance.categoryOptions).then(function () {\n            instance.refresh();\n        });\n    });\n}\n\nfunction updateProgramCellOnScroll(cell, scrollPct) {\n    let left = cell.posLeft;\n    if (!left) {\n        left = parseFloat(cell.style.left.replace('%', ''));\n        cell.posLeft = left;\n    }\n    let width = cell.posWidth;\n    if (!width) {\n        width = parseFloat(cell.style.width.replace('%', ''));\n        cell.posWidth = width;\n    }\n\n    const right = left + width;\n    const newPct = Math.max(Math.min(scrollPct, right), left);\n\n    const offset = newPct - left;\n    const pctOfWidth = (offset / width) * 100;\n\n    let guideProgramName = cell.guideProgramName;\n    if (!guideProgramName) {\n        guideProgramName = cell.querySelector('.guideProgramName');\n        cell.guideProgramName = guideProgramName;\n    }\n\n    let caret = cell.caret;\n    if (!caret) {\n        caret = cell.querySelector('.guide-programNameCaret');\n        cell.caret = caret;\n    }\n\n    if (guideProgramName) {\n        if (pctOfWidth > 0 && pctOfWidth <= 100) {\n            guideProgramName.style.transform = 'translateX(' + pctOfWidth + '%)';\n            caret.classList.remove('hide');\n        } else {\n            guideProgramName.style.transform = 'none';\n            caret.classList.add('hide');\n        }\n    }\n}\n\nlet isUpdatingProgramCellScroll = false;\nfunction updateProgramCellsOnScroll(programGrid, programCells) {\n    if (isUpdatingProgramCellScroll) {\n        return;\n    }\n\n    isUpdatingProgramCellScroll = true;\n\n    requestAnimationFrame(function () {\n        const scrollLeft = programGrid.scrollLeft;\n\n        const scrollPct = scrollLeft ? (scrollLeft / programGrid.scrollWidth) * 100 : 0;\n\n        for (const programCell of programCells) {\n            updateProgramCellOnScroll(programCell, scrollPct);\n        }\n\n        isUpdatingProgramCellScroll = false;\n    });\n}\n\nfunction onProgramGridClick(e) {\n    if (!layoutManager.tv) {\n        return;\n    }\n\n    const programCell = dom.parentWithClass(e.target, 'programCell');\n    if (programCell) {\n        let startDate = programCell.getAttribute('data-startdate');\n        let endDate = programCell.getAttribute('data-enddate');\n        startDate = datetime.parseISO8601Date(startDate, { toLocal: true }).getTime();\n        endDate = datetime.parseISO8601Date(endDate, { toLocal: true }).getTime();\n\n        const now = new Date().getTime();\n        if (now >= startDate && now < endDate) {\n            const channelId = programCell.getAttribute('data-channelid');\n            const serverId = programCell.getAttribute('data-serverid');\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            playbackManager.play({\n                ids: [channelId],\n                serverId: serverId\n            });\n        }\n    }\n}\n\nfunction Guide(options) {\n    const self = this;\n    let items = {};\n\n    self.options = options;\n    self.categoryOptions = { categories: [] };\n\n    // 30 mins\n    const cellCurationMinutes = 30;\n    const cellDurationMs = cellCurationMinutes * 60 * 1000;\n    const msPerDay = 86400000;\n\n    let currentDate;\n    let currentStartIndex = 0;\n    let currentChannelLimit = 0;\n    let autoRefreshInterval;\n    let programCells;\n    let lastFocusDirection;\n    let programGrid;\n\n    self.refresh = function () {\n        currentDate = null;\n        reloadPage(options.element);\n        restartAutoRefresh();\n    };\n\n    self.pause = function () {\n        stopAutoRefresh();\n    };\n\n    self.resume = function (refreshData) {\n        if (refreshData) {\n            self.refresh();\n        } else {\n            restartAutoRefresh();\n        }\n    };\n\n    self.destroy = function () {\n        stopAutoRefresh();\n\n        events.off(serverNotifications, 'TimerCreated', onTimerCreated);\n        events.off(serverNotifications, 'SeriesTimerCreated', onSeriesTimerCreated);\n        events.off(serverNotifications, 'TimerCancelled', onTimerCancelled);\n        events.off(serverNotifications, 'SeriesTimerCancelled', onSeriesTimerCancelled);\n\n        setScrollEvents(options.element, false);\n        itemShortcuts.off(options.element);\n        items = {};\n    };\n\n    function restartAutoRefresh() {\n        stopAutoRefresh();\n\n        const intervalMs = 60000 * 15; // (minutes)\n\n        autoRefreshInterval = setInterval(function () {\n            self.refresh();\n        }, intervalMs);\n    }\n\n    function stopAutoRefresh() {\n        if (autoRefreshInterval) {\n            clearInterval(autoRefreshInterval);\n            autoRefreshInterval = null;\n        }\n    }\n\n    function normalizeDateToTimeslot(date) {\n        const minutesOffset = date.getMinutes() - cellCurationMinutes;\n\n        if (minutesOffset >= 0) {\n            date.setHours(date.getHours(), cellCurationMinutes, 0, 0);\n        } else {\n            date.setHours(date.getHours(), 0, 0, 0);\n        }\n\n        return date;\n    }\n\n    function showLoading() {\n        loading.show();\n    }\n\n    function hideLoading() {\n        loading.hide();\n    }\n\n    function reloadGuide(context, newStartDate, scrollToTimeMs, focusToTimeMs, startTimeOfDayMs, focusProgramOnRender) {\n        const apiClient = connectionManager.getApiClient(options.serverId);\n\n        const channelQuery = {\n\n            StartIndex: 0,\n            EnableFavoriteSorting: userSettings.get('livetv-favoritechannelsattop') !== 'false'\n        };\n\n        channelQuery.UserId = apiClient.getCurrentUserId();\n\n        const channelLimit = 500;\n        currentChannelLimit = channelLimit;\n\n        showLoading();\n\n        channelQuery.StartIndex = currentStartIndex;\n        channelQuery.Limit = channelLimit;\n        channelQuery.AddCurrentProgram = false;\n        channelQuery.EnableUserData = false;\n        channelQuery.EnableImageTypes = 'Primary';\n\n        const categories = self.categoryOptions.categories || [];\n        const displayMovieContent = !categories.length || categories.indexOf('movies') !== -1;\n        const displaySportsContent = !categories.length || categories.indexOf('sports') !== -1;\n        const displayNewsContent = !categories.length || categories.indexOf('news') !== -1;\n        const displayKidsContent = !categories.length || categories.indexOf('kids') !== -1;\n        const displaySeriesContent = !categories.length || categories.indexOf('series') !== -1;\n\n        if (displayMovieContent && displaySportsContent && displayNewsContent && displayKidsContent) {\n            channelQuery.IsMovie = null;\n            channelQuery.IsSports = null;\n            channelQuery.IsKids = null;\n            channelQuery.IsNews = null;\n            channelQuery.IsSeries = null;\n        } else {\n            if (displayNewsContent) {\n                channelQuery.IsNews = true;\n            }\n            if (displaySportsContent) {\n                channelQuery.IsSports = true;\n            }\n            if (displayKidsContent) {\n                channelQuery.IsKids = true;\n            }\n            if (displayMovieContent) {\n                channelQuery.IsMovie = true;\n            }\n            if (displaySeriesContent) {\n                channelQuery.IsSeries = true;\n            }\n        }\n\n        if (userSettings.get('livetv-channelorder') === 'DatePlayed') {\n            channelQuery.SortBy = 'DatePlayed';\n            channelQuery.SortOrder = 'Descending';\n        } else {\n            channelQuery.SortBy = null;\n            channelQuery.SortOrder = null;\n        }\n\n        let date = newStartDate;\n        // Add one second to avoid getting programs that are just ending\n        date = new Date(date.getTime() + 1000);\n\n        // Subtract to avoid getting programs that are starting when the grid ends\n        const nextDay = new Date(date.getTime() + msPerDay - 2000);\n\n        // Normally we'd want to just let responsive css handle this,\n        // but since mobile browsers are often underpowered,\n        // it can help performance to get them out of the markup\n        const allowIndicators = dom.getWindowSize().innerWidth >= 600;\n\n        const renderOptions = {\n            showHdIcon: allowIndicators && userSettings.get('guide-indicator-hd') === 'true',\n            showLiveIndicator: allowIndicators && userSettings.get('guide-indicator-live') !== 'false',\n            showPremiereIndicator: allowIndicators && userSettings.get('guide-indicator-premiere') !== 'false',\n            showNewIndicator: allowIndicators && userSettings.get('guide-indicator-new') !== 'false',\n            showRepeatIndicator: allowIndicators && userSettings.get('guide-indicator-repeat') === 'true',\n            showEpisodeTitle: layoutManager.tv ? false : true\n        };\n\n        apiClient.getLiveTvChannels(channelQuery).then(function (channelsResult) {\n            const btnPreviousPage = context.querySelector('.btnPreviousPage');\n            const btnNextPage = context.querySelector('.btnNextPage');\n\n            if (channelsResult.TotalRecordCount > channelLimit) {\n                context.querySelector('.guideOptions').classList.remove('hide');\n\n                btnPreviousPage.classList.remove('hide');\n                btnNextPage.classList.remove('hide');\n\n                if (channelQuery.StartIndex) {\n                    context.querySelector('.btnPreviousPage').disabled = false;\n                } else {\n                    context.querySelector('.btnPreviousPage').disabled = true;\n                }\n\n                if ((channelQuery.StartIndex + channelLimit) < channelsResult.TotalRecordCount) {\n                    btnNextPage.disabled = false;\n                } else {\n                    btnNextPage.disabled = true;\n                }\n            } else {\n                context.querySelector('.guideOptions').classList.add('hide');\n            }\n\n            const programFields = [];\n\n            const programQuery = {\n                UserId: apiClient.getCurrentUserId(),\n                MaxStartDate: nextDay.toISOString(),\n                MinEndDate: date.toISOString(),\n                channelIds: channelsResult.Items.map(function (c) {\n                    return c.Id;\n                }).join(','),\n                ImageTypeLimit: 1,\n                EnableImages: false,\n                //EnableImageTypes: layoutManager.tv ? \"Primary,Backdrop\" : \"Primary\",\n                SortBy: 'StartDate',\n                EnableTotalRecordCount: false,\n                EnableUserData: false\n            };\n\n            if (renderOptions.showHdIcon) {\n                programFields.push('IsHD');\n            }\n\n            if (programFields.length) {\n                programQuery.Fields = programFields.join('');\n            }\n\n            apiClient.getLiveTvPrograms(programQuery).then(function (programsResult) {\n                renderGuide(context, date, channelsResult.Items, programsResult.Items, renderOptions, apiClient, scrollToTimeMs, focusToTimeMs, startTimeOfDayMs, focusProgramOnRender);\n\n                hideLoading();\n            });\n        });\n    }\n\n    function getDisplayTime(date) {\n        if ((typeof date).toString().toLowerCase() === 'string') {\n            try {\n                date = datetime.parseISO8601Date(date, { toLocal: true });\n            } catch (err) {\n                return date;\n            }\n        }\n\n        return datetime.getDisplayTime(date).toLowerCase();\n    }\n\n    function getTimeslotHeadersHtml(startDate, endDateTime) {\n        let html = '';\n\n        // clone\n        startDate = new Date(startDate.getTime());\n\n        html += '<div class=\"timeslotHeadersInner\">';\n\n        while (startDate.getTime() < endDateTime) {\n            html += '<div class=\"timeslotHeader\">';\n\n            html += getDisplayTime(startDate);\n            html += '</div>';\n\n            // Add 30 mins\n            startDate.setTime(startDate.getTime() + cellDurationMs);\n        }\n\n        return html;\n    }\n\n    function parseDates(program) {\n        if (!program.StartDateLocal) {\n            try {\n                program.StartDateLocal = datetime.parseISO8601Date(program.StartDate, { toLocal: true });\n            } catch (err) {\n                console.error('error parsing timestamp for start date');\n            }\n        }\n\n        if (!program.EndDateLocal) {\n            try {\n                program.EndDateLocal = datetime.parseISO8601Date(program.EndDate, { toLocal: true });\n            } catch (err) {\n                console.error('error parsing timestamp for end date');\n            }\n        }\n\n        return null;\n    }\n\n    function getTimerIndicator(item) {\n        let status;\n\n        if (item.Type === 'SeriesTimer') {\n            return '<span class=\"material-icons programIcon seriesTimerIcon fiber_smart_record\"></span>';\n        } else if (item.TimerId || item.SeriesTimerId) {\n            status = item.Status || 'Cancelled';\n        } else if (item.Type === 'Timer') {\n            status = item.Status;\n        } else {\n            return '';\n        }\n\n        if (item.SeriesTimerId) {\n            if (status !== 'Cancelled') {\n                return '<span class=\"material-icons programIcon seriesTimerIcon fiber_smart_record\"></span>';\n            }\n\n            return '<span class=\"material-icons programIcon seriesTimerIcon seriesTimerIcon-inactive fiber_smart_record\"></span>';\n        }\n\n        return '<span class=\"material-icons programIcon timerIcon fiber_manual_record\"></span>';\n    }\n\n    function getChannelProgramsHtml(context, date, channel, programs, options, listInfo) {\n        let html = '';\n\n        const startMs = date.getTime();\n        const endMs = startMs + msPerDay - 1;\n\n        const outerCssClass = layoutManager.tv ? 'channelPrograms channelPrograms-tv' : 'channelPrograms';\n\n        html += '<div class=\"' + outerCssClass + '\" data-channelid=\"' + channel.Id + '\">';\n\n        const clickAction = layoutManager.tv ? 'link' : 'programdialog';\n\n        const categories = self.categoryOptions.categories || [];\n        const displayMovieContent = !categories.length || categories.indexOf('movies') !== -1;\n        const displaySportsContent = !categories.length || categories.indexOf('sports') !== -1;\n        const displayNewsContent = !categories.length || categories.indexOf('news') !== -1;\n        const displayKidsContent = !categories.length || categories.indexOf('kids') !== -1;\n        const displaySeriesContent = !categories.length || categories.indexOf('series') !== -1;\n        const enableColorCodedBackgrounds = userSettings.get('guide-colorcodedbackgrounds') === 'true';\n\n        let programsFound;\n        const now = new Date().getTime();\n\n        for (let i = listInfo.startIndex, length = programs.length; i < length; i++) {\n            const program = programs[i];\n\n            if (program.ChannelId !== channel.Id) {\n                if (programsFound) {\n                    break;\n                }\n\n                continue;\n            }\n\n            programsFound = true;\n            listInfo.startIndex++;\n\n            parseDates(program);\n\n            const startDateLocalMs = program.StartDateLocal.getTime();\n            const endDateLocalMs = program.EndDateLocal.getTime();\n\n            if (endDateLocalMs < startMs) {\n                continue;\n            }\n\n            if (startDateLocalMs > endMs) {\n                break;\n            }\n\n            items[program.Id] = program;\n\n            const renderStartMs = Math.max(startDateLocalMs, startMs);\n            let startPercent = (startDateLocalMs - startMs) / msPerDay;\n            startPercent *= 100;\n            startPercent = Math.max(startPercent, 0);\n\n            const renderEndMs = Math.min(endDateLocalMs, endMs);\n            let endPercent = (renderEndMs - renderStartMs) / msPerDay;\n            endPercent *= 100;\n\n            let cssClass = 'programCell itemAction';\n            let accentCssClass = null;\n            let displayInnerContent = true;\n\n            if (program.IsKids) {\n                displayInnerContent = displayKidsContent;\n                accentCssClass = 'kids';\n            } else if (program.IsSports) {\n                displayInnerContent = displaySportsContent;\n                accentCssClass = 'sports';\n            } else if (program.IsNews) {\n                displayInnerContent = displayNewsContent;\n                accentCssClass = 'news';\n            } else if (program.IsMovie) {\n                displayInnerContent = displayMovieContent;\n                accentCssClass = 'movie';\n            } else if (program.IsSeries) {\n                displayInnerContent = displaySeriesContent;\n            } else {\n                displayInnerContent = displayMovieContent && displayNewsContent && displaySportsContent && displayKidsContent && displaySeriesContent;\n            }\n\n            if (displayInnerContent && enableColorCodedBackgrounds && accentCssClass) {\n                cssClass += ' programCell-' + accentCssClass;\n            }\n\n            if (now >= startDateLocalMs && now < endDateLocalMs) {\n                cssClass += ' programCell-active';\n            }\n\n            let timerAttributes = '';\n            if (program.TimerId) {\n                timerAttributes += ' data-timerid=\"' + program.TimerId + '\"';\n            }\n            if (program.SeriesTimerId) {\n                timerAttributes += ' data-seriestimerid=\"' + program.SeriesTimerId + '\"';\n            }\n\n            const isAttribute = endPercent >= 2 ? ' is=\"emby-programcell\"' : '';\n\n            html += '<button' + isAttribute + ' data-action=\"' + clickAction + '\"' + timerAttributes + ' data-channelid=\"' + program.ChannelId + '\" data-id=\"' + program.Id + '\" data-serverid=\"' + program.ServerId + '\" data-startdate=\"' + program.StartDate + '\" data-enddate=\"' + program.EndDate + '\" data-type=\"' + program.Type + '\" class=\"' + cssClass + '\" style=\"left:' + startPercent + '%;width:' + endPercent + '%;\">';\n\n            if (displayInnerContent) {\n                const guideProgramNameClass = 'guideProgramName';\n\n                html += '<div class=\"' + guideProgramNameClass + '\">';\n\n                html += '<div class=\"guide-programNameCaret hide\"><span class=\"guideProgramNameCaretIcon material-icons keyboard_arrow_left\"></span></div>';\n\n                html += '<div class=\"guideProgramNameText\">' + program.Name;\n\n                let indicatorHtml = null;\n                if (program.IsLive && options.showLiveIndicator) {\n                    indicatorHtml = '<span class=\"liveTvProgram guideProgramIndicator\">' + globalize.translate('Live') + '</span>';\n                } else if (program.IsPremiere && options.showPremiereIndicator) {\n                    indicatorHtml = '<span class=\"premiereTvProgram guideProgramIndicator\">' + globalize.translate('Premiere') + '</span>';\n                } else if (program.IsSeries && !program.IsRepeat && options.showNewIndicator) {\n                    indicatorHtml = '<span class=\"newTvProgram guideProgramIndicator\">' + globalize.translate('New') + '</span>';\n                } else if (program.IsSeries && program.IsRepeat && options.showRepeatIndicator) {\n                    indicatorHtml = '<span class=\"repeatTvProgram guideProgramIndicator\">' + globalize.translate('Repeat') + '</span>';\n                }\n                html += indicatorHtml || '';\n\n                if ((program.EpisodeTitle && options.showEpisodeTitle)) {\n                    html += '<div class=\"guideProgramSecondaryInfo\">';\n\n                    if (program.EpisodeTitle && options.showEpisodeTitle) {\n                        html += '<span class=\"programSecondaryTitle\">' + program.EpisodeTitle + '</span>';\n                    }\n                    html += '</div>';\n                }\n\n                html += '</div>';\n\n                if (program.IsHD && options.showHdIcon) {\n                    if (layoutManager.tv) {\n                        html += '<div class=\"programIcon guide-programTextIcon guide-programTextIcon-tv\">HD</div>';\n                    } else {\n                        html += '<div class=\"programIcon guide-programTextIcon\">HD</div>';\n                    }\n                }\n\n                html += getTimerIndicator(program);\n\n                html += '</div>';\n            }\n\n            html += '</button>';\n        }\n\n        html += '</div>';\n\n        return html;\n    }\n\n    function renderChannelHeaders(context, channels, apiClient) {\n        let html = '';\n\n        for (const channel of channels) {\n            const hasChannelImage = channel.ImageTags.Primary;\n\n            let cssClass = 'guide-channelHeaderCell itemAction';\n\n            if (layoutManager.tv) {\n                cssClass += ' guide-channelHeaderCell-tv';\n            }\n\n            const title = [];\n            if (channel.ChannelNumber) {\n                title.push(channel.ChannelNumber);\n            }\n            if (channel.Name) {\n                title.push(channel.Name);\n            }\n\n            html += '<button title=\"' + title.join(' ') + '\" type=\"button\" class=\"' + cssClass + '\"' + ' data-action=\"link\" data-isfolder=\"' + channel.IsFolder + '\" data-id=\"' + channel.Id + '\" data-serverid=\"' + channel.ServerId + '\" data-type=\"' + channel.Type + '\">';\n\n            if (hasChannelImage) {\n                const url = apiClient.getScaledImageUrl(channel.Id, {\n                    maxHeight: 220,\n                    tag: channel.ImageTags.Primary,\n                    type: 'Primary'\n                });\n\n                html += '<div class=\"guideChannelImage lazy\" data-src=\"' + url + '\"></div>';\n            }\n\n            if (channel.ChannelNumber) {\n                html += '<h3 class=\"guideChannelNumber\">' + channel.ChannelNumber + '</h3>';\n            }\n\n            if (!hasChannelImage && channel.Name) {\n                html += '<div class=\"guideChannelName\">' + channel.Name + '</div>';\n            }\n\n            html += '</button>';\n        }\n\n        const channelList = context.querySelector('.channelsContainer');\n        channelList.innerHTML = html;\n        imageLoader.lazyChildren(channelList);\n    }\n\n    function renderPrograms(context, date, channels, programs, options) {\n        const listInfo = {\n            startIndex: 0\n        };\n\n        const html = [];\n\n        for (const channel of channels) {\n            html.push(getChannelProgramsHtml(context, date, channel, programs, options, listInfo));\n        }\n\n        programGrid.innerHTML = html.join('');\n\n        programCells = programGrid.querySelectorAll('[is=emby-programcell]');\n\n        updateProgramCellsOnScroll(programGrid, programCells);\n    }\n\n    function getProgramSortOrder(program, channels) {\n        const channelId = program.ChannelId;\n        let channelIndex = -1;\n\n        for (let i = 0, length = channels.length; i < length; i++) {\n            if (channelId === channels[i].Id) {\n                channelIndex = i;\n                break;\n            }\n        }\n\n        const start = datetime.parseISO8601Date(program.StartDate, { toLocal: true });\n\n        return (channelIndex * 10000000) + (start.getTime() / 60000);\n    }\n\n    function renderGuide(context, date, channels, programs, renderOptions, apiClient, scrollToTimeMs, focusToTimeMs, startTimeOfDayMs, focusProgramOnRender) {\n        programs.sort(function (a, b) {\n            return getProgramSortOrder(a, channels) - getProgramSortOrder(b, channels);\n        });\n\n        const activeElement = document.activeElement;\n        const itemId = activeElement && activeElement.getAttribute ? activeElement.getAttribute('data-id') : null;\n        let channelRowId = null;\n\n        if (activeElement) {\n            channelRowId = dom.parentWithClass(activeElement, 'channelPrograms');\n            channelRowId = channelRowId && channelRowId.getAttribute ? channelRowId.getAttribute('data-channelid') : null;\n        }\n\n        renderChannelHeaders(context, channels, apiClient);\n\n        const startDate = date;\n        const endDate = new Date(startDate.getTime() + msPerDay);\n        context.querySelector('.timeslotHeaders').innerHTML = getTimeslotHeadersHtml(startDate, endDate);\n        items = {};\n        renderPrograms(context, date, channels, programs, renderOptions);\n\n        if (focusProgramOnRender) {\n            focusProgram(context, itemId, channelRowId, focusToTimeMs, startTimeOfDayMs);\n        }\n\n        scrollProgramGridToTimeMs(context, scrollToTimeMs, startTimeOfDayMs);\n    }\n\n    function scrollProgramGridToTimeMs(context, scrollToTimeMs, startTimeOfDayMs) {\n        scrollToTimeMs -= startTimeOfDayMs;\n\n        const pct = scrollToTimeMs / msPerDay;\n\n        programGrid.scrollTop = 0;\n\n        const scrollPos = pct * programGrid.scrollWidth;\n\n        nativeScrollTo(programGrid, scrollPos, true);\n    }\n\n    function focusProgram(context, itemId, channelRowId, focusToTimeMs, startTimeOfDayMs) {\n        let focusElem;\n        if (itemId) {\n            focusElem = context.querySelector('[data-id=\"' + itemId + '\"]');\n        }\n\n        if (focusElem) {\n            focusManager.focus(focusElem);\n        } else {\n            let autoFocusParent;\n\n            if (channelRowId) {\n                autoFocusParent = context.querySelector('[data-channelid=\"' + channelRowId + '\"]');\n            }\n\n            if (!autoFocusParent) {\n                autoFocusParent = programGrid;\n            }\n\n            focusToTimeMs -= startTimeOfDayMs;\n\n            const pct = (focusToTimeMs / msPerDay) * 100;\n\n            let programCell = autoFocusParent.querySelector('.programCell');\n\n            while (programCell) {\n                let left = (programCell.style.left || '').replace('%', '');\n                left = left ? parseFloat(left) : 0;\n                let width = (programCell.style.width || '').replace('%', '');\n                width = width ? parseFloat(width) : 0;\n\n                if (left >= pct || (left + width) >= pct) {\n                    break;\n                }\n                programCell = programCell.nextSibling;\n            }\n\n            if (programCell) {\n                focusManager.focus(programCell);\n            } else {\n                focusManager.autoFocus(autoFocusParent, true);\n            }\n        }\n    }\n\n    function nativeScrollTo(container, pos, horizontal) {\n        if (container.scrollTo) {\n            if (horizontal) {\n                container.scrollTo(pos, 0);\n            } else {\n                container.scrollTo(0, pos);\n            }\n        } else {\n            if (horizontal) {\n                container.scrollLeft = Math.round(pos);\n            } else {\n                container.scrollTop = Math.round(pos);\n            }\n        }\n    }\n\n    let lastGridScroll = 0;\n    let lastHeaderScroll = 0;\n    let scrollXPct = 0;\n    function onProgramGridScroll(context, elem, timeslotHeaders) {\n        if ((new Date().getTime() - lastHeaderScroll) >= 1000) {\n            lastGridScroll = new Date().getTime();\n\n            const scrollLeft = elem.scrollLeft;\n            scrollXPct = (scrollLeft * 100) / elem.scrollWidth;\n            nativeScrollTo(timeslotHeaders, scrollLeft, true);\n        }\n\n        updateProgramCellsOnScroll(elem, programCells);\n    }\n\n    function onTimeslotHeadersScroll(context, elem) {\n        if ((new Date().getTime() - lastGridScroll) >= 1000) {\n            lastHeaderScroll = new Date().getTime();\n            nativeScrollTo(programGrid, elem.scrollLeft, true);\n        }\n    }\n\n    function changeDate(page, date, scrollToTimeMs, focusToTimeMs, startTimeOfDayMs, focusProgramOnRender) {\n        const newStartDate = normalizeDateToTimeslot(date);\n        currentDate = newStartDate;\n\n        reloadGuide(page, newStartDate, scrollToTimeMs, focusToTimeMs, startTimeOfDayMs, focusProgramOnRender);\n    }\n\n    function getDateTabText(date, isActive, tabIndex) {\n        const cssClass = isActive ? 'emby-tab-button guide-date-tab-button emby-tab-button-active' : 'emby-tab-button guide-date-tab-button';\n\n        let html = '<button is=\"emby-button\" class=\"' + cssClass + '\" data-index=\"' + tabIndex + '\" data-date=\"' + date.getTime() + '\">';\n        let tabText = datetime.toLocaleDateString(date, { weekday: 'short' });\n\n        tabText += '<br/>';\n        tabText += date.getDate();\n        html += '<div class=\"emby-button-foreground\">' + tabText + '</div>';\n        html += '</button>';\n\n        return html;\n    }\n\n    function setDateRange(page, guideInfo) {\n        const today = new Date();\n        const nowHours = today.getHours();\n        today.setHours(nowHours, 0, 0, 0);\n\n        let start = datetime.parseISO8601Date(guideInfo.StartDate, { toLocal: true });\n        const end = datetime.parseISO8601Date(guideInfo.EndDate, { toLocal: true });\n\n        start.setHours(nowHours, 0, 0, 0);\n        end.setHours(0, 0, 0, 0);\n\n        if (start.getTime() >= end.getTime()) {\n            end.setDate(start.getDate() + 1);\n        }\n\n        start = new Date(Math.max(today, start));\n\n        let dateTabsHtml = '';\n        let tabIndex = 0;\n\n        // TODO: Use date-fns\n        const date = new Date();\n\n        if (currentDate) {\n            date.setTime(currentDate.getTime());\n        }\n\n        date.setHours(nowHours, 0, 0, 0);\n\n        let startTimeOfDayMs = (start.getHours() * 60 * 60 * 1000);\n        startTimeOfDayMs += start.getMinutes() * 60 * 1000;\n\n        while (start <= end) {\n            const isActive = date.getDate() === start.getDate() && date.getMonth() === start.getMonth() && date.getFullYear() === start.getFullYear();\n\n            dateTabsHtml += getDateTabText(start, isActive, tabIndex);\n\n            start.setDate(start.getDate() + 1);\n            start.setHours(0, 0, 0, 0);\n            tabIndex++;\n        }\n\n        page.querySelector('.emby-tabs-slider').innerHTML = dateTabsHtml;\n        page.querySelector('.guideDateTabs').refresh();\n\n        const newDate = new Date();\n        const newDateHours = newDate.getHours();\n        let scrollToTimeMs = newDateHours * 60 * 60 * 1000;\n\n        const minutes = newDate.getMinutes();\n        if (minutes >= 30) {\n            scrollToTimeMs += 30 * 60 * 1000;\n        }\n\n        const focusToTimeMs = ((newDateHours * 60) + minutes) * 60 * 1000;\n        changeDate(page, date, scrollToTimeMs, focusToTimeMs, startTimeOfDayMs, layoutManager.tv);\n    }\n\n    function reloadPage(page) {\n        showLoading();\n\n        const apiClient = connectionManager.getApiClient(options.serverId);\n\n        apiClient.getLiveTvGuideInfo().then(function (guideInfo) {\n            setDateRange(page, guideInfo);\n        });\n    }\n\n    function getChannelProgramsFocusableElements(container) {\n        const elements = container.querySelectorAll('.programCell');\n\n        const list = [];\n        // add 1 to avoid programs that are out of view to the left\n        const currentScrollXPct = scrollXPct + 1;\n\n        for (const elem of elements) {\n            let left = (elem.style.left || '').replace('%', '');\n            left = left ? parseFloat(left) : 0;\n\n            let width = (elem.style.width || '').replace('%', '');\n            width = width ? parseFloat(width) : 0;\n\n            if ((left + width) >= currentScrollXPct) {\n                list.push(elem);\n            }\n        }\n\n        return list;\n    }\n\n    function onInputCommand(e) {\n        const target = e.target;\n        const programCell = dom.parentWithClass(target, 'programCell');\n        let container;\n        let channelPrograms;\n        let focusableElements;\n        let newRow;\n\n        switch (e.detail.command) {\n            case 'up':\n                if (programCell) {\n                    container = programGrid;\n                    channelPrograms = dom.parentWithClass(programCell, 'channelPrograms');\n\n                    newRow = channelPrograms.previousSibling;\n                    if (newRow) {\n                        focusableElements = getChannelProgramsFocusableElements(newRow);\n                        if (focusableElements.length) {\n                            container = newRow;\n                        } else {\n                            focusableElements = null;\n                        }\n                    } else {\n                        container = null;\n                    }\n                } else {\n                    container = null;\n                }\n                lastFocusDirection = e.detail.command;\n\n                focusManager.moveUp(target, {\n                    container: container,\n                    focusableElements: focusableElements\n                });\n                break;\n            case 'down':\n                if (programCell) {\n                    container = programGrid;\n                    channelPrograms = dom.parentWithClass(programCell, 'channelPrograms');\n\n                    newRow = channelPrograms.nextSibling;\n                    if (newRow) {\n                        focusableElements = getChannelProgramsFocusableElements(newRow);\n                        if (focusableElements.length) {\n                            container = newRow;\n                        } else {\n                            focusableElements = null;\n                        }\n                    } else {\n                        container = null;\n                    }\n                } else {\n                    container = null;\n                }\n                lastFocusDirection = e.detail.command;\n\n                focusManager.moveDown(target, {\n                    container: container,\n                    focusableElements: focusableElements\n                });\n                break;\n            case 'left':\n                container = programCell ? dom.parentWithClass(programCell, 'channelPrograms') : null;\n                // allow left outside the channelProgramsContainer when the first child is currently focused\n                if (container && !programCell.previousSibling) {\n                    container = null;\n                }\n                lastFocusDirection = e.detail.command;\n\n                focusManager.moveLeft(target, {\n                    container: container\n                });\n                break;\n            case 'right':\n                container = programCell ? dom.parentWithClass(programCell, 'channelPrograms') : null;\n                lastFocusDirection = e.detail.command;\n\n                focusManager.moveRight(target, {\n                    container: container\n                });\n                break;\n            default:\n                return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    function onScrollerFocus(e) {\n        const target = e.target;\n        const programCell = dom.parentWithClass(target, 'programCell');\n\n        if (programCell) {\n            const focused = target;\n\n            const id = focused.getAttribute('data-id');\n            const item = items[id];\n\n            if (item) {\n                events.trigger(self, 'focus', [\n                    {\n                        item: item\n                    }]);\n            }\n        }\n\n        if (lastFocusDirection === 'left') {\n            if (programCell) {\n                scrollHelper.toStart(programGrid, programCell, true, true);\n            }\n        } else if (lastFocusDirection === 'right') {\n            if (programCell) {\n                scrollHelper.toCenter(programGrid, programCell, true, true);\n            }\n        } else if (lastFocusDirection === 'up' || lastFocusDirection === 'down') {\n            const verticalScroller = dom.parentWithClass(target, 'guideVerticalScroller');\n            if (verticalScroller) {\n                const focusedElement = programCell || dom.parentWithTag(target, 'BUTTON');\n                verticalScroller.toCenter(focusedElement, true);\n            }\n        }\n    }\n\n    function setScrollEvents(view, enabled) {\n        if (layoutManager.tv) {\n            const guideVerticalScroller = view.querySelector('.guideVerticalScroller');\n\n            if (enabled) {\n                inputManager.on(guideVerticalScroller, onInputCommand);\n            } else {\n                inputManager.off(guideVerticalScroller, onInputCommand);\n            }\n        }\n    }\n\n    function onTimerCreated(e, apiClient, data) {\n        const programId = data.ProgramId;\n        // This could be null, not supported by all tv providers\n        const newTimerId = data.Id;\n\n        // find guide cells by program id, ensure timer icon\n        const cells = options.element.querySelectorAll('.programCell[data-id=\"' + programId + '\"]');\n        for (const cell of cells) {\n            const icon = cell.querySelector('.timerIcon');\n            if (!icon) {\n                cell.querySelector('.guideProgramName').insertAdjacentHTML('beforeend', '<span class=\"timerIcon material-icons programIcon fiber_manual_record\"></span>');\n            }\n\n            if (newTimerId) {\n                cell.setAttribute('data-timerid', newTimerId);\n            }\n        }\n    }\n\n    function onSeriesTimerCreated(e, apiClient, data) {\n    }\n\n    function onTimerCancelled(e, apiClient, data) {\n        const id = data.Id;\n        // find guide cells by timer id, remove timer icon\n        const cells = options.element.querySelectorAll('.programCell[data-timerid=\"' + id + '\"]');\n\n        for (const cell of cells) {\n            const icon = cell.querySelector('.timerIcon');\n\n            if (icon) {\n                icon.parentNode.removeChild(icon);\n            }\n\n            cell.removeAttribute('data-timerid');\n        }\n    }\n\n    function onSeriesTimerCancelled(e, apiClient, data) {\n        const id = data.Id;\n        // find guide cells by timer id, remove timer icon\n        const cells = options.element.querySelectorAll('.programCell[data-seriestimerid=\"' + id + '\"]');\n\n        for (const cell of cells) {\n            const icon = cell.querySelector('.seriesTimerIcon');\n\n            if (icon) {\n                icon.parentNode.removeChild(icon);\n            }\n\n            cell.removeAttribute('data-seriestimerid');\n        }\n    }\n\n    import('text!./tvguide.template.html').then(({default: template}) => {\n        const context = options.element;\n\n        context.classList.add('tvguide');\n\n        context.innerHTML = globalize.translateHtml(template, 'core');\n\n        programGrid = context.querySelector('.programGrid');\n        const timeslotHeaders = context.querySelector('.timeslotHeaders');\n\n        if (layoutManager.tv) {\n            dom.addEventListener(context.querySelector('.guideVerticalScroller'), 'focus', onScrollerFocus, {\n                capture: true,\n                passive: true\n            });\n        } else if (layoutManager.desktop) {\n            timeslotHeaders.classList.add('timeslotHeaders-desktop');\n        }\n\n        if (browser.iOS || browser.osx) {\n            context.querySelector('.channelsContainer').classList.add('noRubberBanding');\n\n            programGrid.classList.add('noRubberBanding');\n        }\n\n        dom.addEventListener(programGrid, 'scroll', function (e) {\n            onProgramGridScroll(context, this, timeslotHeaders);\n        }, {\n            passive: true\n        });\n\n        dom.addEventListener(timeslotHeaders, 'scroll', function () {\n            onTimeslotHeadersScroll(context, this);\n        }, {\n            passive: true\n        });\n\n        programGrid.addEventListener('click', onProgramGridClick);\n\n        context.querySelector('.btnNextPage').addEventListener('click', function () {\n            currentStartIndex += currentChannelLimit;\n            reloadPage(context);\n            restartAutoRefresh();\n        });\n\n        context.querySelector('.btnPreviousPage').addEventListener('click', function () {\n            currentStartIndex = Math.max(currentStartIndex - currentChannelLimit, 0);\n            reloadPage(context);\n            restartAutoRefresh();\n        });\n\n        context.querySelector('.btnGuideViewSettings').addEventListener('click', function () {\n            showViewSettings(self);\n            restartAutoRefresh();\n        });\n\n        context.querySelector('.guideDateTabs').addEventListener('tabchange', function (e) {\n            const allTabButtons = e.target.querySelectorAll('.guide-date-tab-button');\n\n            const tabButton = allTabButtons[parseInt(e.detail.selectedTabIndex)];\n            if (tabButton) {\n                const previousButton = e.detail.previousIndex == null ? null : allTabButtons[parseInt(e.detail.previousIndex)];\n\n                const date = new Date();\n                date.setTime(parseInt(tabButton.getAttribute('data-date')));\n\n                const scrollWidth = programGrid.scrollWidth;\n                let scrollToTimeMs;\n                if (scrollWidth) {\n                    scrollToTimeMs = (programGrid.scrollLeft / scrollWidth) * msPerDay;\n                } else {\n                    scrollToTimeMs = 0;\n                }\n\n                if (previousButton) {\n                    const previousDate = new Date();\n                    previousDate.setTime(parseInt(previousButton.getAttribute('data-date')));\n\n                    scrollToTimeMs += (previousDate.getHours() * 60 * 60 * 1000);\n                    scrollToTimeMs += (previousDate.getMinutes() * 60 * 1000);\n                }\n\n                let startTimeOfDayMs = (date.getHours() * 60 * 60 * 1000);\n                startTimeOfDayMs += (date.getMinutes() * 60 * 1000);\n\n                changeDate(context, date, scrollToTimeMs, scrollToTimeMs, startTimeOfDayMs, false);\n            }\n        });\n\n        setScrollEvents(context, true);\n        itemShortcuts.on(context);\n\n        events.trigger(self, 'load');\n\n        events.on(serverNotifications, 'TimerCreated', onTimerCreated);\n        events.on(serverNotifications, 'SeriesTimerCreated', onSeriesTimerCreated);\n        events.on(serverNotifications, 'TimerCancelled', onTimerCancelled);\n        events.on(serverNotifications, 'SeriesTimerCancelled', onSeriesTimerCancelled);\n\n        self.refresh();\n    });\n}\n\nexport default Guide;\n"]}