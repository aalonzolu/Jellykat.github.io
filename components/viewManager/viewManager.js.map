{"version":3,"sources":["components/viewManager/viewManager.js"],"names":["define","_exports","_viewContainer","_focusManager","_queryString","_layoutManager","_interopRequireDefault","obj","__esModule","default","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","currentView","dispatchPageEvents","onViewChange","view","options","isRestore","dispatchViewEvent","eventDetail","getViewEventDetail","layoutManager","mobile","activeElement","document","body","contains","focusManager","isCurrentlyFocusable","focus","autoFocus","dispatchEvent","CustomEvent","getProperties","getAttribute","split","eventInfo","eventName","isCancellable","detail","type","properties","bubbles","cancelable","eventResult","replace","url","index","indexOf","params","queryString","parse","substring","isRestored","state","value","viewContainer","setOnBeforeChange","newView","initComplete","controllerFactory","addEventListener","resetCachedViews","reset","_default","ViewManager","_classCallCheck","instance","Constructor","TypeError","this","_createClass","protoProps","staticProps","prototype","loadView","cancel","then","tryRestoreView","onViewChanging","Promise","reject","cancelled"],"mappings":"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","file":"viewManager.js","sourcesContent":["import viewContainer from 'viewContainer';\nimport focusManager from 'focusManager';\nimport queryString from 'queryString';\nimport layoutManager from 'layoutManager';\n\nlet currentView;\nlet dispatchPageEvents;\n\nviewContainer.setOnBeforeChange(function (newView, isRestored, options) {\n    const lastView = currentView;\n    if (lastView) {\n        const beforeHideResult = dispatchViewEvent(lastView, null, 'viewbeforehide', true);\n\n        if (!beforeHideResult) {\n            // todo: cancel\n        }\n    }\n\n    const eventDetail = getViewEventDetail(newView, options, isRestored);\n\n    if (!newView.initComplete) {\n        newView.initComplete = true;\n\n        if (typeof options.controllerFactory === 'function') {\n            new options.controllerFactory(newView, eventDetail.detail.params);\n        } else if (options.controllerFactory && typeof options.controllerFactory.default === 'function') {\n            new options.controllerFactory.default(newView, eventDetail.detail.params);\n        }\n\n        if (!options.controllerFactory || dispatchPageEvents) {\n            dispatchViewEvent(newView, eventDetail, 'viewinit');\n        }\n    }\n\n    dispatchViewEvent(newView, eventDetail, 'viewbeforeshow');\n});\n\nfunction onViewChange(view, options, isRestore) {\n    const lastView = currentView;\n    if (lastView) {\n        dispatchViewEvent(lastView, null, 'viewhide');\n    }\n\n    currentView = view;\n\n    const eventDetail = getViewEventDetail(view, options, isRestore);\n\n    if (!isRestore) {\n        if (options.autoFocus !== false) {\n            focusManager.autoFocus(view);\n        }\n    } else if (!layoutManager.mobile) {\n        if (view.activeElement && document.body.contains(view.activeElement) && focusManager.isCurrentlyFocusable(view.activeElement)) {\n            focusManager.focus(view.activeElement);\n        } else {\n            focusManager.autoFocus(view);\n        }\n    }\n\n    view.dispatchEvent(new CustomEvent('viewshow', eventDetail));\n\n    if (dispatchPageEvents) {\n        view.dispatchEvent(new CustomEvent('pageshow', eventDetail));\n    }\n}\n\nfunction getProperties(view) {\n    const props = view.getAttribute('data-properties');\n\n    if (props) {\n        return props.split(',');\n    }\n\n    return [];\n}\n\nfunction dispatchViewEvent(view, eventInfo, eventName, isCancellable) {\n    if (!eventInfo) {\n        eventInfo = {\n            detail: {\n                type: view.getAttribute('data-type'),\n                properties: getProperties(view)\n            },\n            bubbles: true,\n            cancelable: isCancellable\n        };\n    }\n\n    eventInfo.cancelable = isCancellable || false;\n\n    const eventResult = view.dispatchEvent(new CustomEvent(eventName, eventInfo));\n\n    if (dispatchPageEvents) {\n        eventInfo.cancelable = false;\n        view.dispatchEvent(new CustomEvent(eventName.replace('view', 'page'), eventInfo));\n    }\n\n    return eventResult;\n}\n\nfunction getViewEventDetail(view, options, isRestore) {\n    const url = options.url;\n    const index = url.indexOf('?');\n    const params = index === -1 ? {} : queryString.parse(url.substring(index + 1));\n\n    return {\n        detail: {\n            type: view.getAttribute('data-type'),\n            properties: getProperties(view),\n            params: params,\n            isRestored: isRestore,\n            state: options.state,\n\n            // The route options\n            options: options.options || {}\n        },\n        bubbles: true,\n        cancelable: false\n    };\n}\n\nfunction resetCachedViews() {\n    // Reset all cached views whenever the skin changes\n    viewContainer.reset();\n}\n\ndocument.addEventListener('skinunload', resetCachedViews);\n\nclass ViewManager {\n    loadView(options) {\n        const lastView = currentView;\n\n        // Record the element that has focus\n        if (lastView) {\n            lastView.activeElement = document.activeElement;\n        }\n\n        if (options.cancel) {\n            return;\n        }\n\n        viewContainer.loadView(options).then(function (view) {\n            onViewChange(view, options);\n        });\n    }\n\n    tryRestoreView(options, onViewChanging) {\n        if (options.cancel) {\n            return Promise.reject({ cancelled: true });\n        }\n\n        // Record the element that has focus\n        if (currentView) {\n            currentView.activeElement = document.activeElement;\n        }\n\n        return viewContainer.tryRestoreView(options).then(function (view) {\n            onViewChanging();\n            onViewChange(view, options, true);\n        });\n    }\n\n    currentView() {\n        return currentView;\n    }\n\n    dispatchPageEvents(value) {\n        dispatchPageEvents = value;\n    }\n}\n\nexport default new ViewManager();\n"]}