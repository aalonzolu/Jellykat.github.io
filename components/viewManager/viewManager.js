define(["exports","viewContainer","focusManager","queryString","layoutManager"],(function(_exports,_viewContainer,_focusManager,_queryString,_layoutManager){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var _currentView,_dispatchPageEvents;function onViewChange(view,options,isRestore){_currentView&&dispatchViewEvent(_currentView,null,"viewhide"),_currentView=view;var eventDetail=getViewEventDetail(view,options,isRestore);isRestore?_layoutManager.default.mobile||(view.activeElement&&document.body.contains(view.activeElement)&&_focusManager.default.isCurrentlyFocusable(view.activeElement)?_focusManager.default.focus(view.activeElement):_focusManager.default.autoFocus(view)):!1!==options.autoFocus&&_focusManager.default.autoFocus(view),view.dispatchEvent(new CustomEvent("viewshow",eventDetail)),_dispatchPageEvents&&view.dispatchEvent(new CustomEvent("pageshow",eventDetail))}function getProperties(view){var props=view.getAttribute("data-properties");return props?props.split(","):[]}function dispatchViewEvent(view,eventInfo,eventName,isCancellable){eventInfo||(eventInfo={detail:{type:view.getAttribute("data-type"),properties:getProperties(view)},bubbles:!0,cancelable:isCancellable}),eventInfo.cancelable=isCancellable||!1;var eventResult=view.dispatchEvent(new CustomEvent(eventName,eventInfo));return _dispatchPageEvents&&(eventInfo.cancelable=!1,view.dispatchEvent(new CustomEvent(eventName.replace("view","page"),eventInfo))),eventResult}function getViewEventDetail(view,options,isRestore){var url=options.url,index=url.indexOf("?"),params=-1===index?{}:_queryString.default.parse(url.substring(index+1));return{detail:{type:view.getAttribute("data-type"),properties:getProperties(view),params:params,isRestored:isRestore,state:options.state,options:options.options||{}},bubbles:!0,cancelable:!1}}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_viewContainer=_interopRequireDefault(_viewContainer),_focusManager=_interopRequireDefault(_focusManager),_queryString=_interopRequireDefault(_queryString),_layoutManager=_interopRequireDefault(_layoutManager),_viewContainer.default.setOnBeforeChange((function(newView,isRestored,options){if(_currentView)dispatchViewEvent(_currentView,null,"viewbeforehide",!0);var eventDetail=getViewEventDetail(newView,options,isRestored);newView.initComplete||(newView.initComplete=!0,"function"==typeof options.controllerFactory?new options.controllerFactory(newView,eventDetail.detail.params):options.controllerFactory&&"function"==typeof options.controllerFactory.default&&new options.controllerFactory.default(newView,eventDetail.detail.params),options.controllerFactory&&!_dispatchPageEvents||dispatchViewEvent(newView,eventDetail,"viewinit")),dispatchViewEvent(newView,eventDetail,"viewbeforeshow")})),document.addEventListener("skinunload",(function resetCachedViews(){_viewContainer.default.reset()}));var _default=new(function(){function ViewManager(){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,ViewManager)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(ViewManager,[{key:"loadView",value:function loadView(options){_currentView&&(_currentView.activeElement=document.activeElement),options.cancel||_viewContainer.default.loadView(options).then((function(view){onViewChange(view,options)}))}},{key:"tryRestoreView",value:function tryRestoreView(options,onViewChanging){return options.cancel?Promise.reject({cancelled:!0}):(_currentView&&(_currentView.activeElement=document.activeElement),_viewContainer.default.tryRestoreView(options).then((function(view){onViewChanging(),onViewChange(view,options,!0)})))}},{key:"currentView",value:function currentView(){return _currentView}},{key:"dispatchPageEvents",value:function dispatchPageEvents(value){_dispatchPageEvents=value}}]),ViewManager}());_exports.default=_default}));
//# sourceMappingURL=viewManager.js.map
