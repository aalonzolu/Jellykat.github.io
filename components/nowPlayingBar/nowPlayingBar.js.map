{"version":3,"sources":["components/nowPlayingBar/nowPlayingBar.js"],"names":["define","_require","_datetime","_events","_browser","_imageLoader","_layoutManager","_playbackManager","_nowPlayingHelper","_apphost","_dom","_connectionManager","_itemContextMenu","_paperIconButtonLight","_embyRatingbutton","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","Array","isArray","_iterableToArrayLimit","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","_unsupportedIterableToArray","o","minLen","_arrayLikeToArray","n","toString","call","slice","name","from","test","_nonIterableRest","TypeError","len","arr2","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","desc","set","currentPlayer","currentTimeElement","nowPlayingImageElement","nowPlayingTextElement","nowPlayingUserData","muteButton","volumeSlider","volumeSliderContainer","playPauseButtons","positionSlider","toggleRepeatButton","toggleRepeatButtonIcon","isEnabled","nowPlayingBarElement","currentImgUrl","currentPlayerSupportedCommands","lastUpdateTime","lastPlayerState","currentRuntimeTicks","isVisibilityAllowed","onSlideDownComplete","this","classList","add","slideUp","elem","dom","removeEventListener","whichTransitionEvent","once","remove","offsetWidth","onPlayPauseClick","playbackManager","playPause","bindEvents","querySelector","querySelectorAll","addEventListener","toggleMute","stop","forEach","button","nextTrack","e","NowPlayingItem","MediaType","_currentTime","previousTrack","detail","seekPercent","toggleQueueShuffleMode","getRepeatMode","setRepeatMode","toggle","appHost","supports","setVolume","target","newPercent","parseFloat","getBubbleText","ticks","datetime","getDisplayRunningTime","parentWithTag","showRemoteControl","Promise","_resolve","_reject","imported","then","_ref","showNowPlaying","getNowPlayingBar","resolve","reject","all","_ref2","_ref3","appfooter","itemShortcuts","parentContainer","element","insertAdjacentHTML","getNowPlayingBarHtml","html","layoutManager","mobile","hideButton","browser","safari","slow","on","updatePlayPauseState","isPaused","icon","updatePlayerStateInternal","event","state","player","showNowPlayingBar","hideNowPlayingBar","playerInfo","getPlayerInfo","playState","PlayState","IsPaused","supportedCommands","indexOf","updateRepeatModeDisplay","onQueueShuffleModeChange","updatePlayerVolumeState","IsMuted","VolumeLevel","dragging","disabled","CanSeek","isProgressClear","MediaSource","RunTimeTicks","setIsClear","nowPlayingItem","updateTimeDisplay","PositionTicks","getBufferedRanges","updateNowPlayingInfo","textLines","nowPlayingHelper","getNowPlayingNames","innerHTML","itemText","document","createElement","secondaryText","secondary","text","appendChild","url","seriesImageUrl","item","options","Error","Type","type","SeriesPrimaryImageTag","tag","connectionManager","getApiClient","ServerId","getScaledImageUrl","SeriesId","SeriesThumbImageTag","ParentThumbImageTag","ParentThumbItemId","height","imageUrl","ImageTags","PrimaryImageItemId","Id","AlbumId","AlbumPrimaryImageTag","isRefreshing","imageLoader","lazyImage","style","display","marginLeft","backgroundImage","apiClient","getItem","getCurrentUserId","userData","UserData","likes","Likes","contextButton","contextButtonClone","cloneNode","parentNode","replaceChild","play","queue","clearQueue","positionTo","getCurrentUser","user","itemContextMenu","show","assign","IsFavorite","repeatMode","positionTicks","runtimeTicks","bufferedRanges","pct","setBufferedRanges","timeText","isMuted","volumeLevel","showMuteButton","showVolumeSlider","muteButtonIcon","isLocalPlayer","showButton","onPlaybackStart","console","debug","onStateChanged","onRepeatModeChange","shuffleMode","getQueueShuffleMode","toggleShuffleButton","getElementsByClassName","slideDown","onPlaybackStopped","NextMediaType","onPlayPauseStateChanged","paused","tv","onTimeUpdate","now","Date","getTime","duration","currentTime","onVolumeChanged","getVolume","refreshFromPlayer","getPlayerState","bindToPlayer","releaseCurrentPlayer","events","off","getCurrentPlayer","enableMediaControl"],"mappings":"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","file":"nowPlayingBar.js","sourcesContent":["import datetime from 'datetime';\nimport events from 'events';\nimport browser from 'browser';\nimport imageLoader from 'imageLoader';\nimport layoutManager from 'layoutManager';\nimport playbackManager from 'playbackManager';\nimport nowPlayingHelper from 'nowPlayingHelper';\nimport appHost from 'apphost';\nimport dom from 'dom';\nimport connectionManager from 'connectionManager';\nimport itemContextMenu from 'itemContextMenu';\nimport 'paper-icon-button-light';\nimport 'emby-ratingbutton';\n\n/* eslint-disable indent */\n\n    let currentPlayer;\n    let currentPlayerSupportedCommands = [];\n\n    let currentTimeElement;\n    let nowPlayingImageElement;\n    let nowPlayingTextElement;\n    let nowPlayingUserData;\n    let muteButton;\n    let volumeSlider;\n    let volumeSliderContainer;\n    let playPauseButtons;\n    let positionSlider;\n    let toggleRepeatButton;\n    let toggleRepeatButtonIcon;\n\n    let lastUpdateTime = 0;\n    let lastPlayerState = {};\n    let isEnabled;\n    let currentRuntimeTicks = 0;\n\n    let isVisibilityAllowed = true;\n\n    function getNowPlayingBarHtml() {\n        let html = '';\n\n        html += '<div class=\"nowPlayingBar hide nowPlayingBar-hidden\">';\n\n        html += '<div class=\"nowPlayingBarTop\">';\n        html += '<div class=\"nowPlayingBarPositionContainer sliderContainer\">';\n        html += '<input type=\"range\" is=\"emby-slider\" pin step=\".01\" min=\"0\" max=\"100\" value=\"0\" class=\"slider-medium-thumb nowPlayingBarPositionSlider\" data-slider-keep-progress=\"true\"/>';\n        html += '</div>';\n\n        html += '<div class=\"nowPlayingBarInfoContainer\">';\n        html += '<div class=\"nowPlayingImage\"></div>';\n        html += '<div class=\"nowPlayingBarText\"></div>';\n        html += '</div>';\n\n        // The onclicks are needed due to the return false above\n        html += '<div class=\"nowPlayingBarCenter\">';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"previousTrackButton mediaButton\"><span class=\"material-icons skip_previous\"></span></button>';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"playPauseButton mediaButton\"><span class=\"material-icons pause\"></span></button>';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"stopButton mediaButton\"><span class=\"material-icons stop\"></span></button>';\n        if (!layoutManager.mobile) {\n            html += '<button is=\"paper-icon-button-light\" class=\"nextTrackButton mediaButton\"><span class=\"material-icons skip_next\"></span></button>';\n        }\n\n        html += '<div class=\"nowPlayingBarCurrentTime\"></div>';\n        html += '</div>';\n\n        html += '<div class=\"nowPlayingBarRight\">';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"muteButton mediaButton\"><span class=\"material-icons volume_up\"></span></button>';\n\n        html += '<div class=\"sliderContainer nowPlayingBarVolumeSliderContainer hide\" style=\"width:9em;vertical-align:middle;display:inline-flex;\">';\n        html += '<input type=\"range\" is=\"emby-slider\" pin step=\"1\" min=\"0\" max=\"100\" value=\"0\" class=\"slider-medium-thumb nowPlayingBarVolumeSlider\"/>';\n        html += '</div>';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"toggleRepeatButton mediaButton\"><span class=\"material-icons repeat\"></span></button>';\n        html += '<button is=\"paper-icon-button-light\" class=\"btnShuffleQueue mediaButton\"><span class=\"material-icons shuffle\"></span></button>';\n\n        html += '<div class=\"nowPlayingBarUserDataButtons\">';\n        html += '</div>';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"playPauseButton mediaButton\"><span class=\"material-icons pause\"></span></button>';\n        if (layoutManager.mobile) {\n            html += '<button is=\"paper-icon-button-light\" class=\"nextTrackButton mediaButton\"><span class=\"material-icons skip_next\"></span></button>';\n        } else {\n            html += '<button is=\"paper-icon-button-light\" class=\"btnToggleContextMenu mediaButton\"><span class=\"material-icons more_vert\"></span></button>';\n        }\n\n        html += '</div>';\n        html += '</div>';\n\n        html += '</div>';\n\n        return html;\n    }\n\n    function onSlideDownComplete() {\n        this.classList.add('hide');\n    }\n\n    function slideDown(elem) {\n        // trigger reflow\n        void elem.offsetWidth;\n\n        elem.classList.add('nowPlayingBar-hidden');\n\n        dom.addEventListener(elem, dom.whichTransitionEvent(), onSlideDownComplete, {\n            once: true\n        });\n    }\n\n    function slideUp(elem) {\n        dom.removeEventListener(elem, dom.whichTransitionEvent(), onSlideDownComplete, {\n            once: true\n        });\n\n        elem.classList.remove('hide');\n\n        // trigger reflow\n        void elem.offsetWidth;\n\n        elem.classList.remove('nowPlayingBar-hidden');\n    }\n\n    function onPlayPauseClick() {\n        playbackManager.playPause(currentPlayer);\n    }\n\n    function bindEvents(elem) {\n        currentTimeElement = elem.querySelector('.nowPlayingBarCurrentTime');\n        nowPlayingImageElement = elem.querySelector('.nowPlayingImage');\n        nowPlayingTextElement = elem.querySelector('.nowPlayingBarText');\n        nowPlayingUserData = elem.querySelector('.nowPlayingBarUserDataButtons');\n        positionSlider = elem.querySelector('.nowPlayingBarPositionSlider');\n        muteButton = elem.querySelector('.muteButton');\n        playPauseButtons = elem.querySelectorAll('.playPauseButton');\n        toggleRepeatButton = elem.querySelector('.toggleRepeatButton');\n        volumeSlider = elem.querySelector('.nowPlayingBarVolumeSlider');\n        volumeSliderContainer = elem.querySelector('.nowPlayingBarVolumeSliderContainer');\n\n        muteButton.addEventListener('click', function () {\n            if (currentPlayer) {\n                playbackManager.toggleMute(currentPlayer);\n            }\n        });\n\n        elem.querySelector('.stopButton').addEventListener('click', function () {\n            if (currentPlayer) {\n                playbackManager.stop(currentPlayer);\n            }\n        });\n\n        playPauseButtons.forEach((button) => {\n            button.addEventListener('click', onPlayPauseClick);\n        });\n\n        elem.querySelector('.nextTrackButton').addEventListener('click', function () {\n            if (currentPlayer) {\n                playbackManager.nextTrack(currentPlayer);\n            }\n        });\n\n        elem.querySelector('.previousTrackButton').addEventListener('click', function (e) {\n            if (currentPlayer) {\n                if (lastPlayerState.NowPlayingItem.MediaType === 'Audio' && (currentPlayer._currentTime >= 5 || !playbackManager.previousTrack(currentPlayer))) {\n                    // Cancel this event if doubleclick is fired\n                    if (e.detail > 1 && playbackManager.previousTrack(currentPlayer)) {\n                        return;\n                    }\n                    playbackManager.seekPercent(0, currentPlayer);\n                    // This is done automatically by playbackManager, however, setting this here gives instant visual feedback.\n                    // TODO: Check why seekPercentage doesn't reflect the changes inmmediately, so we can remove this workaround.\n                    positionSlider.value = 0;\n                } else {\n                    playbackManager.previousTrack(currentPlayer);\n                }\n            }\n        });\n\n        elem.querySelector('.previousTrackButton').addEventListener('dblclick', function () {\n            if (currentPlayer) {\n                playbackManager.previousTrack(currentPlayer);\n            }\n        });\n\n        elem.querySelector('.btnShuffleQueue').addEventListener('click', function () {\n            if (currentPlayer) {\n                playbackManager.toggleQueueShuffleMode();\n            }\n        });\n\n        toggleRepeatButton = elem.querySelector('.toggleRepeatButton');\n        toggleRepeatButton.addEventListener('click', function () {\n            switch (playbackManager.getRepeatMode()) {\n                case 'RepeatAll':\n                    playbackManager.setRepeatMode('RepeatOne');\n                    break;\n                case 'RepeatOne':\n                    playbackManager.setRepeatMode('RepeatNone');\n                    break;\n                case 'RepeatNone':\n                    playbackManager.setRepeatMode('RepeatAll');\n            }\n        });\n\n        toggleRepeatButtonIcon = toggleRepeatButton.querySelector('.material-icons');\n\n        volumeSliderContainer.classList.toggle('hide', appHost.supports('physicalvolumecontrol'));\n\n        volumeSlider.addEventListener('input', (e) => {\n            if (currentPlayer) {\n                currentPlayer.setVolume(e.target.value);\n            }\n        });\n\n        positionSlider.addEventListener('change', function () {\n            if (currentPlayer) {\n                const newPercent = parseFloat(this.value);\n\n                playbackManager.seekPercent(newPercent, currentPlayer);\n            }\n        });\n\n        positionSlider.getBubbleText = function (value) {\n            const state = lastPlayerState;\n\n            if (!state || !state.NowPlayingItem || !currentRuntimeTicks) {\n                return '--:--';\n            }\n\n            let ticks = currentRuntimeTicks;\n            ticks /= 100;\n            ticks *= value;\n\n            return datetime.getDisplayRunningTime(ticks);\n        };\n\n        elem.addEventListener('click', function (e) {\n            if (!dom.parentWithTag(e.target, ['BUTTON', 'INPUT'])) {\n                showRemoteControl();\n            }\n        });\n    }\n\n    function showRemoteControl() {\n        import('appRouter').then(({default: appRouter}) => {\n            appRouter.showNowPlaying();\n        });\n    }\n\n    let nowPlayingBarElement;\n    function getNowPlayingBar() {\n        if (nowPlayingBarElement) {\n            return Promise.resolve(nowPlayingBarElement);\n        }\n\n        return new Promise(function (resolve, reject) {\n            Promise.all([\n                import('appFooter-shared'),\n                import('itemShortcuts'),\n                import('css!./nowPlayingBar.css'),\n                import('emby-slider')\n            ])\n            .then(([appfooter, itemShortcuts]) => {\n                const parentContainer = appfooter.element;\n                nowPlayingBarElement = parentContainer.querySelector('.nowPlayingBar');\n\n                if (nowPlayingBarElement) {\n                    resolve(nowPlayingBarElement);\n                    return;\n                }\n\n                parentContainer.insertAdjacentHTML('afterbegin', getNowPlayingBarHtml());\n                nowPlayingBarElement = parentContainer.querySelector('.nowPlayingBar');\n\n                if (layoutManager.mobile) {\n                    hideButton(nowPlayingBarElement.querySelector('.btnShuffleQueue'));\n                    hideButton(nowPlayingBarElement.querySelector('.nowPlayingBarCenter'));\n                }\n\n                if (browser.safari && browser.slow) {\n                    // Not handled well here. The wrong elements receive events, bar doesn't update quickly enough, etc.\n                    nowPlayingBarElement.classList.add('noMediaProgress');\n                }\n\n                itemShortcuts.on(nowPlayingBarElement);\n\n                bindEvents(nowPlayingBarElement);\n                resolve(nowPlayingBarElement);\n            });\n        });\n    }\n\n    function showButton(button) {\n        button.classList.remove('hide');\n    }\n\n    function hideButton(button) {\n        button.classList.add('hide');\n    }\n\n    function updatePlayPauseState(isPaused) {\n        if (playPauseButtons) {\n            playPauseButtons.forEach((button) => {\n                const icon = button.querySelector('.material-icons');\n                icon.classList.remove('play_arrow', 'pause');\n                icon.classList.add(isPaused ? 'play_arrow' : 'pause');\n            });\n        }\n    }\n\n    function updatePlayerStateInternal(event, state, player) {\n        showNowPlayingBar();\n\n        lastPlayerState = state;\n\n        const playerInfo = playbackManager.getPlayerInfo();\n\n        const playState = state.PlayState || {};\n\n        updatePlayPauseState(playState.IsPaused);\n\n        const supportedCommands = playerInfo.supportedCommands;\n        currentPlayerSupportedCommands = supportedCommands;\n\n        if (supportedCommands.indexOf('SetRepeatMode') === -1) {\n            toggleRepeatButton.classList.add('hide');\n        } else {\n            toggleRepeatButton.classList.remove('hide');\n        }\n\n        updateRepeatModeDisplay(playbackManager.getRepeatMode());\n        onQueueShuffleModeChange();\n\n        updatePlayerVolumeState(playState.IsMuted, playState.VolumeLevel);\n\n        if (positionSlider && !positionSlider.dragging) {\n            positionSlider.disabled = !playState.CanSeek;\n\n            // determines if both forward and backward buffer progress will be visible\n            const isProgressClear = state.MediaSource && state.MediaSource.RunTimeTicks == null;\n            positionSlider.setIsClear(isProgressClear);\n        }\n\n        const nowPlayingItem = state.NowPlayingItem || {};\n        updateTimeDisplay(playState.PositionTicks, nowPlayingItem.RunTimeTicks, playbackManager.getBufferedRanges(player));\n\n        updateNowPlayingInfo(state);\n    }\n\n    function updateRepeatModeDisplay(repeatMode) {\n        toggleRepeatButtonIcon.classList.remove('repeat', 'repeat_one');\n        const cssClass = 'buttonActive';\n\n        switch (repeatMode) {\n            case 'RepeatAll':\n                toggleRepeatButtonIcon.classList.add('repeat');\n                toggleRepeatButton.classList.add(cssClass);\n                break;\n            case 'RepeatOne':\n                toggleRepeatButtonIcon.classList.add('repeat_one');\n                toggleRepeatButton.classList.add(cssClass);\n                break;\n            case 'RepeatNone':\n            default:\n                toggleRepeatButtonIcon.classList.add('repeat');\n                toggleRepeatButton.classList.remove(cssClass);\n                break;\n        }\n    }\n\n    function updateTimeDisplay(positionTicks, runtimeTicks, bufferedRanges) {\n        // See bindEvents for why this is necessary\n        if (positionSlider && !positionSlider.dragging) {\n            if (runtimeTicks) {\n                let pct = positionTicks / runtimeTicks;\n                pct *= 100;\n\n                positionSlider.value = pct;\n            } else {\n                positionSlider.value = 0;\n            }\n        }\n\n        if (positionSlider) {\n            positionSlider.setBufferedRanges(bufferedRanges, runtimeTicks, positionTicks);\n        }\n\n        if (currentTimeElement) {\n            let timeText = positionTicks == null ? '--:--' : datetime.getDisplayRunningTime(positionTicks);\n            if (runtimeTicks) {\n                timeText += ' / ' + datetime.getDisplayRunningTime(runtimeTicks);\n            }\n\n            currentTimeElement.innerHTML = timeText;\n        }\n    }\n\n    function updatePlayerVolumeState(isMuted, volumeLevel) {\n        const supportedCommands = currentPlayerSupportedCommands;\n\n        let showMuteButton = true;\n        let showVolumeSlider = true;\n\n        if (supportedCommands.indexOf('ToggleMute') === -1) {\n            showMuteButton = false;\n        }\n\n        const muteButtonIcon = muteButton.querySelector('.material-icons');\n        muteButtonIcon.classList.remove('volume_off', 'volume_up');\n        muteButtonIcon.classList.add(isMuted ? 'volume_off' : 'volume_up');\n\n        if (supportedCommands.indexOf('SetVolume') === -1) {\n            showVolumeSlider = false;\n        }\n\n        if (currentPlayer.isLocalPlayer && appHost.supports('physicalvolumecontrol')) {\n            showMuteButton = false;\n            showVolumeSlider = false;\n        }\n\n        if (showMuteButton) {\n            showButton(muteButton);\n        } else {\n            hideButton(muteButton);\n        }\n\n        // See bindEvents for why this is necessary\n        if (volumeSlider) {\n            volumeSliderContainer.classList.toggle('hide', !showVolumeSlider);\n\n            if (!volumeSlider.dragging) {\n                volumeSlider.value = volumeLevel || 0;\n            }\n        }\n    }\n\n    function seriesImageUrl(item, options) {\n        if (!item) {\n            throw new Error('item cannot be null!');\n        }\n\n        if (item.Type !== 'Episode') {\n            return null;\n        }\n\n        options = options || {};\n        options.type = options.type || 'Primary';\n\n        if (options.type === 'Primary') {\n            if (item.SeriesPrimaryImageTag) {\n                options.tag = item.SeriesPrimaryImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n            }\n        }\n\n        if (options.type === 'Thumb') {\n            if (item.SeriesThumbImageTag) {\n                options.tag = item.SeriesThumbImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n            }\n            if (item.ParentThumbImageTag) {\n                options.tag = item.ParentThumbImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.ParentThumbItemId, options);\n            }\n        }\n\n        return null;\n    }\n\n    function imageUrl(item, options) {\n        if (!item) {\n            throw new Error('item cannot be null!');\n        }\n\n        options = options || {};\n        options.type = options.type || 'Primary';\n\n        if (item.ImageTags && item.ImageTags[options.type]) {\n            options.tag = item.ImageTags[options.type];\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.PrimaryImageItemId || item.Id, options);\n        }\n\n        if (item.AlbumId && item.AlbumPrimaryImageTag) {\n            options.tag = item.AlbumPrimaryImageTag;\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.AlbumId, options);\n        }\n\n        return null;\n    }\n\n    let currentImgUrl;\n    function updateNowPlayingInfo(state) {\n        const nowPlayingItem = state.NowPlayingItem;\n\n        const textLines = nowPlayingItem ? nowPlayingHelper.getNowPlayingNames(nowPlayingItem) : [];\n        nowPlayingTextElement.innerHTML = '';\n        if (textLines) {\n            const itemText = document.createElement('div');\n            const secondaryText = document.createElement('div');\n            secondaryText.classList.add('nowPlayingBarSecondaryText');\n            if (textLines.length > 1) {\n                textLines[1].secondary = true;\n                if (textLines[1].text) {\n                    const text = document.createElement('a');\n                    text.innerHTML = textLines[1].text;\n                    secondaryText.appendChild(text);\n                }\n            }\n\n            if (textLines[0].text) {\n                const text = document.createElement('a');\n                text.innerHTML = textLines[0].text;\n                itemText.appendChild(text);\n            }\n            nowPlayingTextElement.appendChild(itemText);\n            nowPlayingTextElement.appendChild(secondaryText);\n        }\n\n        const imgHeight = 70;\n\n        const url = nowPlayingItem ? (seriesImageUrl(nowPlayingItem, {\n            height: imgHeight\n        }) || imageUrl(nowPlayingItem, {\n            height: imgHeight\n        })) : null;\n\n        let isRefreshing = false;\n\n        if (url !== currentImgUrl) {\n            currentImgUrl = url;\n            isRefreshing = true;\n\n            if (url) {\n                imageLoader.lazyImage(nowPlayingImageElement, url);\n                nowPlayingImageElement.style.display = null;\n                nowPlayingTextElement.style.marginLeft = null;\n            } else {\n                nowPlayingImageElement.style.backgroundImage = '';\n                nowPlayingImageElement.style.display = 'none';\n                nowPlayingTextElement.style.marginLeft = '1em';\n            }\n        }\n\n        if (nowPlayingItem.Id) {\n            if (isRefreshing) {\n                const apiClient = connectionManager.getApiClient(nowPlayingItem.ServerId);\n                apiClient.getItem(apiClient.getCurrentUserId(), nowPlayingItem.Id).then(function (item) {\n                    const userData = item.UserData || {};\n                    const likes = userData.Likes == null ? '' : userData.Likes;\n                    if (!layoutManager.mobile) {\n                        let contextButton = nowPlayingBarElement.querySelector('.btnToggleContextMenu');\n                        // We remove the previous event listener by replacing the item in each update event\n                        const contextButtonClone = contextButton.cloneNode(true);\n                        contextButton.parentNode.replaceChild(contextButtonClone, contextButton);\n                        contextButton = nowPlayingBarElement.querySelector('.btnToggleContextMenu');\n                        const options = {\n                            play: false,\n                            queue: false,\n                            clearQueue: true,\n                            positionTo: contextButton\n                        };\n                        apiClient.getCurrentUser().then(function (user) {\n                            contextButton.addEventListener('click', function () {\n                                itemContextMenu.show(Object.assign({\n                                    item: item,\n                                    user: user\n                                }, options));\n                            });\n                        });\n                    }\n                    nowPlayingUserData.innerHTML = '<button is=\"emby-ratingbutton\" type=\"button\" class=\"listItemButton mediaButton paper-icon-button-light\" data-id=\"' + item.Id + '\" data-serverid=\"' + item.ServerId + '\" data-itemtype=\"' + item.Type + '\" data-likes=\"' + likes + '\" data-isfavorite=\"' + (userData.IsFavorite) + '\"><span class=\"material-icons favorite\"></span></button>';\n                });\n            }\n        } else {\n            nowPlayingUserData.innerHTML = '';\n        }\n    }\n\n    function onPlaybackStart(e, state) {\n        console.debug('nowplaying event: ' + e.type);\n        var player = this;\n        onStateChanged.call(player, e, state);\n    }\n\n    function onRepeatModeChange() {\n        if (!isEnabled) {\n            return;\n        }\n\n        updateRepeatModeDisplay(playbackManager.getRepeatMode());\n    }\n\n    function onQueueShuffleModeChange() {\n        if (!isEnabled) {\n            return;\n        }\n\n        const shuffleMode = playbackManager.getQueueShuffleMode();\n        const context = nowPlayingBarElement;\n        const cssClass = 'buttonActive';\n        const toggleShuffleButton = context.querySelector('.btnShuffleQueue');\n        switch (shuffleMode) {\n            case 'Shuffle':\n                toggleShuffleButton.classList.add(cssClass);\n                break;\n            case 'Sorted':\n            default:\n                toggleShuffleButton.classList.remove(cssClass);\n                break;\n        }\n    }\n\n    function showNowPlayingBar() {\n        if (!isVisibilityAllowed) {\n            hideNowPlayingBar();\n            return;\n        }\n\n        getNowPlayingBar().then(slideUp);\n    }\n\n    function hideNowPlayingBar() {\n        isEnabled = false;\n\n        // Use a timeout to prevent the bar from hiding and showing quickly\n        // in the event of a stop->play command\n\n        // Don't call getNowPlayingBar here because we don't want to end up creating it just to hide it\n        const elem = document.getElementsByClassName('nowPlayingBar')[0];\n        if (elem) {\n            slideDown(elem);\n        }\n    }\n\n    function onPlaybackStopped(e, state) {\n        console.debug('nowplaying event: ' + e.type);\n        const player = this;\n\n        if (player.isLocalPlayer) {\n            if (state.NextMediaType !== 'Audio') {\n                hideNowPlayingBar();\n            }\n        } else {\n            if (!state.NextMediaType) {\n                hideNowPlayingBar();\n            }\n        }\n    }\n\n    function onPlayPauseStateChanged(e) {\n        if (!isEnabled) {\n            return;\n        }\n\n        const player = this;\n        updatePlayPauseState(player.paused());\n    }\n\n    function onStateChanged(event, state) {\n        console.debug('nowplaying event: ' + event.type);\n        const player = this;\n\n        if (!state.NowPlayingItem || layoutManager.tv) {\n            hideNowPlayingBar();\n            return;\n        }\n\n        if (player.isLocalPlayer && state.NowPlayingItem && state.NowPlayingItem.MediaType === 'Video') {\n            hideNowPlayingBar();\n            return;\n        }\n\n        isEnabled = true;\n\n        if (nowPlayingBarElement) {\n            updatePlayerStateInternal(event, state, player);\n            return;\n        }\n\n        getNowPlayingBar().then(function () {\n            updatePlayerStateInternal(event, state, player);\n        });\n    }\n\n    function onTimeUpdate(e) {\n        if (!isEnabled) {\n            return;\n        }\n\n        // Try to avoid hammering the document with changes\n        const now = new Date().getTime();\n        if ((now - lastUpdateTime) < 700) {\n            return;\n        }\n        lastUpdateTime = now;\n\n        const player = this;\n        currentRuntimeTicks = playbackManager.duration(player);\n        updateTimeDisplay(playbackManager.currentTime(player), currentRuntimeTicks, playbackManager.getBufferedRanges(player));\n    }\n\n    function releaseCurrentPlayer() {\n        const player = currentPlayer;\n\n        if (player) {\n            events.off(player, 'playbackstart', onPlaybackStart);\n            events.off(player, 'statechange', onPlaybackStart);\n            events.off(player, 'repeatmodechange', onRepeatModeChange);\n            events.off(player, 'shufflequeuemodechange', onQueueShuffleModeChange);\n            events.off(player, 'playbackstop', onPlaybackStopped);\n            events.off(player, 'volumechange', onVolumeChanged);\n            events.off(player, 'pause', onPlayPauseStateChanged);\n            events.off(player, 'unpause', onPlayPauseStateChanged);\n            events.off(player, 'timeupdate', onTimeUpdate);\n\n            currentPlayer = null;\n            hideNowPlayingBar();\n        }\n    }\n\n    function onVolumeChanged(e) {\n        if (!isEnabled) {\n            return;\n        }\n\n        const player = this;\n\n        updatePlayerVolumeState(player.isMuted(), player.getVolume());\n    }\n\n    function refreshFromPlayer(player) {\n        const state = playbackManager.getPlayerState(player);\n\n        onStateChanged.call(player, { type: 'init' }, state);\n    }\n\n    function bindToPlayer(player) {\n        if (player === currentPlayer) {\n            return;\n        }\n\n        releaseCurrentPlayer();\n\n        currentPlayer = player;\n\n        if (!player) {\n            return;\n        }\n\n        refreshFromPlayer(player);\n\n        events.on(player, 'playbackstart', onPlaybackStart);\n        events.on(player, 'statechange', onPlaybackStart);\n        events.on(player, 'repeatmodechange', onRepeatModeChange);\n        events.on(player, 'shufflequeuemodechange', onQueueShuffleModeChange);\n        events.on(player, 'playbackstop', onPlaybackStopped);\n        events.on(player, 'volumechange', onVolumeChanged);\n        events.on(player, 'pause', onPlayPauseStateChanged);\n        events.on(player, 'unpause', onPlayPauseStateChanged);\n        events.on(player, 'timeupdate', onTimeUpdate);\n    }\n\n    events.on(playbackManager, 'playerchange', function () {\n        bindToPlayer(playbackManager.getCurrentPlayer());\n    });\n\n    bindToPlayer(playbackManager.getCurrentPlayer());\n\n    document.addEventListener('viewbeforeshow', function (e) {\n        if (!e.detail.options.enableMediaControl) {\n            if (isVisibilityAllowed) {\n                isVisibilityAllowed = false;\n                hideNowPlayingBar();\n            }\n        } else if (!isVisibilityAllowed) {\n            isVisibilityAllowed = true;\n            if (currentPlayer) {\n                refreshFromPlayer(currentPlayer);\n            } else {\n                hideNowPlayingBar();\n            }\n        }\n    });\n\n/* eslint-enable indent */\n"]}