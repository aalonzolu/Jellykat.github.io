{"version":3,"sources":["components/viewContainer.js"],"names":["define","_require","_exports","_viewContainer","_typeof","obj","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","setControllerClass","view","options","controllerFactory","Promise","resolve","controllerUrl","getAttribute","indexOf","substring","length","Dashboard","getConfigurationResourceUrl","_resolve","_reject","concat","imported","_interopRequireWildcard","__esModule","default","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","then","ControllerFactory","loadView","cancel","selected","selectedPageIndex","previousAnimatable","allPages","pageIndex","pageContainerCount","isPluginpage","url","toLowerCase","newViewInfo","normalizeNewView","viewHtml","hasScript","elem","parseHtml","html","replaceAll","wrapper","document","createElement","innerHTML","querySelector","hasjQuery","hasjQuerySelect","hasjQueryChecked","newView","currentPage","triggerDestroy","dispatchEvent","CustomEvent","classList","add","window","$","mainAnimatedPages","removeChild","appendTo","replaceChild","appendChild","type","setAttribute","properties","fullscreen","push","join","onBeforeChange","beforeAnimate","currentUrls","afterAnimate","mobile","activePage","str","find","replace","split","newPageIndex","oldPageIndex","index","setOnBeforeChange","fn","tryRestoreView","animatable","remove","reject","reset","value","_default"],"mappings":"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","file":"viewContainer.js","sourcesContent":["import 'css!components/viewManager/viewContainer';\n/* eslint-disable indent */\n\n    function setControllerClass(view, options) {\n        if (options.controllerFactory) {\n            return Promise.resolve();\n        }\n\n        let controllerUrl = view.getAttribute('data-controller');\n\n        if (controllerUrl) {\n            if (controllerUrl.indexOf('__plugin/') === 0) {\n                controllerUrl = controllerUrl.substring('__plugin/'.length);\n            }\n\n            controllerUrl = Dashboard.getConfigurationResourceUrl(controllerUrl);\n            return import(controllerUrl).then((ControllerFactory) => {\n                options.controllerFactory = ControllerFactory;\n            });\n        }\n\n        return Promise.resolve();\n    }\n\n    export function loadView(options) {\n        if (!options.cancel) {\n            const selected = selectedPageIndex;\n            const previousAnimatable = selected === -1 ? null : allPages[selected];\n            let pageIndex = selected + 1;\n\n            if (pageIndex >= pageContainerCount) {\n                pageIndex = 0;\n            }\n\n            const isPluginpage = options.url.toLowerCase().indexOf('/configurationpage') !== -1;\n            const newViewInfo = normalizeNewView(options, isPluginpage);\n            const newView = newViewInfo.elem;\n\n            return new Promise((resolve) => {\n                const currentPage = allPages[pageIndex];\n\n                if (currentPage) {\n                    triggerDestroy(currentPage);\n                }\n\n                let view = newView;\n\n                if (typeof view == 'string') {\n                    view = document.createElement('div');\n                    view.innerHTML = newView;\n                }\n\n                view.classList.add('mainAnimatedPage');\n\n                if (currentPage) {\n                    if (newViewInfo.hasScript && window.$) {\n                        mainAnimatedPages.removeChild(currentPage);\n                        view = $(view).appendTo(mainAnimatedPages)[0];\n                    } else {\n                        mainAnimatedPages.replaceChild(view, currentPage);\n                    }\n                } else {\n                    if (newViewInfo.hasScript && window.$) {\n                        view = $(view).appendTo(mainAnimatedPages)[0];\n                    } else {\n                        mainAnimatedPages.appendChild(view);\n                    }\n                }\n\n                if (options.type) {\n                    view.setAttribute('data-type', options.type);\n                }\n\n                const properties = [];\n\n                if (options.fullscreen) {\n                    properties.push('fullscreen');\n                }\n\n                if (properties.length) {\n                    view.setAttribute('data-properties', properties.join(','));\n                }\n\n                allPages[pageIndex] = view;\n                setControllerClass(view, options).then(() => {\n                    if (onBeforeChange) {\n                        onBeforeChange(view, false, options);\n                    }\n\n                    beforeAnimate(allPages, pageIndex, selected);\n                    selectedPageIndex = pageIndex;\n                    currentUrls[pageIndex] = options.url;\n\n                    if (!options.cancel && previousAnimatable) {\n                        afterAnimate(allPages, pageIndex);\n                    }\n\n                    if (window.$) {\n                        $.mobile = $.mobile || {};\n                        $.mobile.activePage = view;\n                    }\n\n                    resolve(view);\n                });\n            });\n        }\n    }\n\n    function replaceAll(str, find, replace) {\n        return str.split(find).join(replace);\n    }\n\n    function parseHtml(html, hasScript) {\n        if (hasScript) {\n            html = replaceAll(html, '\\x3c!--<script', '<script');\n            html = replaceAll(html, '<\\/script>--\\x3e', '<\\/script>');\n        }\n\n        const wrapper = document.createElement('div');\n        wrapper.innerHTML = html;\n        return wrapper.querySelector('div[data-role=\"page\"]');\n    }\n\n    function normalizeNewView(options, isPluginpage) {\n        const viewHtml = options.view;\n\n        if (viewHtml.indexOf('data-role=\"page\"') === -1) {\n            return viewHtml;\n        }\n\n        let hasScript = viewHtml.indexOf('<script') !== -1;\n        const elem = parseHtml(viewHtml, hasScript);\n\n        if (hasScript) {\n            hasScript = elem.querySelector('script') != null;\n        }\n\n        let hasjQuery = false;\n        let hasjQuerySelect = false;\n        let hasjQueryChecked = false;\n\n        if (isPluginpage) {\n            hasjQuery = viewHtml.indexOf('jQuery') != -1 || viewHtml.indexOf('$(') != -1 || viewHtml.indexOf('$.') != -1;\n            hasjQueryChecked = viewHtml.indexOf('.checked(') != -1;\n            hasjQuerySelect = viewHtml.indexOf('.selectmenu(') != -1;\n        }\n\n        return {\n            elem: elem,\n            hasScript: hasScript,\n            hasjQuerySelect: hasjQuerySelect,\n            hasjQueryChecked: hasjQueryChecked,\n            hasjQuery: hasjQuery\n        };\n    }\n\n    function beforeAnimate(allPages, newPageIndex, oldPageIndex) {\n        for (let index = 0, length = allPages.length; index < length; index++) {\n            if (newPageIndex !== index && oldPageIndex !== index) {\n                allPages[index].classList.add('hide');\n            }\n        }\n    }\n\n    function afterAnimate(allPages, newPageIndex) {\n        for (let index = 0, length = allPages.length; index < length; index++) {\n            if (newPageIndex !== index) {\n                allPages[index].classList.add('hide');\n            }\n        }\n    }\n\n    export function setOnBeforeChange(fn) {\n        onBeforeChange = fn;\n    }\n\n    export function tryRestoreView(options) {\n        const url = options.url;\n        const index = currentUrls.indexOf(url);\n\n        if (index !== -1) {\n            const animatable = allPages[index];\n            const view = animatable;\n\n            if (view) {\n                if (options.cancel) {\n                    return;\n                }\n\n                const selected = selectedPageIndex;\n                const previousAnimatable = selected === -1 ? null : allPages[selected];\n                return setControllerClass(view, options).then(() => {\n                    if (onBeforeChange) {\n                        onBeforeChange(view, true, options);\n                    }\n\n                    beforeAnimate(allPages, index, selected);\n                    animatable.classList.remove('hide');\n                    selectedPageIndex = index;\n\n                    if (!options.cancel && previousAnimatable) {\n                        afterAnimate(allPages, index);\n                    }\n\n                    if (window.$) {\n                        $.mobile = $.mobile || {};\n                        $.mobile.activePage = view;\n                    }\n\n                    return view;\n                });\n            }\n        }\n\n        return Promise.reject();\n    }\n\n    function triggerDestroy(view) {\n        view.dispatchEvent(new CustomEvent('viewdestroy', {}));\n    }\n\n    export function reset() {\n        allPages = [];\n        currentUrls = [];\n        mainAnimatedPages.innerHTML = '';\n        selectedPageIndex = -1;\n    }\n\n    let onBeforeChange;\n    const mainAnimatedPages = document.querySelector('.mainAnimatedPages');\n    let allPages = [];\n    let currentUrls = [];\n    const pageContainerCount = 3;\n    let selectedPageIndex = -1;\n    reset();\n    mainAnimatedPages.classList.remove('hide');\n\n/* eslint-enable indent */\n\nexport default {\n    loadView: loadView,\n    tryRestoreView: tryRestoreView,\n    reset: reset,\n    setOnBeforeChange: setOnBeforeChange\n};\n\n"]}