define(["require","exports","globalize","loading","connectionManager"],(function(_require,_exports,_globalize,_loading,_connectionManager){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var cache=new WeakMap;return _getRequireWildcardCache=function _getRequireWildcardCache(){return cache},cache}function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;if(null===obj||"object"!==_typeof(obj)&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache();if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}function changeRecordingToSeries(apiClient,timerId,programId,confirmTimerCancellation){return _loading.default.show(),apiClient.getItem(apiClient.getCurrentUserId(),programId).then((function(item){return item.IsSeries?apiClient.getNewLiveTvTimerDefaults({programId:programId}).then((function(timerDefaults){return apiClient.createLiveTvSeriesTimer(timerDefaults).then((function(){_loading.default.hide(),sendToast(_globalize.default.translate("SeriesRecordingScheduled"))}))})):confirmTimerCancellation?cancelTimerWithConfirmation(timerId,apiClient.serverId()):cancelTimer(apiClient.serverId(),timerId,!0)}))}function cancelTimerWithConfirmation(timerId,serverId){return new Promise((function(resolve,reject){new Promise((function(_resolve,_reject){return _require(["confirm"],(function(imported){return _resolve(_interopRequireWildcard(imported))}),_reject)})).then((function(_ref){_ref.default.default({text:_globalize.default.translate("MessageConfirmRecordingCancellation"),primary:"delete",confirmText:_globalize.default.translate("HeaderCancelRecording"),cancelText:_globalize.default.translate("HeaderKeepRecording")}).then((function(){_loading.default.show(),cancelTimer(_connectionManager.default.getApiClient(serverId),timerId,!0).then(resolve,reject)}),reject)}))}))}function cancelTimer(apiClient,timerId,hideLoading){return _loading.default.show(),apiClient.cancelLiveTvTimer(timerId).then((function(){!1!==hideLoading&&(_loading.default.hide(),sendToast(_globalize.default.translate("RecordingCancelled")))}))}function createRecording(apiClient,programId,isSeries){return _loading.default.show(),apiClient.getNewLiveTvTimerDefaults({programId:programId}).then((function(item){return(isSeries?apiClient.createLiveTvSeriesTimer(item):apiClient.createLiveTvTimer(item)).then((function(){_loading.default.hide(),sendToast(_globalize.default.translate("RecordingScheduled"))}))}))}function sendToast(msg){new Promise((function(_resolve,_reject){return _require(["toast"],(function(imported){return _resolve(_interopRequireWildcard(imported))}),_reject)})).then((function(_ref4){(0,_ref4.default)(msg)}))}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_globalize=_interopRequireDefault(_globalize),_loading=_interopRequireDefault(_loading),_connectionManager=_interopRequireDefault(_connectionManager);var _default={cancelTimer:cancelTimer,createRecording:createRecording,changeRecordingToSeries:changeRecordingToSeries,toggleRecording:function toggleRecording(serverId,programId,timerId,timerStatus,seriesTimerId){var apiClient=_connectionManager.default.getApiClient(serverId),hasTimer=timerId&&"Cancelled"!==timerStatus;return seriesTimerId&&hasTimer?function showMultiCancellationPrompt(serverId,programId,timerId,timerStatus,seriesTimerId){return new Promise((function(resolve,reject){new Promise((function(_resolve,_reject){return _require(["dialog"],(function(imported){return _resolve(_interopRequireWildcard(imported))}),_reject)})).then((function(_ref5){var dialog=_ref5.default,items=[];items.push({name:_globalize.default.translate("HeaderKeepRecording"),id:"cancel",type:"submit"}),"InProgress"===timerStatus?items.push({name:_globalize.default.translate("HeaderStopRecording"),id:"canceltimer",type:"cancel"}):items.push({name:_globalize.default.translate("HeaderCancelRecording"),id:"canceltimer",type:"cancel"}),items.push({name:_globalize.default.translate("HeaderCancelSeries"),id:"cancelseriestimer",type:"cancel"}),dialog({text:_globalize.default.translate("MessageConfirmRecordingCancellation"),buttons:items}).then((function(result){var apiClient=_connectionManager.default.getApiClient(serverId);"canceltimer"===result?(_loading.default.show(),cancelTimer(apiClient,timerId,!0).then(resolve,reject)):"cancelseriestimer"===result?(_loading.default.show(),apiClient.cancelLiveTvSeriesTimer(seriesTimerId).then((function(){new Promise((function(_resolve,_reject){return _require(["toast"],(function(imported){return _resolve(_interopRequireWildcard(imported))}),_reject)})).then((function(_ref6){(0,_ref6.default)(_globalize.default.translate("SeriesCancelled"))})),_loading.default.hide(),resolve()}),reject)):resolve()}),reject)}))}))}(serverId,0,timerId,timerStatus,seriesTimerId):hasTimer&&programId?changeRecordingToSeries(apiClient,timerId,programId,!0):programId?createRecording(apiClient,programId):Promise.reject()},cancelTimerWithConfirmation:cancelTimerWithConfirmation,cancelSeriesTimerWithConfirmation:function cancelSeriesTimerWithConfirmation(timerId,serverId){return new Promise((function(resolve,reject){new Promise((function(_resolve,_reject){return _require(["confirm"],(function(imported){return _resolve(_interopRequireWildcard(imported))}),_reject)})).then((function(_ref2){_ref2.default.default({text:_globalize.default.translate("MessageConfirmRecordingCancellation"),primary:"delete",confirmText:_globalize.default.translate("HeaderCancelSeries"),cancelText:_globalize.default.translate("HeaderKeepSeries")}).then((function(){_loading.default.show(),_connectionManager.default.getApiClient(serverId).cancelLiveTvSeriesTimer(timerId).then((function(){new Promise((function(_resolve,_reject){return _require(["toast"],(function(imported){return _resolve(_interopRequireWildcard(imported))}),_reject)})).then((function(_ref3){(0,_ref3.default)(_globalize.default.translate("SeriesCancelled"))})),_loading.default.hide(),resolve()}),reject)}),reject)}))}))}};_exports.default=_default}));
//# sourceMappingURL=recordinghelper.js.map
