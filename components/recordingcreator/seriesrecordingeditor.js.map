{"version":3,"sources":["components/recordingcreator/seriesrecordingeditor.js"],"names":["define","_require","_exports","_dialogHelper","_globalize","_layoutManager","_connectionManager","_loading","_scrollHelper","_datetime","_scrollStyles","_embyButton","_embyCheckbox","_embyInput","_embySelect","_paperIconButtonLight","_formdialog","_recordingcreator","_materialIcons","_flexStyles","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","currentDialog","value","currentItemId","currentServerId","recordingUpdated","recordingDeleted","renderTimer","context","item","querySelector","PrePaddingSeconds","PostPaddingSeconds","RecordAnyChannel","RecordAnyTime","RecordNewOnly","checked","SkipEpisodesInLibrary","KeepUpTo","ChannelName","ChannelNumber","innerHTML","globalize","translate","datetime","getDisplayTime","parseISO8601Date","StartDate","loading","hide","closeDialog","isDeleted","dialogHelper","close","onSubmit","e","form","this","apiClient","connectionManager","getApiClient","getLiveTvSeriesTimer","then","updateLiveTvSeriesTimer","preventDefault","init","fillKeepUpTo","html","i","text","addEventListener","deleteTimer","timerId","Promise","resolve","reject","_resolve","_reject","imported","_ref","cancelSeriesTimerWithConfirmation","serverId","reload","id","show","result","Id","onFieldChange","click","_default","showEditor","itemId","options","_ref3","template","dialogOptions","removeOnClose","scrollY","layoutManager","tv","size","dlg","createDialog","classList","add","style","translateHtml","enableCancel","updated","deleted","scrollHelper","centerFocus","on","open","embed","_ref2","className","remove","removeEventListener"],"mappings":"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","file":"seriesrecordingeditor.js","sourcesContent":["import dialogHelper from 'dialogHelper';\nimport globalize from 'globalize';\nimport layoutManager from 'layoutManager';\nimport connectionManager from 'connectionManager';\nimport loading from 'loading';\nimport scrollHelper from 'scrollHelper';\nimport datetime from 'datetime';\nimport 'scrollStyles';\nimport 'emby-button';\nimport 'emby-checkbox';\nimport 'emby-input';\nimport 'emby-select';\nimport 'paper-icon-button-light';\nimport 'css!./../formdialog';\nimport 'css!./recordingcreator';\nimport 'material-icons';\nimport 'flexStyles';\n\n/*eslint prefer-const: \"error\"*/\n\nlet currentDialog;\nlet recordingUpdated = false;\nlet recordingDeleted = false;\nlet currentItemId;\nlet currentServerId;\n\nfunction deleteTimer(apiClient, timerId) {\n    return new Promise(function (resolve, reject) {\n        import('recordingHelper').then(({ default: recordingHelper }) => {\n            recordingHelper.cancelSeriesTimerWithConfirmation(timerId, apiClient.serverId()).then(resolve, reject);\n        });\n    });\n}\n\nfunction renderTimer(context, item) {\n    context.querySelector('#txtPrePaddingMinutes').value = item.PrePaddingSeconds / 60;\n    context.querySelector('#txtPostPaddingMinutes').value = item.PostPaddingSeconds / 60;\n\n    context.querySelector('.selectChannels').value = item.RecordAnyChannel ? 'all' : 'one';\n    context.querySelector('.selectAirTime').value = item.RecordAnyTime ? 'any' : 'original';\n\n    context.querySelector('.selectShowType').value = item.RecordNewOnly ? 'new' : 'all';\n    context.querySelector('.chkSkipEpisodesInLibrary').checked = item.SkipEpisodesInLibrary;\n    context.querySelector('.selectKeepUpTo').value = item.KeepUpTo || 0;\n\n    if (item.ChannelName || item.ChannelNumber) {\n        context.querySelector('.optionChannelOnly').innerHTML = globalize.translate('ChannelNameOnly', item.ChannelName || item.ChannelNumber);\n    } else {\n        context.querySelector('.optionChannelOnly').innerHTML = globalize.translate('OneChannel');\n    }\n\n    context.querySelector('.optionAroundTime').innerHTML = globalize.translate('AroundTime', datetime.getDisplayTime(datetime.parseISO8601Date(item.StartDate)));\n\n    loading.hide();\n}\n\nfunction closeDialog(isDeleted) {\n    recordingUpdated = true;\n    recordingDeleted = isDeleted;\n\n    dialogHelper.close(currentDialog);\n}\n\nfunction onSubmit(e) {\n    const form = this;\n\n    const apiClient = connectionManager.getApiClient(currentServerId);\n\n    apiClient.getLiveTvSeriesTimer(currentItemId).then(function (item) {\n        item.PrePaddingSeconds = form.querySelector('#txtPrePaddingMinutes').value * 60;\n        item.PostPaddingSeconds = form.querySelector('#txtPostPaddingMinutes').value * 60;\n        item.RecordAnyChannel = form.querySelector('.selectChannels').value === 'all';\n        item.RecordAnyTime = form.querySelector('.selectAirTime').value === 'any';\n        item.RecordNewOnly = form.querySelector('.selectShowType').value === 'new';\n        item.SkipEpisodesInLibrary = form.querySelector('.chkSkipEpisodesInLibrary').checked;\n        item.KeepUpTo = form.querySelector('.selectKeepUpTo').value;\n\n        apiClient.updateLiveTvSeriesTimer(item);\n    });\n\n    e.preventDefault();\n\n    // Disable default form submission\n    return false;\n}\n\nfunction init(context) {\n    fillKeepUpTo(context);\n\n    context.querySelector('.btnCancel').addEventListener('click', function () {\n        closeDialog(false);\n    });\n\n    context.querySelector('.btnCancelRecording').addEventListener('click', function () {\n        const apiClient = connectionManager.getApiClient(currentServerId);\n        deleteTimer(apiClient, currentItemId).then(function () {\n            closeDialog(true);\n        });\n    });\n\n    context.querySelector('form').addEventListener('submit', onSubmit);\n}\n\nfunction reload(context, id) {\n    const apiClient = connectionManager.getApiClient(currentServerId);\n\n    loading.show();\n    if (typeof id === 'string') {\n        currentItemId = id;\n\n        apiClient.getLiveTvSeriesTimer(id).then(function (result) {\n            renderTimer(context, result);\n            loading.hide();\n        });\n    } else if (id) {\n        currentItemId = id.Id;\n\n        renderTimer(context, id);\n        loading.hide();\n    }\n}\n\nfunction fillKeepUpTo(context) {\n    let html = '';\n\n    for (let i = 0; i <= 50; i++) {\n        let text;\n\n        if (i === 0) {\n            text = globalize.translate('AsManyAsPossible');\n        } else if (i === 1) {\n            text = globalize.translate('ValueOneEpisode');\n        } else {\n            text = globalize.translate('ValueEpisodeCount', i);\n        }\n\n        html += '<option value=\"' + i + '\">' + text + '</option>';\n    }\n\n    context.querySelector('.selectKeepUpTo').innerHTML = html;\n}\n\nfunction onFieldChange() {\n    this.querySelector('.btnSubmit').click();\n}\n\nfunction embed(itemId, serverId, options) {\n    recordingUpdated = false;\n    recordingDeleted = false;\n    currentServerId = serverId;\n    loading.show();\n    options = options || {};\n\n    import('text!./seriesrecordingeditor.template.html').then(({ default: template }) => {\n        const dialogOptions = {\n            removeOnClose: true,\n            scrollY: false\n        };\n\n        if (layoutManager.tv) {\n            dialogOptions.size = 'fullscreen';\n        } else {\n            dialogOptions.size = 'small';\n        }\n\n        const dlg = options.context;\n\n        dlg.classList.add('hide');\n        dlg.innerHTML = globalize.translateHtml(template, 'core');\n\n        dlg.querySelector('.formDialogHeader').classList.add('hide');\n        dlg.querySelector('.formDialogFooter').classList.add('hide');\n        dlg.querySelector('.formDialogContent').className = '';\n        dlg.querySelector('.dialogContentInner').className = '';\n        dlg.classList.remove('hide');\n\n        dlg.removeEventListener('change', onFieldChange);\n        dlg.addEventListener('change', onFieldChange);\n\n        currentDialog = dlg;\n\n        init(dlg);\n\n        reload(dlg, itemId);\n    });\n}\n\nfunction showEditor(itemId, serverId, options) {\n    return new Promise(function (resolve, reject) {\n        recordingUpdated = false;\n        recordingDeleted = false;\n        currentServerId = serverId;\n        loading.show();\n        options = options || {};\n\n        import('text!./seriesrecordingeditor.template.html').then(({ default: template }) => {\n            const dialogOptions = {\n                removeOnClose: true,\n                scrollY: false\n            };\n\n            if (layoutManager.tv) {\n                dialogOptions.size = 'fullscreen';\n            } else {\n                dialogOptions.size = 'small';\n            }\n\n            const dlg = dialogHelper.createDialog(dialogOptions);\n\n            dlg.classList.add('formDialog');\n            dlg.classList.add('recordingDialog');\n\n            if (!layoutManager.tv) {\n                dlg.style['min-width'] = '20%';\n            }\n\n            let html = '';\n\n            html += globalize.translateHtml(template, 'core');\n\n            dlg.innerHTML = html;\n\n            if (options.enableCancel === false) {\n                dlg.querySelector('.formDialogFooter').classList.add('hide');\n            }\n\n            currentDialog = dlg;\n\n            dlg.addEventListener('closing', function () {\n                if (!recordingDeleted) {\n                    this.querySelector('.btnSubmit').click();\n                }\n            });\n\n            dlg.addEventListener('close', function () {\n                if (recordingUpdated) {\n                    resolve({\n                        updated: true,\n                        deleted: recordingDeleted\n                    });\n                } else {\n                    reject();\n                }\n            });\n\n            if (layoutManager.tv) {\n                scrollHelper.centerFocus.on(dlg.querySelector('.formDialogContent'), false);\n            }\n\n            init(dlg);\n\n            reload(dlg, itemId);\n\n            dialogHelper.open(dlg);\n        });\n    });\n}\n\nexport default {\n    show: showEditor,\n    embed: embed\n};\n"]}