define(["require","exports","globalize","connectionManager","serverNotifications","loading","dom","recordingHelper","events","paper-icon-button-light","emby-button","css!./recordingfields","flexStyles"],(function(_require,_exports,_globalize,_connectionManager,_serverNotifications,_loading,_dom,_recordingHelper,_events,_paperIconButtonLight,_embyButton,_recordingfields,_flexStyles){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var cache=new WeakMap;return _getRequireWildcardCache=function _getRequireWildcardCache(){return cache},cache}function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;if(null===obj||"object"!==_typeof(obj)&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache();if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function fetchData(instance){var options=instance.options,apiClient=_connectionManager.default.getApiClient(options.serverId);return options.parent.querySelector(".recordingFields").classList.remove("hide"),apiClient.getLiveTvProgram(options.programId,apiClient.getCurrentUserId()).then((function(program){instance.TimerId=program.TimerId,instance.Status=program.Status,instance.SeriesTimerId=program.SeriesTimerId,function loadData(parent,program,apiClient){program.IsSeries?parent.querySelector(".recordSeriesContainer").classList.remove("hide"):parent.querySelector(".recordSeriesContainer").classList.add("hide"),program.SeriesTimerId?(parent.querySelector(".btnManageSeriesRecording").classList.remove("hide"),parent.querySelector(".seriesRecordingButton .recordingIcon").classList.add("recordingIcon-active"),parent.querySelector(".seriesRecordingButton .buttonText").innerHTML=_globalize.default.translate("CancelSeries")):(parent.querySelector(".btnManageSeriesRecording").classList.add("hide"),parent.querySelector(".seriesRecordingButton .recordingIcon").classList.remove("recordingIcon-active"),parent.querySelector(".seriesRecordingButton .buttonText").innerHTML=_globalize.default.translate("RecordSeries")),program.TimerId&&"Cancelled"!==program.Status?(parent.querySelector(".btnManageRecording").classList.remove("hide"),parent.querySelector(".singleRecordingButton .recordingIcon").classList.add("recordingIcon-active"),"InProgress"===program.Status?parent.querySelector(".singleRecordingButton .buttonText").innerHTML=_globalize.default.translate("StopRecording"):parent.querySelector(".singleRecordingButton .buttonText").innerHTML=_globalize.default.translate("DoNotRecord")):(parent.querySelector(".btnManageRecording").classList.add("hide"),parent.querySelector(".singleRecordingButton .recordingIcon").classList.remove("recordingIcon-active"),parent.querySelector(".singleRecordingButton .buttonText").innerHTML=_globalize.default.translate("Record"))}(options.parent,program)}))}function onTimerChangedExternally(e,apiClient,data){var options=this.options,refresh=!1;data.Id&&this.TimerId===data.Id&&(refresh=!0),data.ProgramId&&options&&options.programId===data.ProgramId&&(refresh=!0),refresh&&this.refresh()}function onSeriesTimerChangedExternally(e,apiClient,data){var options=this.options,refresh=!1;data.Id&&this.SeriesTimerId===data.Id&&(refresh=!0),data.ProgramId&&options&&options.programId===data.ProgramId&&(refresh=!0),refresh&&this.refresh()}function onManageRecordingClick(e){var options=this.options;if(this.TimerId&&"Cancelled"!==this.Status){var self=this;new Promise((function(_resolve,_reject){return _require(["recordingEditor"],(function(imported){return _resolve(_interopRequireWildcard(imported))}),_reject)})).then((function(_ref2){_ref2.default.show(self.TimerId,options.serverId,{enableCancel:!1}).then((function(){self.changed=!0}))}))}}function onManageSeriesRecordingClick(e){var options=this.options;if(this.SeriesTimerId){var self=this;new Promise((function(_resolve,_reject){return _require(["seriesRecordingEditor"],(function(imported){return _resolve(_interopRequireWildcard(imported))}),_reject)})).then((function(_ref3){_ref3.default.show(self.SeriesTimerId,options.serverId,{enableCancel:!1}).then((function(){self.changed=!0}))}))}}function onRecordChange(e){this.changed=!0;var self=this,options=this.options,apiClient=_connectionManager.default.getApiClient(options.serverId),isChecked=!_dom.default.parentWithTag(e.target,"BUTTON").querySelector(".material-icons").classList.contains("recordingIcon-active"),hasEnabledTimer=this.TimerId&&"Cancelled"!==this.Status;isChecked?hasEnabledTimer||(_loading.default.show(),_recordingHelper.default.createRecording(apiClient,options.programId,!1).then((function(){_events.default.trigger(self,"recordingchanged"),fetchData(self),_loading.default.hide()}))):hasEnabledTimer&&(_loading.default.show(),_recordingHelper.default.cancelTimer(apiClient,this.TimerId,!0).then((function(){_events.default.trigger(self,"recordingchanged"),fetchData(self),_loading.default.hide()})))}function onRecordSeriesChange(e){this.changed=!0;var self=this,options=this.options,apiClient=_connectionManager.default.getApiClient(options.serverId);_dom.default.parentWithTag(e.target,"BUTTON").querySelector(".material-icons").classList.contains("recordingIcon-active")?this.SeriesTimerId&&apiClient.cancelLiveTvSeriesTimer(this.SeriesTimerId).then((function(){!function sendToast(msg){new Promise((function(_resolve,_reject){return _require(["toast"],(function(imported){return _resolve(_interopRequireWildcard(imported))}),_reject)})).then((function(_ref4){(0,_ref4.default)(msg)}))}(_globalize.default.translate("RecordingCancelled")),fetchData(self)})):(options.parent.querySelector(".recordSeriesContainer").classList.remove("hide"),this.SeriesTimerId||(this.TimerId?_recordingHelper.default.changeRecordingToSeries(apiClient,this.TimerId,options.programId):_recordingHelper.default.createRecording(apiClient,options.programId,!0)).then((function(){fetchData(self)})))}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_globalize=_interopRequireDefault(_globalize),_connectionManager=_interopRequireDefault(_connectionManager),_serverNotifications=_interopRequireDefault(_serverNotifications),_loading=_interopRequireDefault(_loading),_dom=_interopRequireDefault(_dom),_recordingHelper=_interopRequireDefault(_recordingHelper),_events=_interopRequireDefault(_events);var _default=function(){function RecordingEditor(options){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,RecordingEditor),this.options=options,this.embed();var timerChangedHandler=onTimerChangedExternally.bind(this);this.timerChangedHandler=timerChangedHandler,_events.default.on(_serverNotifications.default,"TimerCreated",timerChangedHandler),_events.default.on(_serverNotifications.default,"TimerCancelled",timerChangedHandler);var seriesTimerChangedHandler=onSeriesTimerChangedExternally.bind(this);this.seriesTimerChangedHandler=seriesTimerChangedHandler,_events.default.on(_serverNotifications.default,"SeriesTimerCreated",seriesTimerChangedHandler),_events.default.on(_serverNotifications.default,"SeriesTimerCancelled",seriesTimerChangedHandler)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(RecordingEditor,[{key:"embed",value:function embed(){var self=this;return new Promise((function(resolve,reject){new Promise((function(_resolve,_reject){return _require(["text!./recordingfields.template.html"],(function(imported){return _resolve(_interopRequireWildcard(imported))}),_reject)})).then((function(_ref){var template=_ref.default,context=self.options.parent;context.innerHTML=_globalize.default.translateHtml(template,"core"),context.querySelector(".singleRecordingButton").addEventListener("click",onRecordChange.bind(self)),context.querySelector(".seriesRecordingButton").addEventListener("click",onRecordSeriesChange.bind(self)),context.querySelector(".btnManageRecording").addEventListener("click",onManageRecordingClick.bind(self)),context.querySelector(".btnManageSeriesRecording").addEventListener("click",onManageSeriesRecordingClick.bind(self)),fetchData(self).then(resolve)}))}))}},{key:"hasChanged",value:function hasChanged(){return this.changed}},{key:"refresh",value:function refresh(){fetchData(this)}},{key:"destroy",value:function destroy(){var timerChangedHandler=this.timerChangedHandler;this.timerChangedHandler=null,_events.default.off(_serverNotifications.default,"TimerCreated",timerChangedHandler),_events.default.off(_serverNotifications.default,"TimerCancelled",timerChangedHandler);var seriesTimerChangedHandler=this.seriesTimerChangedHandler;this.seriesTimerChangedHandler=null,_events.default.off(_serverNotifications.default,"SeriesTimerCreated",seriesTimerChangedHandler),_events.default.off(_serverNotifications.default,"SeriesTimerCancelled",seriesTimerChangedHandler)}}]),RecordingEditor}();_exports.default=_default}));
//# sourceMappingURL=recordingfields.js.map
