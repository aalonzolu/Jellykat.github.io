{"version":3,"sources":["components/recordingcreator/recordingbutton.js"],"names":["define","_exports","_connectionManager","_dom","_recordingHelper","_paperIconButtonLight","_embyButton","_recordingfields","_interopRequireDefault","obj","__esModule","default","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","onRecordingButtonClick","e","item","this","serverId","ServerId","programId","Id","timerId","TimerId","timerStatus","Status","seriesTimerId","SeriesTimerId","instance","recordingHelper","toggleRecording","then","refresh","setButtonIcon","button","icon","inner","querySelector","classList","remove","add","value","_default","RecordingButton","options","_classCallCheck","Constructor","TypeError","refreshItem","itemId","clickFn","bind","dom","addEventListener","passive","_createClass","protoProps","staticProps","prototype","apiClient","connectionManager","getApiClient","self","getItem","getCurrentUserId","getIndicatorIcon","status","Type","destroy","removeEventListener"],"mappings":"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","file":"recordingbutton.js","sourcesContent":["import connectionManager from 'connectionManager';\nimport dom from 'dom';\nimport recordingHelper from 'recordingHelper';\nimport 'paper-icon-button-light';\nimport 'emby-button';\nimport 'css!./recordingfields';\n\nfunction onRecordingButtonClick(e) {\n    const item = this.item;\n\n    if (item) {\n        const serverId = item.ServerId;\n        const programId = item.Id;\n        const timerId = item.TimerId;\n        const timerStatus = item.Status;\n        const seriesTimerId = item.SeriesTimerId;\n\n        const instance = this;\n\n        recordingHelper.toggleRecording(serverId, programId, timerId, timerStatus, seriesTimerId).then(function () {\n            instance.refresh(serverId, programId);\n        });\n    }\n}\n\nfunction setButtonIcon(button, icon) {\n    const inner = button.querySelector('.material-icons');\n    inner.classList.remove('fiber_smart_record');\n    inner.classList.remove('fiber_manual_record');\n    inner.classList.add(icon);\n}\n\nclass RecordingButton {\n    constructor(options) {\n        this.options = options;\n\n        const button = options.button;\n\n        setButtonIcon(button, 'fiber_manual_record');\n\n        if (options.item) {\n            this.refreshItem(options.item);\n        } else if (options.itemId && options.serverId) {\n            this.refresh(options.itemId, options.serverId);\n        }\n\n        const clickFn = onRecordingButtonClick.bind(this);\n        this.clickFn = clickFn;\n\n        dom.addEventListener(button, 'click', clickFn, {\n            passive: true\n        });\n    }\n\n    refresh(serverId, itemId) {\n        const apiClient = connectionManager.getApiClient(serverId);\n        const self = this;\n        apiClient.getItem(apiClient.getCurrentUserId(), itemId).then(function (item) {\n            self.refreshItem(item);\n        });\n    }\n\n    refreshItem(item) {\n        const options = this.options;\n        const button = options.button;\n        this.item = item;\n        setButtonIcon(button, getIndicatorIcon(item));\n\n        if (item.TimerId && (item.Status || 'Cancelled') !== 'Cancelled') {\n            button.classList.add('recordingIcon-active');\n        } else {\n            button.classList.remove('recordingIcon-active');\n        }\n    }\n\n    destroy() {\n        const options = this.options;\n\n        if (options) {\n            const button = options.button;\n\n            const clickFn = this.clickFn;\n\n            if (clickFn) {\n                dom.removeEventListener(button, 'click', clickFn, {\n                    passive: true\n                });\n            }\n        }\n\n        this.options = null;\n        this.item = null;\n    }\n}\n\nfunction getIndicatorIcon(item) {\n    let status;\n\n    if (item.Type === 'SeriesTimer') {\n        return 'fiber_smart_record';\n    } else if (item.TimerId || item.SeriesTimerId) {\n        status = item.Status || 'Cancelled';\n    } else if (item.Type === 'Timer') {\n        status = item.Status;\n    } else {\n        return 'fiber_manual_record';\n    }\n\n    if (item.SeriesTimerId) {\n        if (status !== 'Cancelled') {\n            return 'fiber_smart_record';\n        }\n    }\n\n    return 'fiber_manual_record';\n}\n\nexport default RecordingButton;\n"]}