{"version":3,"sources":["components/recordingcreator/recordingfields.js"],"names":["define","_require","_exports","_globalize","_connectionManager","_serverNotifications","_loading","_dom","_recordingHelper","_events","_paperIconButtonLight","_embyButton","_recordingfields","_flexStyles","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","fetchData","instance","options","apiClient","connectionManager","getApiClient","serverId","parent","querySelector","classList","remove","getLiveTvProgram","programId","getCurrentUserId","then","program","TimerId","Status","SeriesTimerId","loadData","IsSeries","add","innerHTML","globalize","translate","onTimerChangedExternally","e","data","this","refresh","Id","ProgramId","onSeriesTimerChangedExternally","onManageRecordingClick","self","Promise","_resolve","_reject","imported","_ref2","show","enableCancel","changed","onManageSeriesRecordingClick","_ref3","onRecordChange","isChecked","dom","parentWithTag","contains","hasEnabledTimer","loading","recordingHelper","createRecording","events","trigger","hide","cancelTimer","onRecordSeriesChange","cancelLiveTvSeriesTimer","sendToast","msg","_ref4","toast","changeRecordingToSeries","value","_default","RecordingEditor","_classCallCheck","Constructor","TypeError","embed","timerChangedHandler","bind","on","serverNotifications","seriesTimerChangedHandler","_createClass","protoProps","staticProps","resolve","reject","_ref","template","context","translateHtml","addEventListener","hasChanged","destroy","off"],"mappings":"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","file":"recordingfields.js","sourcesContent":["import globalize from 'globalize';\nimport connectionManager from 'connectionManager';\nimport serverNotifications from 'serverNotifications';\nimport loading from 'loading';\nimport dom from 'dom';\nimport recordingHelper from 'recordingHelper';\nimport events from 'events';\nimport 'paper-icon-button-light';\nimport 'emby-button';\nimport 'css!./recordingfields';\nimport 'flexStyles';\n\n/*eslint prefer-const: \"error\"*/\n\nfunction loadData(parent, program, apiClient) {\n    if (program.IsSeries) {\n        parent.querySelector('.recordSeriesContainer').classList.remove('hide');\n    } else {\n        parent.querySelector('.recordSeriesContainer').classList.add('hide');\n    }\n\n    if (program.SeriesTimerId) {\n        parent.querySelector('.btnManageSeriesRecording').classList.remove('hide');\n        parent.querySelector('.seriesRecordingButton .recordingIcon').classList.add('recordingIcon-active');\n        parent.querySelector('.seriesRecordingButton .buttonText').innerHTML = globalize.translate('CancelSeries');\n    } else {\n        parent.querySelector('.btnManageSeriesRecording').classList.add('hide');\n        parent.querySelector('.seriesRecordingButton .recordingIcon').classList.remove('recordingIcon-active');\n        parent.querySelector('.seriesRecordingButton .buttonText').innerHTML = globalize.translate('RecordSeries');\n    }\n\n    if (program.TimerId && program.Status !== 'Cancelled') {\n        parent.querySelector('.btnManageRecording').classList.remove('hide');\n        parent.querySelector('.singleRecordingButton .recordingIcon').classList.add('recordingIcon-active');\n        if (program.Status === 'InProgress') {\n            parent.querySelector('.singleRecordingButton .buttonText').innerHTML = globalize.translate('StopRecording');\n        } else {\n            parent.querySelector('.singleRecordingButton .buttonText').innerHTML = globalize.translate('DoNotRecord');\n        }\n    } else {\n        parent.querySelector('.btnManageRecording').classList.add('hide');\n        parent.querySelector('.singleRecordingButton .recordingIcon').classList.remove('recordingIcon-active');\n        parent.querySelector('.singleRecordingButton .buttonText').innerHTML = globalize.translate('Record');\n    }\n}\n\nfunction fetchData(instance) {\n    const options = instance.options;\n    const apiClient = connectionManager.getApiClient(options.serverId);\n\n    options.parent.querySelector('.recordingFields').classList.remove('hide');\n    return apiClient.getLiveTvProgram(options.programId, apiClient.getCurrentUserId()).then(function (program) {\n        instance.TimerId = program.TimerId;\n        instance.Status = program.Status;\n        instance.SeriesTimerId = program.SeriesTimerId;\n        loadData(options.parent, program, apiClient);\n    });\n}\n\nfunction onTimerChangedExternally(e, apiClient, data) {\n    const options = this.options;\n    let refresh = false;\n\n    if (data.Id) {\n        if (this.TimerId === data.Id) {\n            refresh = true;\n        }\n    }\n    if (data.ProgramId && options) {\n        if (options.programId === data.ProgramId) {\n            refresh = true;\n        }\n    }\n\n    if (refresh) {\n        this.refresh();\n    }\n}\n\nfunction onSeriesTimerChangedExternally(e, apiClient, data) {\n    const options = this.options;\n    let refresh = false;\n\n    if (data.Id) {\n        if (this.SeriesTimerId === data.Id) {\n            refresh = true;\n        }\n    }\n    if (data.ProgramId && options) {\n        if (options.programId === data.ProgramId) {\n            refresh = true;\n        }\n    }\n\n    if (refresh) {\n        this.refresh();\n    }\n}\n\nclass RecordingEditor {\n    constructor(options) {\n        this.options = options;\n        this.embed();\n\n        const timerChangedHandler = onTimerChangedExternally.bind(this);\n        this.timerChangedHandler = timerChangedHandler;\n\n        events.on(serverNotifications, 'TimerCreated', timerChangedHandler);\n        events.on(serverNotifications, 'TimerCancelled', timerChangedHandler);\n\n        const seriesTimerChangedHandler = onSeriesTimerChangedExternally.bind(this);\n        this.seriesTimerChangedHandler = seriesTimerChangedHandler;\n\n        events.on(serverNotifications, 'SeriesTimerCreated', seriesTimerChangedHandler);\n        events.on(serverNotifications, 'SeriesTimerCancelled', seriesTimerChangedHandler);\n    }\n\n    embed() {\n        const self = this;\n        return new Promise(function (resolve, reject) {\n            import('text!./recordingfields.template.html').then(({default: template}) => {\n                const options = self.options;\n                const context = options.parent;\n                context.innerHTML = globalize.translateHtml(template, 'core');\n\n                context.querySelector('.singleRecordingButton').addEventListener('click', onRecordChange.bind(self));\n                context.querySelector('.seriesRecordingButton').addEventListener('click', onRecordSeriesChange.bind(self));\n                context.querySelector('.btnManageRecording').addEventListener('click', onManageRecordingClick.bind(self));\n                context.querySelector('.btnManageSeriesRecording').addEventListener('click', onManageSeriesRecordingClick.bind(self));\n\n                fetchData(self).then(resolve);\n            });\n        });\n    }\n\n    hasChanged() {\n        return this.changed;\n    }\n\n    refresh() {\n        fetchData(this);\n    }\n\n    destroy() {\n        const timerChangedHandler = this.timerChangedHandler;\n        this.timerChangedHandler = null;\n\n        events.off(serverNotifications, 'TimerCreated', timerChangedHandler);\n        events.off(serverNotifications, 'TimerCancelled', timerChangedHandler);\n\n        const seriesTimerChangedHandler = this.seriesTimerChangedHandler;\n        this.seriesTimerChangedHandler = null;\n\n        events.off(serverNotifications, 'SeriesTimerCreated', seriesTimerChangedHandler);\n        events.off(serverNotifications, 'SeriesTimerCancelled', seriesTimerChangedHandler);\n    }\n}\n\nfunction onManageRecordingClick(e) {\n    const options = this.options;\n    if (!this.TimerId || this.Status === 'Cancelled') {\n        return;\n    }\n\n    const self = this;\n    import('recordingEditor').then(({default: recordingEditor}) => {\n        recordingEditor.show(self.TimerId, options.serverId, {\n            enableCancel: false\n        }).then(function () {\n            self.changed = true;\n        });\n    });\n}\n\nfunction onManageSeriesRecordingClick(e) {\n    const options = this.options;\n\n    if (!this.SeriesTimerId) {\n        return;\n    }\n\n    const self = this;\n\n    import('seriesRecordingEditor').then(({default: seriesRecordingEditor}) => {\n        seriesRecordingEditor.show(self.SeriesTimerId, options.serverId, {\n\n            enableCancel: false\n\n        }).then(function () {\n            self.changed = true;\n        });\n    });\n}\n\nfunction onRecordChange(e) {\n    this.changed = true;\n\n    const self = this;\n    const options = this.options;\n    const apiClient = connectionManager.getApiClient(options.serverId);\n\n    const button = dom.parentWithTag(e.target, 'BUTTON');\n    const isChecked = !button.querySelector('.material-icons').classList.contains('recordingIcon-active');\n\n    const hasEnabledTimer = this.TimerId && this.Status !== 'Cancelled';\n\n    if (isChecked) {\n        if (!hasEnabledTimer) {\n            loading.show();\n            recordingHelper.createRecording(apiClient, options.programId, false).then(function () {\n                events.trigger(self, 'recordingchanged');\n                fetchData(self);\n                loading.hide();\n            });\n        }\n    } else {\n        if (hasEnabledTimer) {\n            loading.show();\n            recordingHelper.cancelTimer(apiClient, this.TimerId, true).then(function () {\n                events.trigger(self, 'recordingchanged');\n                fetchData(self);\n                loading.hide();\n            });\n        }\n    }\n}\n\nfunction sendToast(msg) {\n    import('toast').then(({default: toast}) => {\n        toast(msg);\n    });\n}\n\nfunction onRecordSeriesChange(e) {\n    this.changed = true;\n\n    const self = this;\n    const options = this.options;\n    const apiClient = connectionManager.getApiClient(options.serverId);\n\n    const button = dom.parentWithTag(e.target, 'BUTTON');\n    const isChecked = !button.querySelector('.material-icons').classList.contains('recordingIcon-active');\n\n    if (isChecked) {\n        options.parent.querySelector('.recordSeriesContainer').classList.remove('hide');\n        if (!this.SeriesTimerId) {\n            const promise = this.TimerId ?\n                recordingHelper.changeRecordingToSeries(apiClient, this.TimerId, options.programId) :\n                recordingHelper.createRecording(apiClient, options.programId, true);\n            promise.then(function () {\n                fetchData(self);\n            });\n        }\n    } else {\n        if (this.SeriesTimerId) {\n            apiClient.cancelLiveTvSeriesTimer(this.SeriesTimerId).then(function () {\n                sendToast(globalize.translate('RecordingCancelled'));\n                fetchData(self);\n            });\n        }\n    }\n}\n\nexport default RecordingEditor;\n"]}