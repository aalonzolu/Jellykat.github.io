{"version":3,"sources":["components/recordingcreator/recordinghelper.js"],"names":["define","_require","_exports","_globalize","_loading","_connectionManager","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","changeRecordingToSeries","apiClient","timerId","programId","confirmTimerCancellation","loading","show","getItem","getCurrentUserId","then","item","IsSeries","getNewLiveTvTimerDefaults","timerDefaults","createLiveTvSeriesTimer","hide","sendToast","globalize","translate","cancelTimerWithConfirmation","serverId","cancelTimer","Promise","resolve","reject","_resolve","_reject","imported","_ref","text","primary","confirmText","cancelText","connectionManager","getApiClient","hideLoading","cancelLiveTvTimer","createRecording","isSeries","createLiveTvTimer","msg","_ref4","toast","value","_default","toggleRecording","timerStatus","seriesTimerId","hasTimer","showMultiCancellationPrompt","_ref5","dialog","items","push","name","id","type","buttons","result","cancelLiveTvSeriesTimer","_ref6","cancelSeriesTimerWithConfirmation","_ref2","_ref3"],"mappings":"AAAAA,OAAO,CAAC,UAAW,UAAW,YAAa,UAAW,sBAAsB,SAAUC,SAAUC,SAAUC,WAAYC,SAAUC,oBAC9H,aAUA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KAEvF,SAASG,QAAQH,KAAmV,OAAtOG,QAArD,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAmC,SAASF,QAAQH,KAAO,cAAcA,KAA2B,SAASG,QAAQH,KAAO,OAAOA,KAAyB,mBAAXI,QAAyBJ,IAAIM,cAAgBF,QAAUJ,MAAQI,OAAOG,UAAY,gBAAkBP,MAAyBA,KAEnX,SAASQ,2BAA6B,GAAuB,mBAAZC,QAAwB,OAAO,KAAM,IAAIC,MAAQ,IAAID,QAA6F,OAAlFD,yBAA2B,SAASA,2BAA6B,OAAOE,OAAiBA,MAE1M,SAASC,wBAAwBX,KAAO,GAAIA,KAAOA,IAAIC,WAAc,OAAOD,IAAO,GAAY,OAARA,KAAiC,WAAjBG,QAAQH,MAAoC,mBAARA,IAAsB,MAAO,CAAEE,QAASF,KAAS,IAAIU,MAAQF,2BAA4B,GAAIE,OAASA,MAAME,IAAIZ,KAAQ,OAAOU,MAAMG,IAAIb,KAAQ,IAAIc,OAAS,GAAQC,sBAAwBC,OAAOC,gBAAkBD,OAAOE,yBAA0B,IAAK,IAAIC,OAAOnB,IAAO,GAAIgB,OAAOT,UAAUa,eAAeC,KAAKrB,IAAKmB,KAAM,CAAE,IAAIG,KAAOP,sBAAwBC,OAAOE,yBAAyBlB,IAAKmB,KAAO,KAAUG,OAASA,KAAKT,KAAOS,KAAKC,KAAQP,OAAOC,eAAeH,OAAQK,IAAKG,MAAgBR,OAAOK,KAAOnB,IAAImB,KAAyE,OAA7DL,OAAOZ,QAAUF,IAASU,OAASA,MAAMa,IAAIvB,IAAKc,QAAkBA,OAXluB,SAASU,wBAAwBC,UAAWC,QAASC,UAAWC,0BAG5D,OAFAC,SAAAA,QAAQC,OAEDL,UAAUM,QAAQN,UAAUO,mBAAoBL,WAAWM,MAAK,SAAUC,MAC7E,OAAIA,KAAKC,SAEEV,UAAUW,0BAA0B,CAAET,UAAWA,YAAaM,MAAK,SAAUI,eAChF,OAAOZ,UAAUa,wBAAwBD,eAAeJ,MAAK,WACzDJ,SAAAA,QAAQU,OACRC,UAAUC,WAAAA,QAAUC,UAAU,mCAKlCd,yBACOe,4BAA4BjB,QAASD,UAAUmB,YAGnDC,YAAYpB,UAAUmB,WAAYlB,SAAS,MAK9D,SAASiB,4BAA4BjB,QAASkB,UAC1C,OAAO,IAAIE,SAAQ,SAAUC,QAASC,QAClC,IAAAF,SAAA,SAAAG,SAAAC,SAAA,OAAAxD,SAAA,CAAO,YAAP,SAAAyD,UAAA,OAAAF,SAAAtC,wBAAAwC,aAAAD,YAAkBjB,MAAK,SAAAmB,MAA0BA,KAAvBlD,QACdA,QAAQ,CAEZmD,KAAMZ,WAAAA,QAAUC,UAAU,uCAC1BY,QAAS,SACTC,YAAad,WAAAA,QAAUC,UAAU,yBACjCc,WAAYf,WAAAA,QAAUC,UAAU,yBAEjCT,MAAK,WACJJ,SAAAA,QAAQC,OAGRe,YADkBY,mBAAAA,QAAkBC,aAAad,UAC1BlB,SAAS,GAAMO,KAAKc,QAASC,UACrDA,cAgCf,SAASH,YAAYpB,UAAWC,QAASiC,aAErC,OADA9B,SAAAA,QAAQC,OACDL,UAAUmC,kBAAkBlC,SAASO,MAAK,YACzB,IAAhB0B,cACA9B,SAAAA,QAAQU,OACRC,UAAUC,WAAAA,QAAUC,UAAU,2BAK1C,SAASmB,gBAAgBpC,UAAWE,UAAWmC,UAE3C,OADAjC,SAAAA,QAAQC,OACDL,UAAUW,0BAA0B,CAAET,UAAWA,YAAaM,MAAK,SAAUC,MAKhF,OAJgB4B,SACZrC,UAAUa,wBAAwBJ,MAClCT,UAAUsC,kBAAkB7B,OAEjBD,MAAK,WAChBJ,SAAAA,QAAQU,OACRC,UAAUC,WAAAA,QAAUC,UAAU,6BAK1C,SAASF,UAAUwB,KACf,IAAAlB,SAAA,SAAAG,SAAAC,SAAA,OAAAxD,SAAA,CAAO,UAAP,SAAAyD,UAAA,OAAAF,SAAAtC,wBAAAwC,aAAAD,YAAgBjB,MAAK,SAAAgC,QACjBC,EADyCD,MAArB/D,SACd8D,QAnGZhD,OAAOC,eAAetB,SAAU,aAAc,CAC5CwE,OAAO,IAETxE,SAASO,aAAU,EANrBN,WAAAG,uBAAAH,YACAC,SAAAE,uBAAAF,UACAC,mBAAAC,uBAAAD,oBAwOE,IAAIsE,SAhDS,CACXvB,YAAaA,YACbgB,gBAAiBA,gBACjBrC,wBAAyBA,wBACzB6C,gBAtBJ,SAASA,gBAAgBzB,SAAUjB,UAAWD,QAAS4C,YAAaC,eAChE,IAAM9C,UAAYgC,mBAAAA,QAAkBC,aAAad,UAC3C4B,SAAW9C,SAA2B,cAAhB4C,YAC5B,OAAIC,eAAiBC,SAjEzB,SAASC,4BAA4B7B,SAAUjB,UAAWD,QAAS4C,YAAaC,eAC5E,OAAO,IAAIzB,SAAQ,SAAUC,QAASC,QAClC,IAAAF,SAAA,SAAAG,SAAAC,SAAA,OAAAxD,SAAA,CAAO,WAAP,SAAAyD,UAAA,OAAAF,SAAAtC,wBAAAwC,aAAAD,YAAiBjB,MAAK,SAAAyC,OAAyB,IAAbC,OAAaD,MAAtBxE,QACf0E,MAAQ,GAEdA,MAAMC,KAAK,CACPC,KAAMrC,WAAAA,QAAUC,UAAU,uBAC1BqC,GAAI,SACJC,KAAM,WAGU,eAAhBV,YACAM,MAAMC,KAAK,CACPC,KAAMrC,WAAAA,QAAUC,UAAU,uBAC1BqC,GAAI,cACJC,KAAM,WAGVJ,MAAMC,KAAK,CACPC,KAAMrC,WAAAA,QAAUC,UAAU,yBAC1BqC,GAAI,cACJC,KAAM,WAIdJ,MAAMC,KAAK,CACPC,KAAMrC,WAAAA,QAAUC,UAAU,sBAC1BqC,GAAI,oBACJC,KAAM,WAGVL,OAAO,CAEHtB,KAAMZ,WAAAA,QAAUC,UAAU,uCAC1BuC,QAASL,QAEV3C,MAAK,SAAUiD,QACd,IAAMzD,UAAYgC,mBAAAA,QAAkBC,aAAad,UAElC,gBAAXsC,QACArD,SAAAA,QAAQC,OAERe,YAAYpB,UAAWC,SAAS,GAAMO,KAAKc,QAASC,SAClC,sBAAXkC,QACPrD,SAAAA,QAAQC,OAERL,UAAU0D,wBAAwBZ,eAAetC,MAAK,WAClD,IAAAa,SAAA,SAAAG,SAAAC,SAAA,OAAAxD,SAAA,CAAO,UAAP,SAAAyD,UAAA,OAAAF,SAAAtC,wBAAAwC,aAAAD,YAAgBjB,MAAK,SAAAmD,QACjBlB,EADyCkB,MAArBlF,SACduC,WAAAA,QAAUC,UAAU,uBAG9Bb,SAAAA,QAAQU,OACRQ,YACDC,SAEHD,YAELC,cAUAyB,CAA4B7B,SAAUjB,EAAWD,QAAS4C,YAAaC,eACvEC,UAAY7C,UAGZH,wBAAwBC,UAAWC,QAASC,WAAW,GACvDA,UAEAkC,gBAAgBpC,UAAWE,WAE3BmB,QAAQE,UASnBL,4BAA6BA,4BAC7B0C,kCA/IJ,SAASA,kCAAkC3D,QAASkB,UAChD,OAAO,IAAIE,SAAQ,SAAUC,QAASC,QAClC,IAAAF,SAAA,SAAAG,SAAAC,SAAA,OAAAxD,SAAA,CAAO,YAAP,SAAAyD,UAAA,OAAAF,SAAAtC,wBAAAwC,aAAAD,YAAkBjB,MAAK,SAAAqD,OAA0BA,MAAvBpF,QACdA,QAAQ,CAEZmD,KAAMZ,WAAAA,QAAUC,UAAU,uCAC1BY,QAAS,SACTC,YAAad,WAAAA,QAAUC,UAAU,sBACjCc,WAAYf,WAAAA,QAAUC,UAAU,sBAEjCT,MAAK,WACJJ,SAAAA,QAAQC,OAEU2B,mBAAAA,QAAkBC,aAAad,UACvCuC,wBAAwBzD,SAASO,MAAK,WAC5C,IAAAa,SAAA,SAAAG,SAAAC,SAAA,OAAAxD,SAAA,CAAO,UAAP,SAAAyD,UAAA,OAAAF,SAAAtC,wBAAAwC,aAAAD,YAAgBjB,MAAK,SAAAsD,QACjBrB,EADuCqB,MAApBrF,SACbuC,WAAAA,QAAUC,UAAU,uBAG9Bb,SAAAA,QAAQU,OACRQ,YACDC,UACJA,gBA2KbrD,SAASO,QAAUkE","file":"recordinghelper.js","sourcesContent":["import globalize from 'globalize';\nimport loading from 'loading';\nimport connectionManager from 'connectionManager';\n\n/*eslint prefer-const: \"error\"*/\n\nfunction changeRecordingToSeries(apiClient, timerId, programId, confirmTimerCancellation) {\n    loading.show();\n\n    return apiClient.getItem(apiClient.getCurrentUserId(), programId).then(function (item) {\n        if (item.IsSeries) {\n            // create series\n            return apiClient.getNewLiveTvTimerDefaults({ programId: programId }).then(function (timerDefaults) {\n                return apiClient.createLiveTvSeriesTimer(timerDefaults).then(function () {\n                    loading.hide();\n                    sendToast(globalize.translate('SeriesRecordingScheduled'));\n                });\n            });\n        } else {\n            // cancel\n            if (confirmTimerCancellation) {\n                return cancelTimerWithConfirmation(timerId, apiClient.serverId());\n            }\n\n            return cancelTimer(apiClient.serverId(), timerId, true);\n        }\n    });\n}\n\nfunction cancelTimerWithConfirmation(timerId, serverId) {\n    return new Promise(function (resolve, reject) {\n        import('confirm').then(({ default: confirm }) => {\n            confirm.default({\n\n                text: globalize.translate('MessageConfirmRecordingCancellation'),\n                primary: 'delete',\n                confirmText: globalize.translate('HeaderCancelRecording'),\n                cancelText: globalize.translate('HeaderKeepRecording')\n\n            }).then(function () {\n                loading.show();\n\n                const apiClient = connectionManager.getApiClient(serverId);\n                cancelTimer(apiClient, timerId, true).then(resolve, reject);\n            }, reject);\n        });\n    });\n}\n\nfunction cancelSeriesTimerWithConfirmation(timerId, serverId) {\n    return new Promise(function (resolve, reject) {\n        import('confirm').then(({ default: confirm }) => {\n            confirm.default({\n\n                text: globalize.translate('MessageConfirmRecordingCancellation'),\n                primary: 'delete',\n                confirmText: globalize.translate('HeaderCancelSeries'),\n                cancelText: globalize.translate('HeaderKeepSeries')\n\n            }).then(function () {\n                loading.show();\n\n                const apiClient = connectionManager.getApiClient(serverId);\n                apiClient.cancelLiveTvSeriesTimer(timerId).then(function () {\n                    import('toast').then(({default: toast}) => {\n                        toast(globalize.translate('SeriesCancelled'));\n                    });\n\n                    loading.hide();\n                    resolve();\n                }, reject);\n            }, reject);\n        });\n    });\n}\n\nfunction cancelTimer(apiClient, timerId, hideLoading) {\n    loading.show();\n    return apiClient.cancelLiveTvTimer(timerId).then(function () {\n        if (hideLoading !== false) {\n            loading.hide();\n            sendToast(globalize.translate('RecordingCancelled'));\n        }\n    });\n}\n\nfunction createRecording(apiClient, programId, isSeries) {\n    loading.show();\n    return apiClient.getNewLiveTvTimerDefaults({ programId: programId }).then(function (item) {\n        const promise = isSeries ?\n            apiClient.createLiveTvSeriesTimer(item) :\n            apiClient.createLiveTvTimer(item);\n\n        return promise.then(function () {\n            loading.hide();\n            sendToast(globalize.translate('RecordingScheduled'));\n        });\n    });\n}\n\nfunction sendToast(msg) {\n    import('toast').then(({ default: toast }) => {\n        toast(msg);\n    });\n}\n\nfunction showMultiCancellationPrompt(serverId, programId, timerId, timerStatus, seriesTimerId) {\n    return new Promise(function (resolve, reject) {\n        import('dialog').then(({ default: dialog }) => {\n            const items = [];\n\n            items.push({\n                name: globalize.translate('HeaderKeepRecording'),\n                id: 'cancel',\n                type: 'submit'\n            });\n\n            if (timerStatus === 'InProgress') {\n                items.push({\n                    name: globalize.translate('HeaderStopRecording'),\n                    id: 'canceltimer',\n                    type: 'cancel'\n                });\n            } else {\n                items.push({\n                    name: globalize.translate('HeaderCancelRecording'),\n                    id: 'canceltimer',\n                    type: 'cancel'\n                });\n            }\n\n            items.push({\n                name: globalize.translate('HeaderCancelSeries'),\n                id: 'cancelseriestimer',\n                type: 'cancel'\n            });\n\n            dialog({\n\n                text: globalize.translate('MessageConfirmRecordingCancellation'),\n                buttons: items\n\n            }).then(function (result) {\n                const apiClient = connectionManager.getApiClient(serverId);\n\n                if (result === 'canceltimer') {\n                    loading.show();\n\n                    cancelTimer(apiClient, timerId, true).then(resolve, reject);\n                } else if (result === 'cancelseriestimer') {\n                    loading.show();\n\n                    apiClient.cancelLiveTvSeriesTimer(seriesTimerId).then(function () {\n                        import('toast').then(({ default: toast }) => {\n                            toast(globalize.translate('SeriesCancelled'));\n                        });\n\n                        loading.hide();\n                        resolve();\n                    }, reject);\n                } else {\n                    resolve();\n                }\n            }, reject);\n        });\n    });\n}\n\nfunction toggleRecording(serverId, programId, timerId, timerStatus, seriesTimerId) {\n    const apiClient = connectionManager.getApiClient(serverId);\n    const hasTimer = timerId && timerStatus !== 'Cancelled';\n    if (seriesTimerId && hasTimer) {\n        // cancel\n        return showMultiCancellationPrompt(serverId, programId, timerId, timerStatus, seriesTimerId);\n    } else if (hasTimer && programId) {\n        // change to series recording, if possible\n        // otherwise cancel individual recording\n        return changeRecordingToSeries(apiClient, timerId, programId, true);\n    } else if (programId) {\n        // schedule recording\n        return createRecording(apiClient, programId);\n    } else {\n        return Promise.reject();\n    }\n}\n\nexport default {\n    cancelTimer: cancelTimer,\n    createRecording: createRecording,\n    changeRecordingToSeries: changeRecordingToSeries,\n    toggleRecording: toggleRecording,\n    cancelTimerWithConfirmation: cancelTimerWithConfirmation,\n    cancelSeriesTimerWithConfirmation: cancelSeriesTimerWithConfirmation\n};\n\n"]}