{"version":3,"sources":["components/recordingcreator/recordingeditor.js"],"names":["define","_require","_exports","_dialogHelper","_globalize","_layoutManager","_connectionManager","_loading","_scrollHelper","_scrollStyles","_embyButton","_embyCollapse","_embyInput","_paperIconButtonLight","_formdialog","_recordingcreator","_materialIcons","_flexStyles","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","currentDialog","value","currentItemId","currentServerId","currentResolve","recordingDeleted","closeDialog","isDeleted","dialogHelper","close","onSubmit","e","form","this","apiClient","connectionManager","getApiClient","getLiveTvTimer","then","item","PrePaddingSeconds","querySelector","PostPaddingSeconds","updateLiveTvTimer","preventDefault","init","context","addEventListener","deleteTimer","timerId","Promise","_resolve","_reject","imported","_ref","cancelTimerWithConfirmation","serverId","reload","id","loading","show","result","renderTimer","hide","_default","showEditor","itemId","options","resolve","reject","_ref2","template","dialogOptions","removeOnClose","scrollY","layoutManager","tv","size","dlg","createDialog","classList","add","style","html","globalize","translateHtml","innerHTML","enableCancel","click","updated","deleted","scrollHelper","centerFocus","on","open"],"mappings":"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","file":"recordingeditor.js","sourcesContent":["import dialogHelper from 'dialogHelper';\nimport globalize from 'globalize';\nimport layoutManager from 'layoutManager';\nimport connectionManager from 'connectionManager';\nimport loading from 'loading';\nimport scrollHelper from 'scrollHelper';\nimport 'scrollStyles';\nimport 'emby-button';\nimport 'emby-collapse';\nimport 'emby-input';\nimport 'paper-icon-button-light';\nimport 'css!./../formdialog';\nimport 'css!./recordingcreator';\nimport 'material-icons';\nimport 'flexStyles';\n\nlet currentDialog;\nlet recordingDeleted = false;\nlet currentItemId;\nlet currentServerId;\nlet currentResolve;\n\nfunction deleteTimer(apiClient, timerId) {\n    return import('recordingHelper').then(({ default: recordingHelper }) => {\n        recordingHelper.cancelTimerWithConfirmation(timerId, apiClient.serverId());\n    });\n}\n\nfunction renderTimer(context, item, apiClient) {\n    context.querySelector('#txtPrePaddingMinutes').value = item.PrePaddingSeconds / 60;\n    context.querySelector('#txtPostPaddingMinutes').value = item.PostPaddingSeconds / 60;\n\n    loading.hide();\n}\n\nfunction closeDialog(isDeleted) {\n    recordingDeleted = isDeleted;\n    dialogHelper.close(currentDialog);\n}\n\nfunction onSubmit(e) {\n    const form = this;\n\n    const apiClient = connectionManager.getApiClient(currentServerId);\n\n    apiClient.getLiveTvTimer(currentItemId).then(function (item) {\n        item.PrePaddingSeconds = form.querySelector('#txtPrePaddingMinutes').value * 60;\n        item.PostPaddingSeconds = form.querySelector('#txtPostPaddingMinutes').value * 60;\n        apiClient.updateLiveTvTimer(item).then(currentResolve);\n    });\n\n    e.preventDefault();\n\n    // Disable default form submission\n    return false;\n}\n\nfunction init(context) {\n    context.querySelector('.btnCancel').addEventListener('click', function () {\n        closeDialog(false);\n    });\n\n    context.querySelector('.btnCancelRecording').addEventListener('click', function () {\n        const apiClient = connectionManager.getApiClient(currentServerId);\n\n        deleteTimer(apiClient, currentItemId).then(function () {\n            closeDialog(true);\n        });\n    });\n\n    context.querySelector('form').addEventListener('submit', onSubmit);\n}\n\nfunction reload(context, id) {\n    loading.show();\n    currentItemId = id;\n\n    const apiClient = connectionManager.getApiClient(currentServerId);\n    apiClient.getLiveTvTimer(id).then(function (result) {\n        renderTimer(context, result, apiClient);\n        loading.hide();\n    });\n}\n\nfunction showEditor(itemId, serverId, options) {\n    return new Promise(function (resolve, reject) {\n        recordingDeleted = false;\n        currentServerId = serverId;\n        loading.show();\n        options = options || {};\n        currentResolve = resolve;\n\n        import('text!./recordingeditor.template.html').then(({default: template}) => {\n            const dialogOptions = {\n                removeOnClose: true,\n                scrollY: false\n            };\n\n            if (layoutManager.tv) {\n                dialogOptions.size = 'fullscreen';\n            }\n\n            const dlg = dialogHelper.createDialog(dialogOptions);\n\n            dlg.classList.add('formDialog');\n            dlg.classList.add('recordingDialog');\n\n            if (!layoutManager.tv) {\n                dlg.style['min-width'] = '20%';\n                dlg.classList.add('dialog-fullscreen-lowres');\n            }\n\n            let html = '';\n\n            html += globalize.translateHtml(template, 'core');\n\n            dlg.innerHTML = html;\n\n            if (options.enableCancel === false) {\n                dlg.querySelector('.formDialogFooter').classList.add('hide');\n            }\n\n            currentDialog = dlg;\n\n            dlg.addEventListener('closing', function () {\n                if (!recordingDeleted) {\n                    dlg.querySelector('.btnSubmit').click();\n                }\n            });\n\n            dlg.addEventListener('close', function () {\n                if (recordingDeleted) {\n                    resolve({\n                        updated: true,\n                        deleted: true\n                    });\n                }\n            });\n\n            if (layoutManager.tv) {\n                scrollHelper.centerFocus.on(dlg.querySelector('.formDialogContent'), false);\n            }\n\n            init(dlg);\n\n            reload(dlg, itemId);\n\n            dialogHelper.open(dlg);\n        });\n    });\n}\n\nexport default {\n    show: showEditor\n};\n"]}