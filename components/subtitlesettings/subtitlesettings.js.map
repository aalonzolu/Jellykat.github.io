{"version":3,"sources":["components/subtitlesettings/subtitlesettings.js"],"names":["define","_require","_exports","_globalize","_apphost","_appSettings","_focusManager","_layoutManager","_loading","_connectionManager","_subtitleAppearanceHelper","_settingsHelper","_dom","_events","_listViewStyle","_embySelect","_embySlider","_embyInput","_embyCheckbox","_flexStyles","_subtitlesettings","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","call","desc","set","getSubtitleAppearanceObject","context","appearanceSettings","textSize","querySelector","value","dropShadow","font","textBackground","textColor","verticalPosition","save","instance","userId","userSettings","apiClient","enableSaveConfirmation","loading","show","appSettings","getUser","then","user","saveUser","userSettingsInstance","appearanceKey","getSubtitleAppearanceSettings","assign","setSubtitleAppearanceSettings","Configuration","SubtitleLanguagePreference","SubtitleMode","updateUserConfiguration","Id","hide","Promise","_resolve","_reject","imported","_ref","toast","globalize","translate","events","trigger","onSubtitleModeChange","e","view","dom","parentWithClass","subtitlesHelp","querySelectorAll","classList","add","this","remove","onAppearanceFieldChange","elements","window","text","preview","subtitleAppearanceHelper","applyStyles","SubtitleSettings","subtitlePreviewTimer","showSubtitlePreview","persistent","clearTimeout","_fullPreview","_refFullPreview","setTimeout","hideSubtitlePreview","bind","options","_classCallCheck","Constructor","TypeError","embed","self","_ref2","template","element","innerHTML","translateHtml","addEventListener","onSubmit","enableSaveButton","appHost","supports","sliderVerticalPosition","eventPrefix","PointerEvent","concat","layoutManager","tv","enableKeyboardDragging","checked","loadData","autoFocus","focusManager","_createClass","protoProps","staticProps","connectionManager","getApiClient","serverId","setUserInfo","dataLoaded","loadForm","getCultures","allCultures","Policy","EnableVideoPlaybackTranscoding","selectSubtitleLanguage","settingsHelper","populateLanguages","dispatchEvent","CustomEvent","submit","destroy","preventDefault","_default"],"mappings":"AAAAA,OAAO,CAAC,UAAW,UAAW,YAAa,UAAW,cAAe,eAAgB,gBAAiB,UAAW,oBAAqB,2BAA4B,iBAAkB,MAAO,SAAU,gBAAiB,cAAe,cAAe,aAAc,gBAAiB,aAAc,2BAA2B,SAAUC,SAAUC,SAAUC,WAAYC,SAAUC,aAAcC,cAAeC,eAAgBC,SAAUC,mBAAoBC,0BAA2BC,gBAAiBC,KAAMC,QAASC,eAAgBC,YAAaC,YAAaC,WAAYC,cAAeC,YAAaC,mBACtkB,aAkBA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KAEvF,SAASG,QAAQH,KAAmV,OAAtOG,QAArD,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAmC,SAASF,QAAQH,KAAO,cAAcA,KAA2B,SAASG,QAAQH,KAAO,OAAOA,KAAyB,mBAAXI,QAAyBJ,IAAIM,cAAgBF,QAAUJ,MAAQI,OAAOG,UAAY,gBAAkBP,MAAyBA,KAInX,SAASQ,kBAAkBC,OAAQC,OAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,IAAIE,WAAaH,MAAMC,GAAIE,WAAWC,WAAaD,WAAWC,aAAc,EAAOD,WAAWE,cAAe,EAAU,UAAWF,aAAYA,WAAWG,UAAW,GAAMC,OAAOC,eAAeT,OAAQI,WAAWM,IAAKN,aAI7S,SAASO,2BAA6B,GAAuB,mBAAZC,QAAwB,OAAO,KAAM,IAAIC,MAAQ,IAAID,QAA6F,OAAlFD,yBAA2B,SAASA,2BAA6B,OAAOE,OAAiBA,MAE1M,SAASC,wBAAwBvB,KAAO,GAAIA,KAAOA,IAAIC,WAAc,OAAOD,IAAO,GAAY,OAARA,KAAiC,WAAjBG,QAAQH,MAAoC,mBAARA,IAAsB,MAAO,CAAEE,QAASF,KAAS,IAAIsB,MAAQF,2BAA4B,GAAIE,OAASA,MAAME,IAAIxB,KAAQ,OAAOsB,MAAMG,IAAIzB,KAAQ,IAAI0B,OAAS,GAAQC,sBAAwBV,OAAOC,gBAAkBD,OAAOW,yBAA0B,IAAK,IAAIT,OAAOnB,IAAO,GAAIiB,OAAOV,UAAUsB,eAAeC,KAAK9B,IAAKmB,KAAM,CAAE,IAAIY,KAAOJ,sBAAwBV,OAAOW,yBAAyB5B,IAAKmB,KAAO,KAAUY,OAASA,KAAKN,KAAOM,KAAKC,KAAQf,OAAOC,eAAeQ,OAAQP,IAAKY,MAAgBL,OAAOP,KAAOnB,IAAImB,KAAyE,OAA7DO,OAAOxB,QAAUF,IAASsB,OAASA,MAAMU,IAAIhC,IAAK0B,QAAkBA,OAPluB,SAASO,4BAA4BC,SACjC,IAAMC,mBAAqB,GAS3B,OAPAA,mBAAmBC,SAAWF,QAAQG,cAAc,mBAAmBC,MACvEH,mBAAmBI,WAAaL,QAAQG,cAAc,qBAAqBC,MAC3EH,mBAAmBK,KAAON,QAAQG,cAAc,eAAeC,MAC/DH,mBAAmBM,eAAiBP,QAAQG,cAAc,wBAAwBC,MAClFH,mBAAmBO,UAAYR,QAAQG,cAAc,mBAAmBC,MACxEH,mBAAmBQ,iBAAmBT,QAAQG,cAAc,2BAA2BC,MAEhFH,mBA+CX,SAASS,KAAKC,SAAUX,QAASY,OAAQC,aAAcC,UAAWC,wBAC9DC,SAAAA,QAAQC,OAERC,aAAAA,QAAYpB,IAAI,iBAAkBE,QAAQG,cAAc,yBAAyBC,OAEjFU,UAAUK,QAAQP,QAAQQ,MAAK,SAAUC,OAjB7C,SAASC,SAAStB,QAASqB,KAAME,qBAAsBC,cAAeV,WAClE,IAAIb,mBAAqBsB,qBAAqBE,8BAA8BD,eAQ5E,OAPAvB,mBAAqBlB,OAAO2C,OAAOzB,mBAAoBF,4BAA4BC,UAEnFuB,qBAAqBI,8BAA8B1B,mBAAoBuB,eAEvEH,KAAKO,cAAcC,2BAA6B7B,QAAQG,cAAc,2BAA2BC,MACjGiB,KAAKO,cAAcE,aAAe9B,QAAQG,cAAc,+BAA+BC,MAEhFU,UAAUiB,wBAAwBV,KAAKW,GAAIX,KAAKO,gBASnDN,CAAStB,QAASqB,KAAMR,aAAcF,SAASa,cAAeV,WAAWM,MAAK,WAC1EJ,SAAAA,QAAQiB,OACJlB,wBACA,IAAAmB,SAAA,SAAAC,SAAAC,SAAA,OAAA3F,SAAA,CAAO,UAAP,SAAA4F,UAAA,OAAAF,SAAA9C,wBAAAgD,aAAAD,YAAgBhB,MAAK,SAAAkB,OACjBC,EADuCD,KAApBtE,SACbwE,WAAAA,QAAUC,UAAU,qBAIlCC,QAAAA,QAAOC,QAAQhC,SAAU,YAC1B,WACCK,SAAAA,QAAQiB,aAKpB,SAASW,qBAAqBC,GAI1B,IAHA,IAAMC,KAAOC,KAAAA,QAAIC,gBAAgBH,EAAEtE,OAAQ,oBAErC0E,cAAgBH,KAAKI,iBAAiB,kBACnCzE,EAAI,EAAGC,OAASuE,cAAcvE,OAAQD,EAAIC,OAAQD,IACvDwE,cAAcxE,GAAG0E,UAAUC,IAAI,QAEnCN,KAAK3C,cAAc,aAAekD,KAAKjD,MAAQ,QAAQ+C,UAAUG,OAAO,QAG5E,SAASC,wBAAwBV,GAC7B,IAAMC,KAAOC,KAAAA,QAAIC,gBAAgBH,EAAEtE,OAAQ,oBAErC0B,mBAAqBF,4BAA4B+C,MAEjDU,SAAW,CACbC,OAAQX,KAAK3C,cAAc,sCAC3BuD,KAAMZ,KAAK3C,cAAc,oCACzBwD,SAAS,GAGbC,0BAAAA,QAAyBC,YAAYL,SAAUvD,oBAE/C2D,0BAAAA,QAAyBC,YAAY,CACjCJ,OAAQX,KAAK3C,cAAc,0CAC3BuD,KAAMZ,KAAK3C,cAAc,yCAC1BF,oBA7HLlB,OAAOC,eAAetC,SAAU,aAAc,CAC5C0D,OAAO,IAET1D,SAASsB,QAAUtB,SAASoH,sBAAmB,EANjDnH,WAAAkB,uBAAAlB,YACAC,SAAAiB,uBAAAjB,UACAC,aAAAgB,uBAAAhB,cACAC,cAAAe,uBAAAf,eACAC,eAAAc,uBAAAd,gBACAC,SAAAa,uBAAAb,UACAC,mBAAAY,uBAAAZ,oBACAC,0BAAAW,uBAAAX,2BACAC,gBAAAU,uBAAAV,iBACAC,KAAAS,uBAAAT,MACAC,QAAAQ,uBAAAR,SAyHA,IACI0G,qBAEJ,SAASC,oBAAoBC,YACzBC,aAAaH,sBAEbV,KAAKc,aAAahB,UAAUG,OAAO,uCAE/BW,YACAZ,KAAKe,kBAGoB,IAAzBf,KAAKe,kBACLL,qBAAuBM,WAAWC,oBAAoBC,KAAKlB,MAbtC,MAiB7B,SAASiB,oBAAoBL,YACzBC,aAAaH,sBAETE,YACAZ,KAAKe,kBAGoB,IAAzBf,KAAKe,iBACLf,KAAKc,aAAahB,UAAUC,IAAI,uCAoFtC,IApBWU,iBAoByB,WAnBlC,SAAAA,iBAAYU,UAtMd,SAASC,gBAAgB9D,SAAU+D,aAAe,KAAM/D,oBAAoB+D,aAAgB,MAAM,IAAIC,UAAU,qCAsMzFF,CAAApB,KAAAS,kBACjBT,KAAKmB,QAAUA,QA9DvB,SAASI,MAAMJ,QAASK,MACpB,IAAA3C,SAAA,SAAAC,SAAAC,SAAA,OAAA3F,SAAA,CAAO,0CAAP,SAAA4F,UAAA,OAAAF,SAAA9C,wBAAAgD,aAAAD,YAAgDhB,MAAK,SAAA0D,OAAyB,IAAdC,SAAcD,MAAvB9G,QAiBnD,GAhBAwG,QAAQQ,QAAQ7B,UAAUC,IAAI,oBAC9BoB,QAAQQ,QAAQC,UAAYzC,WAAAA,QAAU0C,cAAcH,SAAU,QAE9DP,QAAQQ,QAAQ7E,cAAc,QAAQgF,iBAAiB,SAAUN,KAAKO,SAASb,KAAKM,OAEpFL,QAAQQ,QAAQ7E,cAAc,+BAA+BgF,iBAAiB,SAAUvC,sBACxF4B,QAAQQ,QAAQ7E,cAAc,mBAAmBgF,iBAAiB,SAAU5B,yBAC5EiB,QAAQQ,QAAQ7E,cAAc,qBAAqBgF,iBAAiB,SAAU5B,yBAC9EiB,QAAQQ,QAAQ7E,cAAc,eAAegF,iBAAiB,SAAU5B,yBACxEiB,QAAQQ,QAAQ7E,cAAc,mBAAmBgF,iBAAiB,SAAU5B,yBAC5EiB,QAAQQ,QAAQ7E,cAAc,wBAAwBgF,iBAAiB,SAAU5B,yBAE7EiB,QAAQa,kBACRb,QAAQQ,QAAQ7E,cAAc,YAAYgD,UAAUG,OAAO,QAG3DgC,SAAAA,QAAQC,SAAS,8BAA+B,CAChDf,QAAQQ,QAAQ7E,cAAc,8BAA8BgD,UAAUG,OAAO,QAE7EuB,KAAKV,aAAeK,QAAQQ,QAAQ7E,cAAc,mCAClD0E,KAAKT,gBAAkB,EAEvB,IAAMoB,uBAAyBhB,QAAQQ,QAAQ7E,cAAc,2BAC7DqF,uBAAuBL,iBAAiB,QAAS5B,yBACjDiC,uBAAuBL,iBAAiB,SAAS,WAAA,OAAMnB,oBAAoBpE,KAAKiF,SAEhF,IAAMY,YAAchC,OAAOiC,aAAe,UAAY,QACtDF,uBAAuBL,iBAAvB,GAAAQ,OAA2CF,YAA3C,UAA+D,WAAA,OAAMzB,oBAAoBpE,KAAKiF,MAAM,MACpGW,uBAAuBL,iBAAvB,GAAAQ,OAA2CF,YAA3C,UAA+D,WAAA,OAAMnB,oBAAoB1E,KAAKiF,MAAM,MAEhGe,eAAAA,QAAcC,KACdL,uBAAuBL,iBAAiB,SAAS,WAAA,OAAMnB,oBAAoBpE,KAAKiF,MAAM,MACtFW,uBAAuBL,iBAAiB,QAAQ,WAAA,OAAMb,oBAAoB1E,KAAKiF,MAAM,MAGrFR,YAAW,WACPmB,uBAAuBrC,UAAUC,IAAI,aACrCoC,uBAAuBM,2BACxB,IAGPtB,QAAQQ,QAAQ7E,cAAc,eAAegF,iBAAiB,UAAU,SAACtC,GACjEA,EAAEtE,OAAOwH,QACT/B,oBAAoBpE,KAAKiF,MAAM,GAE/BP,oBAAoB1E,KAAKiF,MAAM,MAK3CA,KAAKmB,WAEDxB,QAAQyB,WACRC,cAAAA,QAAaD,UAAUzB,QAAQQ,YASnCJ,CAAMJ,QAASnB,MA6EnB,OAlRF,SAAS8C,aAAazB,YAAa0B,WAAYC,aAAmJ,OAAhID,YAAY9H,kBAAkBoG,YAAYrG,UAAW+H,YAAiBC,aAAa/H,kBAAkBoG,YAAa2B,aAAqB3B,YA6NvMyB,CAAarC,iBAAkB,CAAC,CAC9B7E,IAAK,WACLmB,MAAO,SAAS4F,WAtBd,IAAMnB,KAAOxB,KACPrD,QAAU6E,KAAKL,QAAQQ,QAE7BhE,SAAAA,QAAQC,OAER,IAAML,OAASiE,KAAKL,QAAQ5D,OACtBE,UAAYwF,mBAAAA,QAAkBC,aAAa1B,KAAKL,QAAQgC,UACxD3F,aAAegE,KAAKL,QAAQ3D,aAElCC,UAAUK,QAAQP,QAAQQ,MAAK,SAAUC,MACrCR,aAAa4F,YAAY7F,OAAQE,WAAWM,MAAK,WAC7CyD,KAAK6B,YAAa,EAElB,IAAMzG,mBAAqBY,aAAaY,8BAA8BoD,KAAKL,QAAQhD,gBA5MnG,SAASmF,SAAS3G,QAASqB,KAAMR,aAAcZ,mBAAoBa,WAC/DA,UAAU8F,cAAcxF,MAAK,SAAUyF,aAC/BvB,SAAAA,QAAQC,SAAS,yBAA2BlE,KAAKyF,OAAOC,gCACxD/G,QAAQG,cAAc,cAAcgD,UAAUG,OAAO,QAGzD,IAAM0D,uBAAyBhH,QAAQG,cAAc,2BAErD8G,gBAAAA,QAAeC,kBAAkBF,uBAAwBH,aAEzDG,uBAAuB5G,MAAQiB,KAAKO,cAAcC,4BAA8B,GAChF7B,QAAQG,cAAc,+BAA+BC,MAAQiB,KAAKO,cAAcE,cAAgB,GAEhG9B,QAAQG,cAAc,+BAA+BgH,cAAc,IAAIC,YAAY,SAAU,KAE7FpH,QAAQG,cAAc,mBAAmBC,MAAQH,mBAAmBC,UAAY,GAChFF,QAAQG,cAAc,qBAAqBC,MAAQH,mBAAmBI,YAAc,GACpFL,QAAQG,cAAc,wBAAwBC,MAAQH,mBAAmBM,gBAAkB,cAC3FP,QAAQG,cAAc,mBAAmBC,MAAQH,mBAAmBO,WAAa,UACjFR,QAAQG,cAAc,eAAeC,MAAQH,mBAAmBK,MAAQ,GACxEN,QAAQG,cAAc,2BAA2BC,MAAQH,mBAAmBQ,iBAE5ET,QAAQG,cAAc,yBAAyBC,MAAQc,aAAAA,QAAY3B,IAAI,mBAAqB,GAE5FgE,wBAAwB,CACpBhF,OAAQyB,QAAQG,cAAc,qBAGlCa,SAAAA,QAAQiB,UAkLA0E,CAAS3G,QAASqB,KAAMR,EAAcZ,mBAAoBa,mBA0BnE,CACD7B,IAAK,SACLmB,MAAO,SAASiH,SAtBdhE,KAAK+B,SAAS,QAyBf,CACDnG,IAAK,UACLmB,MAAO,SAASkH,UAvBdjE,KAAKmB,QAAU,OA0BhB,CACDvF,IAAK,WACLmB,MAAO,SAASgF,SAzBTvC,GACL,IAAMgC,KAAOxB,KACPvC,UAAYwF,mBAAAA,QAAkBC,aAAa1B,KAAKL,QAAQgC,UACxD5F,OAASiE,KAAKL,QAAQ5D,OACtBC,aAAegE,KAAKL,QAAQ3D,aAWlC,OATAA,aAAa4F,YAAY7F,OAAQE,WAAWM,MAAK,WAC7C,IAAML,uBAAyB8D,KAAKL,QAAQzD,uBAC5CL,KAAKmE,KAAMA,KAAKL,QAAQQ,QAASpE,OAAQC,aAAcC,UAAWC,2BAIlE8B,GACAA,EAAE0E,kBAEC,MA8BJzD,iBA7D2B,GAgEpCpH,SAASoH,iBAAmBA,iBAC5B,IAAI0D,SA9BS1D,iBA+BbpH,SAASsB,QAAUwJ","file":"subtitlesettings.js","sourcesContent":["import globalize from 'globalize';\nimport appHost from 'apphost';\nimport appSettings from 'appSettings';\nimport focusManager from 'focusManager';\nimport layoutManager from 'layoutManager';\nimport loading from 'loading';\nimport connectionManager from 'connectionManager';\nimport subtitleAppearanceHelper from 'subtitleAppearanceHelper';\nimport settingsHelper from 'settingsHelper';\nimport dom from 'dom';\nimport events from 'events';\nimport 'listViewStyle';\nimport 'emby-select';\nimport 'emby-slider';\nimport 'emby-input';\nimport 'emby-checkbox';\nimport 'flexStyles';\nimport 'css!./subtitlesettings';\n\n/**\n * Subtitle settings.\n * @module components/subtitleSettings/subtitleSettings\n */\n\nfunction getSubtitleAppearanceObject(context) {\n    const appearanceSettings = {};\n\n    appearanceSettings.textSize = context.querySelector('#selectTextSize').value;\n    appearanceSettings.dropShadow = context.querySelector('#selectDropShadow').value;\n    appearanceSettings.font = context.querySelector('#selectFont').value;\n    appearanceSettings.textBackground = context.querySelector('#inputTextBackground').value;\n    appearanceSettings.textColor = context.querySelector('#inputTextColor').value;\n    appearanceSettings.verticalPosition = context.querySelector('#sliderVerticalPosition').value;\n\n    return appearanceSettings;\n}\n\nfunction loadForm(context, user, userSettings, appearanceSettings, apiClient) {\n    apiClient.getCultures().then(function (allCultures) {\n        if (appHost.supports('subtitleburnsettings') && user.Policy.EnableVideoPlaybackTranscoding) {\n            context.querySelector('.fldBurnIn').classList.remove('hide');\n        }\n\n        const selectSubtitleLanguage = context.querySelector('#selectSubtitleLanguage');\n\n        settingsHelper.populateLanguages(selectSubtitleLanguage, allCultures);\n\n        selectSubtitleLanguage.value = user.Configuration.SubtitleLanguagePreference || '';\n        context.querySelector('#selectSubtitlePlaybackMode').value = user.Configuration.SubtitleMode || '';\n\n        context.querySelector('#selectSubtitlePlaybackMode').dispatchEvent(new CustomEvent('change', {}));\n\n        context.querySelector('#selectTextSize').value = appearanceSettings.textSize || '';\n        context.querySelector('#selectDropShadow').value = appearanceSettings.dropShadow || '';\n        context.querySelector('#inputTextBackground').value = appearanceSettings.textBackground || 'transparent';\n        context.querySelector('#inputTextColor').value = appearanceSettings.textColor || '#ffffff';\n        context.querySelector('#selectFont').value = appearanceSettings.font || '';\n        context.querySelector('#sliderVerticalPosition').value = appearanceSettings.verticalPosition;\n\n        context.querySelector('#selectSubtitleBurnIn').value = appSettings.get('subtitleburnin') || '';\n\n        onAppearanceFieldChange({\n            target: context.querySelector('#selectTextSize')\n        });\n\n        loading.hide();\n    });\n}\n\nfunction saveUser(context, user, userSettingsInstance, appearanceKey, apiClient) {\n    let appearanceSettings = userSettingsInstance.getSubtitleAppearanceSettings(appearanceKey);\n    appearanceSettings = Object.assign(appearanceSettings, getSubtitleAppearanceObject(context));\n\n    userSettingsInstance.setSubtitleAppearanceSettings(appearanceSettings, appearanceKey);\n\n    user.Configuration.SubtitleLanguagePreference = context.querySelector('#selectSubtitleLanguage').value;\n    user.Configuration.SubtitleMode = context.querySelector('#selectSubtitlePlaybackMode').value;\n\n    return apiClient.updateUserConfiguration(user.Id, user.Configuration);\n}\n\nfunction save(instance, context, userId, userSettings, apiClient, enableSaveConfirmation) {\n    loading.show();\n\n    appSettings.set('subtitleburnin', context.querySelector('#selectSubtitleBurnIn').value);\n\n    apiClient.getUser(userId).then(function (user) {\n        saveUser(context, user, userSettings, instance.appearanceKey, apiClient).then(function () {\n            loading.hide();\n            if (enableSaveConfirmation) {\n                import('toast').then(({default: toast}) => {\n                    toast(globalize.translate('SettingsSaved'));\n                });\n            }\n\n            events.trigger(instance, 'saved');\n        }, function () {\n            loading.hide();\n        });\n    });\n}\n\nfunction onSubtitleModeChange(e) {\n    const view = dom.parentWithClass(e.target, 'subtitlesettings');\n\n    const subtitlesHelp = view.querySelectorAll('.subtitlesHelp');\n    for (let i = 0, length = subtitlesHelp.length; i < length; i++) {\n        subtitlesHelp[i].classList.add('hide');\n    }\n    view.querySelector('.subtitles' + this.value + 'Help').classList.remove('hide');\n}\n\nfunction onAppearanceFieldChange(e) {\n    const view = dom.parentWithClass(e.target, 'subtitlesettings');\n\n    const appearanceSettings = getSubtitleAppearanceObject(view);\n\n    const elements = {\n        window: view.querySelector('.subtitleappearance-preview-window'),\n        text: view.querySelector('.subtitleappearance-preview-text'),\n        preview: true\n    };\n\n    subtitleAppearanceHelper.applyStyles(elements, appearanceSettings);\n\n    subtitleAppearanceHelper.applyStyles({\n        window: view.querySelector('.subtitleappearance-fullpreview-window'),\n        text: view.querySelector('.subtitleappearance-fullpreview-text')\n    }, appearanceSettings);\n}\n\nconst subtitlePreviewDelay = 1000;\nlet subtitlePreviewTimer;\n\nfunction showSubtitlePreview(persistent) {\n    clearTimeout(subtitlePreviewTimer);\n\n    this._fullPreview.classList.remove('subtitleappearance-fullpreview-hide');\n\n    if (persistent) {\n        this._refFullPreview++;\n    }\n\n    if (this._refFullPreview === 0) {\n        subtitlePreviewTimer = setTimeout(hideSubtitlePreview.bind(this), subtitlePreviewDelay);\n    }\n}\n\nfunction hideSubtitlePreview(persistent) {\n    clearTimeout(subtitlePreviewTimer);\n\n    if (persistent) {\n        this._refFullPreview--;\n    }\n\n    if (this._refFullPreview === 0) {\n        this._fullPreview.classList.add('subtitleappearance-fullpreview-hide');\n    }\n}\n\nfunction embed(options, self) {\n    import('text!./subtitlesettings.template.html').then(({default: template}) => {\n        options.element.classList.add('subtitlesettings');\n        options.element.innerHTML = globalize.translateHtml(template, 'core');\n\n        options.element.querySelector('form').addEventListener('submit', self.onSubmit.bind(self));\n\n        options.element.querySelector('#selectSubtitlePlaybackMode').addEventListener('change', onSubtitleModeChange);\n        options.element.querySelector('#selectTextSize').addEventListener('change', onAppearanceFieldChange);\n        options.element.querySelector('#selectDropShadow').addEventListener('change', onAppearanceFieldChange);\n        options.element.querySelector('#selectFont').addEventListener('change', onAppearanceFieldChange);\n        options.element.querySelector('#inputTextColor').addEventListener('change', onAppearanceFieldChange);\n        options.element.querySelector('#inputTextBackground').addEventListener('change', onAppearanceFieldChange);\n\n        if (options.enableSaveButton) {\n            options.element.querySelector('.btnSave').classList.remove('hide');\n        }\n\n        if (appHost.supports('subtitleappearancesettings')) {\n            options.element.querySelector('.subtitleAppearanceSection').classList.remove('hide');\n\n            self._fullPreview = options.element.querySelector('.subtitleappearance-fullpreview');\n            self._refFullPreview = 0;\n\n            const sliderVerticalPosition = options.element.querySelector('#sliderVerticalPosition');\n            sliderVerticalPosition.addEventListener('input', onAppearanceFieldChange);\n            sliderVerticalPosition.addEventListener('input', () => showSubtitlePreview.call(self));\n\n            const eventPrefix = window.PointerEvent ? 'pointer' : 'mouse';\n            sliderVerticalPosition.addEventListener(`${eventPrefix}enter`, () => showSubtitlePreview.call(self, true));\n            sliderVerticalPosition.addEventListener(`${eventPrefix}leave`, () => hideSubtitlePreview.call(self, true));\n\n            if (layoutManager.tv) {\n                sliderVerticalPosition.addEventListener('focus', () => showSubtitlePreview.call(self, true));\n                sliderVerticalPosition.addEventListener('blur', () => hideSubtitlePreview.call(self, true));\n\n                // Give CustomElements time to attach\n                setTimeout(() => {\n                    sliderVerticalPosition.classList.add('focusable');\n                    sliderVerticalPosition.enableKeyboardDragging();\n                }, 0);\n            }\n\n            options.element.querySelector('.chkPreview').addEventListener('change', (e) => {\n                if (e.target.checked) {\n                    showSubtitlePreview.call(self, true);\n                } else {\n                    hideSubtitlePreview.call(self, true);\n                }\n            });\n        }\n\n        self.loadData();\n\n        if (options.autoFocus) {\n            focusManager.autoFocus(options.element);\n        }\n    });\n}\n\nexport class SubtitleSettings {\n    constructor(options) {\n        this.options = options;\n\n        embed(options, this);\n    }\n\n    loadData() {\n        const self = this;\n        const context = self.options.element;\n\n        loading.show();\n\n        const userId = self.options.userId;\n        const apiClient = connectionManager.getApiClient(self.options.serverId);\n        const userSettings = self.options.userSettings;\n\n        apiClient.getUser(userId).then(function (user) {\n            userSettings.setUserInfo(userId, apiClient).then(function () {\n                self.dataLoaded = true;\n\n                const appearanceSettings = userSettings.getSubtitleAppearanceSettings(self.options.appearanceKey);\n\n                loadForm(context, user, userSettings, appearanceSettings, apiClient);\n            });\n        });\n    }\n\n    submit() {\n        this.onSubmit(null);\n    }\n\n    destroy() {\n        this.options = null;\n    }\n\n    onSubmit(e) {\n        const self = this;\n        const apiClient = connectionManager.getApiClient(self.options.serverId);\n        const userId = self.options.userId;\n        const userSettings = self.options.userSettings;\n\n        userSettings.setUserInfo(userId, apiClient).then(function () {\n            const enableSaveConfirmation = self.options.enableSaveConfirmation;\n            save(self, self.options.element, userId, userSettings, apiClient, enableSaveConfirmation);\n        });\n\n        // Disable default form submission\n        if (e) {\n            e.preventDefault();\n        }\n        return false;\n    }\n}\n\nexport default SubtitleSettings;\n"]}