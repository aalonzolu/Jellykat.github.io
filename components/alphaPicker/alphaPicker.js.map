{"version":3,"sources":["components/alphaPicker/alphaPicker.js"],"names":["define","_exports","_focusManager","_layoutManager","_dom","_style","_paperIconButtonLight","_materialIcons","_interopRequireDefault","obj","__esModule","default","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","value","AlphaPicker","selectedButtonClass","focus","selected","this","querySelector","concat","focusManager","autoFocus","getAlphaPickerButtonClassName","vertical","alphaPickerButtonClassName","layoutManager","tv","mapLetters","letters","map","l","getLetterButton","options","_classCallCheck","instance","Constructor","TypeError","self","itemFocusValue","itemFocusTimeout","alphaFocusedElement","alphaFocusTimeout","element","itemsContainer","itemClass","onItemFocusTimeout","onAlphaFocusTimeout","document","activeElement","getAttribute","onAlphaPickerInKeyboardModeClick","e","alphaPickerButton","dom","parentWithClass","dispatchEvent","CustomEvent","cancelable","detail","onAlphaPickerClick","_currentValue","toUpperCase","onAlphaPickerFocusIn","clearTimeout","setTimeout","onItemsFocusIn","item","prefix","enabled","addEventListener","mode","valueChangeEvent","bind","removeEventListener","render","classList","add","contains","html","rowClassName","join","innerHTML","visible","_createClass","protoProps","staticProps","prototype","applyValue","btn","undefined","err","console","error","remove","on","name","fn","off","style","visibility","values","elems","querySelectorAll","push","destroy","_default"],"mappings":"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","file":"alphaPicker.js","sourcesContent":["/* eslint-disable indent */\n\n/**\n * Module alphaPicker.\n * @module components/alphaPicker/alphaPicker\n */\n\nimport focusManager from 'focusManager';\nimport layoutManager from 'layoutManager';\nimport dom from 'dom';\nimport 'css!./style.css';\nimport 'paper-icon-button-light';\nimport 'material-icons';\n\n    const selectedButtonClass = 'alphaPickerButton-selected';\n\n    function focus() {\n        const scope = this;\n        const selected = scope.querySelector(`.${selectedButtonClass}`);\n\n        if (selected) {\n            focusManager.focus(selected);\n        } else {\n            focusManager.autoFocus(scope, true);\n        }\n    }\n\n    function getAlphaPickerButtonClassName(vertical) {\n        let alphaPickerButtonClassName = 'alphaPickerButton';\n\n        if (layoutManager.tv) {\n            alphaPickerButtonClassName += ' alphaPickerButton-tv';\n        }\n\n        if (vertical) {\n            alphaPickerButtonClassName += ' alphaPickerButton-vertical';\n        }\n\n        return alphaPickerButtonClassName;\n    }\n\n    function getLetterButton(l, vertical) {\n        return `<button data-value=\"${l}\" class=\"${getAlphaPickerButtonClassName(vertical)}\">${l}</button>`;\n    }\n\n    function mapLetters(letters, vertical) {\n        return letters.map(l => {\n            return getLetterButton(l, vertical);\n        });\n    }\n\n    function render(element, options) {\n        element.classList.add('alphaPicker');\n\n        if (layoutManager.tv) {\n            element.classList.add('alphaPicker-tv');\n        }\n\n        const vertical = element.classList.contains('alphaPicker-vertical');\n\n        if (!vertical) {\n            element.classList.add('focuscontainer-x');\n        }\n\n        let html = '';\n        let letters;\n\n        const alphaPickerButtonClassName = getAlphaPickerButtonClassName(vertical);\n\n        let rowClassName = 'alphaPickerRow';\n\n        if (vertical) {\n            rowClassName += ' alphaPickerRow-vertical';\n        }\n\n        html += `<div class=\"${rowClassName}\">`;\n        if (options.mode === 'keyboard') {\n            html += `<button data-value=\" \" is=\"paper-icon-button-light\" class=\"${alphaPickerButtonClassName}\"><span class=\"material-icons alphaPickerButtonIcon space_bar\"></span></button>`;\n        } else {\n            letters = ['#'];\n            html += mapLetters(letters, vertical).join('');\n        }\n\n        letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n        html += mapLetters(letters, vertical).join('');\n\n        if (options.mode === 'keyboard') {\n            html += `<button data-value=\"backspace\" is=\"paper-icon-button-light\" class=\"${alphaPickerButtonClassName}\"><span class=\"material-icons alphaPickerButtonIcon backspace\"></span></button>`;\n            html += '</div>';\n\n            letters = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n            html += `<div class=\"${rowClassName}\">`;\n            html += '<br/>';\n            html += mapLetters(letters, vertical).join('');\n            html += '</div>';\n        } else {\n            html += '</div>';\n        }\n\n        element.innerHTML = html;\n\n        element.classList.add('focusable');\n        element.focus = focus;\n    }\n\n    export class AlphaPicker {\n        constructor(options) {\n            const self = this;\n\n            this.options = options;\n\n            const element = options.element;\n            const itemsContainer = options.itemsContainer;\n            const itemClass = options.itemClass;\n\n            let itemFocusValue;\n            let itemFocusTimeout;\n\n            function onItemFocusTimeout() {\n                itemFocusTimeout = null;\n                self.value(itemFocusValue);\n            }\n\n            let alphaFocusedElement;\n            let alphaFocusTimeout;\n\n            function onAlphaFocusTimeout() {\n                alphaFocusTimeout = null;\n\n                if (document.activeElement === alphaFocusedElement) {\n                    const value = alphaFocusedElement.getAttribute('data-value');\n                    self.value(value, true);\n                }\n            }\n\n            function onAlphaPickerInKeyboardModeClick(e) {\n                const alphaPickerButton = dom.parentWithClass(e.target, 'alphaPickerButton');\n\n                if (alphaPickerButton) {\n                    const value = alphaPickerButton.getAttribute('data-value');\n\n                    element.dispatchEvent(new CustomEvent('alphavalueclicked', {\n                        cancelable: false,\n                        detail: {\n                            value\n                        }\n                    }));\n                }\n            }\n\n            function onAlphaPickerClick(e) {\n                const alphaPickerButton = dom.parentWithClass(e.target, 'alphaPickerButton');\n\n                if (alphaPickerButton) {\n                    const value = alphaPickerButton.getAttribute('data-value');\n                    if ((this._currentValue || '').toUpperCase() === value.toUpperCase()) {\n                        this.value(null, true);\n                    } else {\n                        this.value(value, true);\n                    }\n                }\n            }\n\n            function onAlphaPickerFocusIn(e) {\n                if (alphaFocusTimeout) {\n                    clearTimeout(alphaFocusTimeout);\n                    alphaFocusTimeout = null;\n                }\n\n                const alphaPickerButton = dom.parentWithClass(e.target, 'alphaPickerButton');\n\n                if (alphaPickerButton) {\n                    alphaFocusedElement = alphaPickerButton;\n                    alphaFocusTimeout = setTimeout(onAlphaFocusTimeout, 600);\n                }\n            }\n\n            function onItemsFocusIn(e) {\n                const item = dom.parentWithClass(e.target, itemClass);\n\n                if (item) {\n                    const prefix = item.getAttribute('data-prefix');\n                    if (prefix && prefix.length) {\n                        itemFocusValue = prefix[0];\n                        if (itemFocusTimeout) {\n                            clearTimeout(itemFocusTimeout);\n                        }\n                        itemFocusTimeout = setTimeout(onItemFocusTimeout, 100);\n                    }\n                }\n            }\n\n            this.enabled = function (enabled) {\n                if (enabled) {\n                    if (itemsContainer) {\n                        itemsContainer.addEventListener('focus', onItemsFocusIn, true);\n                    }\n\n                    if (options.mode === 'keyboard') {\n                        element.addEventListener('click', onAlphaPickerInKeyboardModeClick);\n                    }\n\n                    if (options.valueChangeEvent !== 'click') {\n                        element.addEventListener('focus', onAlphaPickerFocusIn, true);\n                    } else {\n                        element.addEventListener('click', onAlphaPickerClick.bind(this));\n                    }\n                } else {\n                    if (itemsContainer) {\n                        itemsContainer.removeEventListener('focus', onItemsFocusIn, true);\n                    }\n\n                    element.removeEventListener('click', onAlphaPickerInKeyboardModeClick);\n                    element.removeEventListener('focus', onAlphaPickerFocusIn, true);\n                    element.removeEventListener('click', onAlphaPickerClick.bind(this));\n                }\n            };\n\n            render(element, options);\n\n            this.enabled(true);\n            this.visible(true);\n        }\n\n        value(value, applyValue) {\n            const element = this.options.element;\n            let btn;\n            let selected;\n\n            if (value !== undefined) {\n                if (value != null) {\n                    value = value.toUpperCase();\n                    this._currentValue = value;\n\n                    if (this.options.mode !== 'keyboard') {\n                        selected = element.querySelector(`.${selectedButtonClass}`);\n\n                        try {\n                            btn = element.querySelector(`.alphaPickerButton[data-value='${value}']`);\n                        } catch (err) {\n                            console.error('error in querySelector:', err);\n                        }\n\n                        if (btn && btn !== selected) {\n                            btn.classList.add(selectedButtonClass);\n                        }\n                        if (selected && selected !== btn) {\n                            selected.classList.remove(selectedButtonClass);\n                        }\n                    }\n                } else {\n                    this._currentValue = value;\n\n                    selected = element.querySelector(`.${selectedButtonClass}`);\n                    if (selected) {\n                        selected.classList.remove(selectedButtonClass);\n                    }\n                }\n            }\n\n            if (applyValue) {\n                element.dispatchEvent(new CustomEvent('alphavaluechanged', {\n                    cancelable: false,\n                    detail: {\n                        value\n                    }\n                }));\n            }\n\n            return this._currentValue;\n        }\n\n        on(name, fn) {\n            const element = this.options.element;\n            element.addEventListener(name, fn);\n        }\n\n        off(name, fn) {\n            const element = this.options.element;\n            element.removeEventListener(name, fn);\n        }\n\n        visible(visible) {\n            const element = this.options.element;\n            element.style.visibility = visible ? 'visible' : 'hidden';\n        }\n\n        values() {\n            const element = this.options.element;\n            const elems = element.querySelectorAll('.alphaPickerButton');\n            const values = [];\n            for (let i = 0, length = elems.length; i < length; i++) {\n                values.push(elems[i].getAttribute('data-value'));\n            }\n\n            return values;\n        }\n\n        focus() {\n            const element = this.options.element;\n            focusManager.autoFocus(element, true);\n        }\n\n        destroy() {\n            const element = this.options.element;\n            this.enabled(false);\n            element.classList.remove('focuscontainer-x');\n            this.options = null;\n        }\n    }\n\n/* eslint-enable indent */\nexport default AlphaPicker;\n"]}