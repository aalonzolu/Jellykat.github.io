{"version":3,"sources":["components/homeScreenSettings/homeScreenSettings.js"],"names":["define","_require","_exports","_layoutManager","_focusManager","_globalize","_loading","_connectionManager","_homeSections","_dom","_events","_listViewStyle","_embySelect","_embyCheckbox","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","call","desc","set","value","getLandingScreenOptionsHtml","type","userValue","getLandingScreenOptions","list","push","name","globalize","translate","isDefault","map","o","selectedHtml","optionValue","concat","join","getPerLibrarySettingsHtml","item","user","userSettings","apiClient","isChecked","html","Type","CollectionType","Configuration","MyMediaExcludes","includes","Id","LatestItemsExcludes","idForLanding","prefix","Name","loadForm","context","querySelector","checked","HidePlayedInLatest","updateHomeSectionValues","select","defaultValue","homeSections","getDefaultSection","option","promise1","getUserViews","IncludeHidden","promise2","getJSON","getUrl","Promise","all","then","responses","renderViewOrder","result","Items","view","currentHtml","innerHTML","renderPerLibrarySettings","userViews","elem","renderViews","page","folderHtml","id","checkedHtml","GroupedFolders","loading","hide","onSectionOrderListClick","e","dom","parentWithClass","viewItem","classList","contains","next","nextSibling","parentNode","removeChild","insertBefore","focusManager","focus","prev","previousSibling","getCheckboxItems","selector","inputs","querySelectorAll","save","instance","userId","enableSaveConfirmation","show","getUser","saveUser","userSettingsInstance","getAttribute","viewItems","orderedViews","OrderedViews","selectLandings","selectLanding","updateUserConfiguration","_resolve","_reject","imported","_ref","toast","events","trigger","onSubmit","self","this","connectionManager","getApiClient","options","serverId","setUserInfo","element","preventDefault","onChange","chkIncludeInMyMedia","fldIncludeInLatest","remove","add","_default","HomeScreenSettings","_classCallCheck","Constructor","TypeError","embed","_ref2","template","replace","translateHtml","addEventListener","bind","enableSaveButton","layoutManager","tv","loadData","autoFocus","_createClass","protoProps","staticProps","dataLoaded","submit","destroy"],"mappings":"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","file":"homeScreenSettings.js","sourcesContent":["import layoutManager from 'layoutManager';\nimport focusManager from 'focusManager';\nimport globalize from 'globalize';\nimport loading from 'loading';\nimport connectionManager from 'connectionManager';\nimport homeSections from 'homeSections';\nimport dom from 'dom';\nimport events from 'events';\nimport 'listViewStyle';\nimport 'emby-select';\nimport 'emby-checkbox';\n\n/* eslint-disable indent */\n\n    const numConfigurableSections = 7;\n\n    function renderViews(page, user, result) {\n        let folderHtml = '';\n\n        folderHtml += '<div class=\"checkboxList\">';\n        folderHtml += result.map(i => {\n            let currentHtml = '';\n\n            const id = `chkGroupFolder${i.Id}`;\n\n            const isChecked = user.Configuration.GroupedFolders.includes(i.Id);\n\n            const checkedHtml = isChecked ? ' checked=\"checked\"' : '';\n\n            currentHtml += '<label>';\n            currentHtml += `<input type=\"checkbox\" is=\"emby-checkbox\" class=\"chkGroupFolder\" data-folderid=\"${i.Id}\" id=\"${id}\"${checkedHtml}/>`;\n            currentHtml += `<span>${i.Name}</span>`;\n            currentHtml += '</label>';\n\n            return currentHtml;\n        }).join('');\n\n        folderHtml += '</div>';\n\n        page.querySelector('.folderGroupList').innerHTML = folderHtml;\n    }\n\n    function getLandingScreenOptions(type) {\n        const list = [];\n\n        if (type === 'movies') {\n            list.push({\n                name: globalize.translate('Movies'),\n                value: 'movies',\n                isDefault: true\n            });\n            list.push({\n                name: globalize.translate('Suggestions'),\n                value: 'suggestions'\n            });\n            list.push({\n                name: globalize.translate('Genres'),\n                value: 'genres'\n            });\n            list.push({\n                name: globalize.translate('Favorites'),\n                value: 'favorites'\n            });\n            list.push({\n                name: globalize.translate('Collections'),\n                value: 'collections'\n            });\n        } else if (type === 'tvshows') {\n            list.push({\n                name: globalize.translate('Shows'),\n                value: 'shows',\n                isDefault: true\n            });\n            list.push({\n                name: globalize.translate('Suggestions'),\n                value: 'suggestions'\n            });\n            list.push({\n                name: globalize.translate('Latest'),\n                value: 'latest'\n            });\n            list.push({\n                name: globalize.translate('Genres'),\n                value: 'genres'\n            });\n            list.push({\n                name: globalize.translate('Favorites'),\n                value: 'favorites'\n            });\n        } else if (type === 'music') {\n            list.push({\n                name: globalize.translate('Suggestions'),\n                value: 'suggestions',\n                isDefault: true\n            });\n            list.push({\n                name: globalize.translate('Albums'),\n                value: 'albums'\n            });\n            list.push({\n                name: globalize.translate('HeaderAlbumArtists'),\n                value: 'albumartists'\n            });\n            list.push({\n                name: globalize.translate('Artists'),\n                value: 'artists'\n            });\n            list.push({\n                name: globalize.translate('Playlists'),\n                value: 'playlists'\n            });\n            list.push({\n                name: globalize.translate('Genres'),\n                value: 'genres'\n            });\n        } else if (type === 'livetv') {\n            list.push({\n                name: globalize.translate('Suggestions'),\n                value: 'suggestions',\n                isDefault: true\n            });\n            list.push({\n                name: globalize.translate('Guide'),\n                value: 'guide'\n            });\n        }\n\n        return list;\n    }\n\n    function getLandingScreenOptionsHtml(type, userValue) {\n        return getLandingScreenOptions(type).map(o => {\n            const selected = userValue === o.value || (o.isDefault && !userValue);\n            const selectedHtml = selected ? ' selected' : '';\n            const optionValue = o.isDefault ? '' : o.value;\n\n            return `<option value=\"${optionValue}\"${selectedHtml}>${o.name}</option>`;\n        }).join('');\n    }\n\n    function renderViewOrder(context, user, result) {\n        let html = '';\n\n        html += result.Items.map((view) => {\n            let currentHtml = '';\n\n            currentHtml += `<div class=\"listItem viewItem\" data-viewid=\"${view.Id}\">`;\n\n            currentHtml += '<span class=\"material-icons listItemIcon folder_open\"></span>';\n\n            currentHtml += '<div class=\"listItemBody\">';\n\n            currentHtml += '<div>';\n            currentHtml += view.Name;\n            currentHtml += '</div>';\n\n            currentHtml += '</div>';\n\n            currentHtml += `<button type=\"button\" is=\"paper-icon-button-light\" class=\"btnViewItemUp btnViewItemMove autoSize\" title=\"${globalize.translate('Up')}\"><span class=\"material-icons keyboard_arrow_up\"></span></button>`;\n            currentHtml += `<button type=\"button\" is=\"paper-icon-button-light\" class=\"btnViewItemDown btnViewItemMove autoSize\" title=\"${globalize.translate('Down')}\"><span class=\"material-icons keyboard_arrow_down\"></span></button>`;\n\n            currentHtml += '</div>';\n\n            return currentHtml;\n        }).join('');\n\n        context.querySelector('.viewOrderList').innerHTML = html;\n    }\n\n    function updateHomeSectionValues(context, userSettings) {\n        for (let i = 1; i <= 7; i++) {\n            const select = context.querySelector(`#selectHomeSection${i}`);\n            const defaultValue = homeSections.getDefaultSection(i - 1);\n\n            const option = select.querySelector(`option[value=${defaultValue}]`) || select.querySelector('option[value=\"\"]');\n\n            const userValue = userSettings.get(`homesection${i - 1}`);\n\n            option.value = '';\n\n            if (userValue === defaultValue || !userValue) {\n                select.value = '';\n            } else {\n                select.value = userValue;\n            }\n        }\n\n        context.querySelector('.selectTVHomeScreen').value = userSettings.get('tvhome') || '';\n    }\n\n    function getPerLibrarySettingsHtml(item, user, userSettings, apiClient) {\n        let html = '';\n\n        let isChecked;\n\n        if (item.Type === 'Channel' || item.CollectionType === 'boxsets' || item.CollectionType === 'playlists') {\n            isChecked = !(user.Configuration.MyMediaExcludes || []).includes(item.Id);\n            html += '<div>';\n            html += '<label>';\n            html += `<input type=\"checkbox\" is=\"emby-checkbox\" class=\"chkIncludeInMyMedia\" data-folderid=\"${item.Id}\"${isChecked ? ' checked=\"checked\"' : ''}/>`;\n            html += `<span>${globalize.translate('DisplayInMyMedia')}</span>`;\n            html += '</label>';\n            html += '</div>';\n        }\n\n        const excludeFromLatest = ['playlists', 'livetv', 'boxsets', 'channels'];\n        if (!excludeFromLatest.includes(item.CollectionType || '')) {\n            isChecked = !user.Configuration.LatestItemsExcludes.includes(item.Id);\n            html += '<label class=\"fldIncludeInLatest\">';\n            html += `<input type=\"checkbox\" is=\"emby-checkbox\" class=\"chkIncludeInLatest\" data-folderid=\"${item.Id}\"${isChecked ? ' checked=\"checked\"' : ''}/>`;\n            html += `<span>${globalize.translate('DisplayInOtherHomeScreenSections')}</span>`;\n            html += '</label>';\n        }\n\n        if (html) {\n            html = `<div class=\"checkboxListContainer\">${html}</div>`;\n        }\n\n        if (item.CollectionType === 'movies' || item.CollectionType === 'tvshows' || item.CollectionType === 'music' || item.CollectionType === 'livetv') {\n            const idForLanding = item.CollectionType === 'livetv' ? item.CollectionType : item.Id;\n            html += '<div class=\"selectContainer\">';\n            html += `<select is=\"emby-select\" class=\"selectLanding\" data-folderid=\"${idForLanding}\" label=\"${globalize.translate('LabelDefaultScreen')}\">`;\n\n            const userValue = userSettings.get(`landing-${idForLanding}`);\n\n            html += getLandingScreenOptionsHtml(item.CollectionType, userValue);\n\n            html += '</select>';\n            html += '</div>';\n        }\n\n        if (html) {\n            let prefix = '';\n            prefix += '<div class=\"verticalSection\">';\n\n            prefix += '<h2 class=\"sectionTitle\">';\n            prefix += item.Name;\n            prefix += '</h2>';\n\n            html = prefix + html;\n            html += '</div>';\n        }\n\n        return html;\n    }\n\n    function renderPerLibrarySettings(context, user, userViews, userSettings, apiClient) {\n        const elem = context.querySelector('.perLibrarySettings');\n        let html = '';\n\n        for (let i = 0, length = userViews.length; i < length; i++) {\n            html += getPerLibrarySettingsHtml(userViews[i], user, userSettings, apiClient);\n        }\n\n        elem.innerHTML = html;\n    }\n\n    function loadForm(context, user, userSettings, apiClient) {\n        context.querySelector('.chkHidePlayedFromLatest').checked = user.Configuration.HidePlayedInLatest || false;\n\n        updateHomeSectionValues(context, userSettings);\n\n        const promise1 = apiClient.getUserViews({ IncludeHidden: true }, user.Id);\n        const promise2 = apiClient.getJSON(apiClient.getUrl(`Users/${user.Id}/GroupingOptions`));\n\n        Promise.all([promise1, promise2]).then(responses => {\n            renderViewOrder(context, user, responses[0]);\n\n            renderPerLibrarySettings(context, user, responses[0].Items, userSettings, apiClient);\n\n            renderViews(context, user, responses[1]);\n\n            loading.hide();\n        });\n    }\n\n    function onSectionOrderListClick(e) {\n        const target = dom.parentWithClass(e.target, 'btnViewItemMove');\n\n        if (target) {\n            const viewItem = dom.parentWithClass(target, 'viewItem');\n\n            if (viewItem) {\n                if (target.classList.contains('btnViewItemDown')) {\n                    const next = viewItem.nextSibling;\n\n                    if (next) {\n                        viewItem.parentNode.removeChild(viewItem);\n                        next.parentNode.insertBefore(viewItem, next.nextSibling);\n                        focusManager.focus(e.target);\n                    }\n                } else {\n                    const prev = viewItem.previousSibling;\n\n                    if (prev) {\n                        viewItem.parentNode.removeChild(viewItem);\n                        prev.parentNode.insertBefore(viewItem, prev);\n                        focusManager.focus(e.target);\n                    }\n                }\n            }\n        }\n    }\n\n    function getCheckboxItems(selector, context, isChecked) {\n        const inputs = context.querySelectorAll(selector);\n        const list = [];\n\n        for (let i = 0, length = inputs.length; i < length; i++) {\n            if (inputs[i].checked === isChecked) {\n                list.push(inputs[i]);\n            }\n        }\n\n        return list;\n    }\n\n    function saveUser(context, user, userSettingsInstance, apiClient) {\n        user.Configuration.HidePlayedInLatest = context.querySelector('.chkHidePlayedFromLatest').checked;\n\n        user.Configuration.LatestItemsExcludes = getCheckboxItems('.chkIncludeInLatest', context, false).map(i => {\n            return i.getAttribute('data-folderid');\n        });\n\n        user.Configuration.MyMediaExcludes = getCheckboxItems('.chkIncludeInMyMedia', context, false).map(i => {\n            return i.getAttribute('data-folderid');\n        });\n\n        user.Configuration.GroupedFolders = getCheckboxItems('.chkGroupFolder', context, true).map(i => {\n            return i.getAttribute('data-folderid');\n        });\n\n        const viewItems = context.querySelectorAll('.viewItem');\n        const orderedViews = [];\n        let i;\n        let length;\n        for (i = 0, length = viewItems.length; i < length; i++) {\n            orderedViews.push(viewItems[i].getAttribute('data-viewid'));\n        }\n\n        user.Configuration.OrderedViews = orderedViews;\n\n        userSettingsInstance.set('tvhome', context.querySelector('.selectTVHomeScreen').value);\n\n        userSettingsInstance.set('homesection0', context.querySelector('#selectHomeSection1').value);\n        userSettingsInstance.set('homesection1', context.querySelector('#selectHomeSection2').value);\n        userSettingsInstance.set('homesection2', context.querySelector('#selectHomeSection3').value);\n        userSettingsInstance.set('homesection3', context.querySelector('#selectHomeSection4').value);\n        userSettingsInstance.set('homesection4', context.querySelector('#selectHomeSection5').value);\n        userSettingsInstance.set('homesection5', context.querySelector('#selectHomeSection6').value);\n        userSettingsInstance.set('homesection6', context.querySelector('#selectHomeSection7').value);\n\n        const selectLandings = context.querySelectorAll('.selectLanding');\n        for (i = 0, length = selectLandings.length; i < length; i++) {\n            const selectLanding = selectLandings[i];\n            userSettingsInstance.set(`landing-${selectLanding.getAttribute('data-folderid')}`, selectLanding.value);\n        }\n\n        return apiClient.updateUserConfiguration(user.Id, user.Configuration);\n    }\n\n    function save(instance, context, userId, userSettings, apiClient, enableSaveConfirmation) {\n        loading.show();\n\n        apiClient.getUser(userId).then(user => {\n            saveUser(context, user, userSettings, apiClient).then(() => {\n                loading.hide();\n                if (enableSaveConfirmation) {\n                    import('toast').then(({default: toast}) => {\n                        toast(globalize.translate('SettingsSaved'));\n                    });\n                }\n\n                events.trigger(instance, 'saved');\n            }, () => {\n                loading.hide();\n            });\n        });\n    }\n\n    function onSubmit(e) {\n        const self = this;\n        const apiClient = connectionManager.getApiClient(self.options.serverId);\n        const userId = self.options.userId;\n        const userSettings = self.options.userSettings;\n\n        userSettings.setUserInfo(userId, apiClient).then(() => {\n            const enableSaveConfirmation = self.options.enableSaveConfirmation;\n            save(self, self.options.element, userId, userSettings, apiClient, enableSaveConfirmation);\n        });\n\n        // Disable default form submission\n        if (e) {\n            e.preventDefault();\n        }\n        return false;\n    }\n\n    function onChange(e) {\n        const chkIncludeInMyMedia = dom.parentWithClass(e.target, 'chkIncludeInMyMedia');\n        if (!chkIncludeInMyMedia) {\n            return;\n        }\n\n        const section = dom.parentWithClass(chkIncludeInMyMedia, 'verticalSection');\n        const fldIncludeInLatest = section.querySelector('.fldIncludeInLatest');\n        if (fldIncludeInLatest) {\n            if (chkIncludeInMyMedia.checked) {\n                fldIncludeInLatest.classList.remove('hide');\n            } else {\n                fldIncludeInLatest.classList.add('hide');\n            }\n        }\n    }\n\n    function embed(options, self) {\n        return import('text!./homeScreenSettings.template.html').then(({default: template}) => {\n            for (let i = 1; i <= numConfigurableSections; i++) {\n                template = template.replace(`{section${i}label}`, globalize.translate('LabelHomeScreenSectionValue', i));\n            }\n\n            options.element.innerHTML = globalize.translateHtml(template, 'core');\n\n            options.element.querySelector('.viewOrderList').addEventListener('click', onSectionOrderListClick);\n            options.element.querySelector('form').addEventListener('submit', onSubmit.bind(self));\n            options.element.addEventListener('change', onChange);\n\n            if (options.enableSaveButton) {\n                options.element.querySelector('.btnSave').classList.remove('hide');\n            }\n\n            if (layoutManager.tv) {\n                options.element.querySelector('.selectTVHomeScreenContainer').classList.remove('hide');\n            } else {\n                options.element.querySelector('.selectTVHomeScreenContainer').classList.add('hide');\n            }\n\n            self.loadData(options.autoFocus);\n        });\n    }\n\n    class HomeScreenSettings {\n        constructor(options) {\n            this.options = options;\n            embed(options, this);\n        }\n\n        loadData(autoFocus) {\n            const self = this;\n            const context = self.options.element;\n\n            loading.show();\n\n            const userId = self.options.userId;\n            const apiClient = connectionManager.getApiClient(self.options.serverId);\n            const userSettings = self.options.userSettings;\n\n            apiClient.getUser(userId).then(user => {\n                userSettings.setUserInfo(userId, apiClient).then(() => {\n                    self.dataLoaded = true;\n\n                    loadForm(context, user, userSettings, apiClient);\n\n                    if (autoFocus) {\n                        focusManager.autoFocus(context);\n                    }\n                });\n            });\n        }\n\n        submit() {\n            onSubmit.call(this);\n        }\n\n        destroy() {\n            this.options = null;\n        }\n    }\n\n/* eslint-enable indent */\n\nexport default HomeScreenSettings;\n"]}