{"version":3,"sources":["components/cardbuilder/cardBuilder.js"],"names":["define","_require","_exports","_datetime","_imageLoader","_connectionManager","_itemHelper","_focusManager","_indicators","_globalize","_layoutManager","_dom","_browser","_playbackManager","_itemShortcuts","_imagehelper","_card","_paperIconButtonLight","_programStyles","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","_slicedToArray","arr","i","_arrayWithHoles","Array","isArray","_iterableToArrayLimit","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","toString","slice","name","from","test","len","arr2","getCardsHtml","getDefaultBackgroundClass","getDefaultText","buildCards","onUserDataChanged","onTimerCreated","onTimerCancelled","onSeriesTimerCancelled","refreshIndicatorLoaded","enableFocusTransform","browser","slow","edge","items","options","arguments","buildCardsHtmlInternal","getImageWidth","shape","screenWidth","isOrientationLandscape","imagesPerRow","getPostersPerRow","layoutManager","tv","Math","round","setCardData","primaryImageAspectRatio","imageLoader","getPrimaryImageAspectRatio","includes","requestedShape","coverImage","defaultShape","preferThumb","uiAspect","getDesiredAspect","width","widths","rows","dom","getWindowSize","innerWidth","screenHeight","innerHeight","isResizable","windowWidth","screen","window","availWidth","floor","isVertical","currentIndexValue","hasOpenRow","hasOpenSection","apiClient","lastServerId","_step","html","itemsInRow","sectionTitleTagName","_iterator","_createForOfIteratorHelper","allowArrayLike","it","F","s","e","_e2","f","normalCompletion","didErr","step","_e3","return","entries","_step$value","item","serverId","ServerId","connectionManager","getApiClient","indexBy","newIndexValue","PremiereDate","datetime","toLocaleDateString","parseISO8601Date","weekday","month","day","error","console","ProductionYear","CommunityRating","buildCard","toLowerCase","indexOf","getDefaultColorIndex","str","charIndex","character","String","substr","charCodeAt","sum","parseInt","charAt","getRandomInt","min","max","random","isUsingLiveTvNaming","Type","getAirTimeText","showAirDateTime","showAirEndTime","airTimeText","StartDate","date","getDisplayTime","EndDate","getCardFooterText","showTitle","forceName","overlayText","imgUrl","footerClass","progressHtml","logoUrl","isOuterFooter","showOtherText","cardLayout","mobile","cardFooterAside","titleAdded","cssClass","centerText","lines","parentTitleUnderneath","showParentTitle","showParentTitleOrTitle","SeriesName","SeriesId","getTextActionButton","Id","Name","IsFolder","EpisodeTitle","parentTitle","Series","Album","AlbumArtist","showMediaTitle","MediaType","itemHelper","getDisplayName","includeParentInfo","includeParentInfoInTitle","CollectionType","AlbumArtists","showItemCounts","getItemCountsHtml","childText","counts","RunTimeTicks","minutes","globalize","translate","MovieCount","SeriesCount","EpisodeCount","context","AlbumCount","SongCount","MusicVideoCount","RecursiveItemCount","join","textLines","additionalLines","showSongCount","songLine","showPremiereDate","showYear","showSeriesYear","Status","endYear","getFullYear","showRuntime","getDisplayRunningTime","showAirTime","showChannelName","ChannelId","ChannelName","showCurrentProgram","CurrentProgram","showCurrentProgramTime","showSeriesTimerTime","RecordAnyTime","showSeriesTimerChannel","RecordAnyChannel","showPersonRoleOrType","Role","addRightTextMargin","getCardTextLines","forceLines","addRightMargin","maxLines","valid","currentCssClass","text","linesLength","itemShortcuts","getShortcutAttributesHtml","index","action","PrimaryImageAspectRatio","className","cardCssClass","cardClass","desktop","imgInfo","getCardImageUrl","ProgramInfo","height","imgTag","imgType","itemId","ImageTags","Thumb","preferBanner","Banner","preferDisc","Disc","preferLogo","Logo","ParentLogoImageTag","ParentLogoItemId","SeriesThumbImageTag","inheritThumb","ParentThumbItemId","ParentThumbImageTag","BackdropImageTags","ParentBackdropImageTags","ParentBackdropItemId","Primary","ChildCount","abs","SeriesPrimaryImageTag","PrimaryImageTag","PrimaryImageItemId","ParentPrimaryImageTag","ParentPrimaryImageItemId","AlbumId","AlbumPrimaryImageTag","getScaledImageUrl","type","maxHeight","maxWidth","tag","blurhash","imageBlurhashes","ImageBlurHashes","cardImageContainerClass","footerCssClass","cardBoxClass","indicators","getProgressBarHtml","innerCardFooter","footerOverlayed","showChannelLogo","ChannelPrimaryImageTag","showLogo","mediaSourceCount","MediaSourceCount","disableIndicators","outerCardFooter","cardImageContainerOpen","overlayButtons","overlayPlayButton","overlayMoreButton","overlayInfoButton","btnCssClass","centerPlayButton","IsPlaceHolder","LocationType","showChildCountIndicator","cardImageContainerClose","blurhashAttrib","indicatorsHtml","missingIndicator","getMissingIndicator","getSyncIndicator","getTimerIndicator","getTypeIndicator","showGroupCount","getChildCountIndicatorHtml","minCount","getPlayedIndicatorHtml","RefreshProgress","RefreshStatus","importRefreshIndicator","Promise","_resolve","_reject","imported","tagName","nameWithPrefix","SortName","prefix","substring","toUpperCase","actionAttribute","timerAttributes","TimerId","SeriesTimerId","positionTicksData","UserData","PlaybackPositionTicks","collectionIdData","collectionId","playlistIdData","playlistId","mediaTypeData","collectionTypeData","channelIdData","contextData","parentIdData","parentId","additionalCardContent","disableHoverMenu","getHoverMenuHtml","playbackManager","canPlay","userData","canMarkPlayed","Played","canRate","likes","Likes","IsFavorite","ItemId","imageHelper","getLibraryIcon","defaultCardImageIcon","document","body","contains","itemsContainer","parentContainer","classList","add","remove","cardBuilderHtml","innerHTML","lazyChildren","autoFocus","focusManager","ensureIndicators","card","indicatorsElem","querySelector","cardImageContainer","createElement","appendChild","updateUserData","getAttribute","enableCountIndicator","playedIndicator","countIndicator","itemProgressBar","parentNode","removeChild","UnplayedItemCount","scope","cards","querySelectorAll","programId","newTimerId","cells","cell","insertAdjacentHTML","setAttribute","timerId","icon","removeAttribute","cancelledTimerId","_default"],"mappings":"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","file":"cardBuilder.js","sourcesContent":["/* eslint-disable indent */\n\n/**\n * Module for building cards from item data.\n * @module components/cardBuilder/cardBuilder\n */\n\nimport datetime from 'datetime';\nimport imageLoader from 'imageLoader';\nimport connectionManager from 'connectionManager';\nimport itemHelper from 'itemHelper';\nimport focusManager from 'focusManager';\nimport indicators from 'indicators';\nimport globalize from 'globalize';\nimport layoutManager from 'layoutManager';\nimport dom from 'dom';\nimport browser from 'browser';\nimport playbackManager from 'playbackManager';\nimport itemShortcuts from 'itemShortcuts';\nimport imageHelper from 'scripts/imagehelper';\nimport 'css!./card';\nimport 'paper-icon-button-light';\nimport 'programStyles';\n\n        const enableFocusTransform = !browser.slow && !browser.edge;\n\n        /**\n         * Generate the HTML markup for cards for a set of items.\n         * @param items - The items used to generate cards.\n         * @param options - The options of the cards.\n         * @returns {string} The HTML markup for the cards.\n         */\n        export function getCardsHtml(items, options) {\n            if (arguments.length === 1) {\n                options = arguments[0];\n                items = options.items;\n            }\n\n            return buildCardsHtmlInternal(items, options);\n        }\n\n        /**\n         * Computes the number of posters per row.\n         * @param {string} shape - Shape of the cards.\n         * @param {number} screenWidth - Width of the screen.\n         * @param {boolean} isOrientationLandscape - Flag for the orientation of the screen.\n         * @returns {number} Number of cards per row for an itemsContainer.\n         */\n        function getPostersPerRow(shape, screenWidth, isOrientationLandscape) {\n            switch (shape) {\n                case 'portrait':\n                    if (layoutManager.tv) {\n                        return 100 / 16.66666667;\n                    }\n                    if (screenWidth >= 2200) {\n                        return 100 / 10;\n                    }\n                    if (screenWidth >= 1920) {\n                        return 100 / 11.1111111111;\n                    }\n                    if (screenWidth >= 1600) {\n                        return 100 / 12.5;\n                    }\n                    if (screenWidth >= 1400) {\n                        return 100 / 14.28571428571;\n                    }\n                    if (screenWidth >= 1200) {\n                        return 100 / 16.66666667;\n                    }\n                    if (screenWidth >= 800) {\n                        return 5;\n                    }\n                    if (screenWidth >= 700) {\n                        return 4;\n                    }\n                    if (screenWidth >= 500) {\n                        return 100 / 33.33333333;\n                    }\n                    return 100 / 33.33333333;\n                case 'square':\n                    if (layoutManager.tv) {\n                        return 100 / 16.66666667;\n                    }\n                    if (screenWidth >= 2200) {\n                        return 100 / 10;\n                    }\n                    if (screenWidth >= 1920) {\n                        return 100 / 11.1111111111;\n                    }\n                    if (screenWidth >= 1600) {\n                        return 100 / 12.5;\n                    }\n                    if (screenWidth >= 1400) {\n                        return 100 / 14.28571428571;\n                    }\n                    if (screenWidth >= 1200) {\n                        return 100 / 16.66666667;\n                    }\n                    if (screenWidth >= 800) {\n                        return 5;\n                    }\n                    if (screenWidth >= 700) {\n                        return 4;\n                    }\n                    if (screenWidth >= 500) {\n                        return 100 / 33.33333333;\n                    }\n                    return 2;\n                case 'banner':\n                    if (screenWidth >= 2200) {\n                        return 100 / 25;\n                    }\n                    if (screenWidth >= 1200) {\n                        return 100 / 33.33333333;\n                    }\n                    if (screenWidth >= 800) {\n                        return 2;\n                    }\n                    return 1;\n                case 'backdrop':\n                    if (layoutManager.tv) {\n                        return 100 / 25;\n                    }\n                    if (screenWidth >= 2500) {\n                        return 6;\n                    }\n                    if (screenWidth >= 1600) {\n                        return 5;\n                    }\n                    if (screenWidth >= 1200) {\n                        return 4;\n                    }\n                    if (screenWidth >= 770) {\n                        return 3;\n                    }\n                    if (screenWidth >= 420) {\n                        return 2;\n                    }\n                    return 1;\n                case 'smallBackdrop':\n                    if (screenWidth >= 1600) {\n                        return 100 / 12.5;\n                    }\n                    if (screenWidth >= 1400) {\n                        return 100 / 14.2857142857;\n                    }\n                    if (screenWidth >= 1200) {\n                        return 100 / 16.666666666666666666;\n                    }\n                    if (screenWidth >= 1000) {\n                        return 5;\n                    }\n                    if (screenWidth >= 800) {\n                        return 4;\n                    }\n                    if (screenWidth >= 500) {\n                        return 100 / 33.33333333;\n                    }\n                    return 2;\n                case 'overflowSmallBackdrop':\n                    if (layoutManager.tv) {\n                        return 100 / 18.9;\n                    }\n                    if (isOrientationLandscape) {\n                        if (screenWidth >= 800) {\n                            return 100 / 15.5;\n                        }\n                        return 100 / 23.3;\n                    } else {\n                        if (screenWidth >= 540) {\n                            return 100 / 30;\n                        }\n                        return 100 / 72;\n                    }\n                case 'overflowPortrait':\n\n                    if (layoutManager.tv) {\n                        return 100 / 15.5;\n                    }\n                    if (isOrientationLandscape) {\n                        if (screenWidth >= 1700) {\n                            return 100 / 11.6;\n                        }\n                        return 100 / 15.5;\n                    } else {\n                        if (screenWidth >= 1400) {\n                            return 100 / 15;\n                        }\n                        if (screenWidth >= 1200) {\n                            return 100 / 18;\n                        }\n                        if (screenWidth >= 760) {\n                            return 100 / 23;\n                        }\n                        if (screenWidth >= 400) {\n                            return 100 / 31.5;\n                        }\n                        return 100 / 42;\n                    }\n                case 'overflowSquare':\n                    if (layoutManager.tv) {\n                        return 100 / 15.5;\n                    }\n                    if (isOrientationLandscape) {\n                        if (screenWidth >= 1700) {\n                            return 100 / 11.6;\n                        }\n                        return 100 / 15.5;\n                    } else {\n                        if (screenWidth >= 1400) {\n                            return 100 / 15;\n                        }\n                        if (screenWidth >= 1200) {\n                            return 100 / 18;\n                        }\n                        if (screenWidth >= 760) {\n                            return 100 / 23;\n                        }\n                        if (screenWidth >= 540) {\n                            return 100 / 31.5;\n                        }\n                        return 100 / 42;\n                    }\n                case 'overflowBackdrop':\n                    if (layoutManager.tv) {\n                        return 100 / 23.3;\n                    }\n                    if (isOrientationLandscape) {\n                        if (screenWidth >= 1700) {\n                            return 100 / 18.5;\n                        }\n                        return 100 / 23.3;\n                    } else {\n                        if (screenWidth >= 1800) {\n                            return 100 / 23.5;\n                        }\n                        if (screenWidth >= 1400) {\n                            return 100 / 30;\n                        }\n                        if (screenWidth >= 760) {\n                            return 100 / 40;\n                        }\n                        if (screenWidth >= 640) {\n                            return 100 / 56;\n                        }\n                        return 100 / 72;\n                    }\n                default:\n                    return 4;\n            }\n        }\n\n        /**\n         * Checks if the window is resizable.\n         * @param {number} windowWidth - Width of the device's screen.\n         * @returns {boolean} - Result of the check.\n         */\n        function isResizable(windowWidth) {\n            const screen = window.screen;\n            if (screen) {\n                const screenWidth = screen.availWidth;\n\n                if ((screenWidth - windowWidth) > 20) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        /**\n         * Gets the width of a card's image according to the shape and amount of cards per row.\n         * @param {string} shape - Shape of the card.\n         * @param {number} screenWidth - Width of the screen.\n         * @param {boolean} isOrientationLandscape - Flag for the orientation of the screen.\n         * @returns {number} Width of the image for a card.\n         */\n        function getImageWidth(shape, screenWidth, isOrientationLandscape) {\n            const imagesPerRow = getPostersPerRow(shape, screenWidth, isOrientationLandscape);\n            return Math.round(screenWidth / imagesPerRow);\n        }\n\n        /**\n         * Normalizes the options for a card.\n         * @param {Object} items - A set of items.\n         * @param {Object} options - Options for handling the items.\n         */\n        function setCardData(items, options) {\n            options.shape = options.shape || 'auto';\n\n            const primaryImageAspectRatio = imageLoader.getPrimaryImageAspectRatio(items);\n\n            if (['auto', 'autohome', 'autooverflow', 'autoVertical'].includes(options.shape)) {\n                const requestedShape = options.shape;\n                options.shape = null;\n\n                if (primaryImageAspectRatio) {\n                    if (primaryImageAspectRatio >= 3) {\n                        options.shape = 'banner';\n                        options.coverImage = true;\n                    } else if (primaryImageAspectRatio >= 1.33) {\n                        options.shape = requestedShape === 'autooverflow' ? 'overflowBackdrop' : 'backdrop';\n                    } else if (primaryImageAspectRatio > 0.71) {\n                        options.shape = requestedShape === 'autooverflow' ? 'overflowSquare' : 'square';\n                    } else {\n                        options.shape = requestedShape === 'autooverflow' ? 'overflowPortrait' : 'portrait';\n                    }\n                }\n\n                if (!options.shape) {\n                    options.shape = options.defaultShape || (requestedShape === 'autooverflow' ? 'overflowSquare' : 'square');\n                }\n            }\n\n            if (options.preferThumb === 'auto') {\n                options.preferThumb = options.shape === 'backdrop' || options.shape === 'overflowBackdrop';\n            }\n\n            options.uiAspect = getDesiredAspect(options.shape);\n            options.primaryImageAspectRatio = primaryImageAspectRatio;\n\n            if (!options.width && options.widths) {\n                options.width = options.widths[options.shape];\n            }\n\n            if (options.rows && typeof (options.rows) !== 'number') {\n                options.rows = options.rows[options.shape];\n            }\n\n            if (!options.width) {\n                let screenWidth = dom.getWindowSize().innerWidth;\n                const screenHeight = dom.getWindowSize().innerHeight;\n\n                if (isResizable(screenWidth)) {\n                    const roundScreenTo = 100;\n                    screenWidth = Math.floor(screenWidth / roundScreenTo) * roundScreenTo;\n                }\n\n                options.width = getImageWidth(options.shape, screenWidth, screenWidth > (screenHeight * 1.3));\n            }\n        }\n\n        /**\n         * Generates the internal HTML markup for cards.\n         * @param {Object} items - Items for which to generate the markup.\n         * @param {Object} options - Options for generating the markup.\n         * @returns {string} The internal HTML markup of the cards.\n         */\n        function buildCardsHtmlInternal(items, options) {\n            let isVertical = false;\n\n            if (options.shape === 'autoVertical') {\n                isVertical = true;\n            }\n\n            setCardData(items, options);\n\n            let html = '';\n            let itemsInRow = 0;\n\n            let currentIndexValue;\n            let hasOpenRow;\n            let hasOpenSection;\n\n            const sectionTitleTagName = options.sectionTitleTagName || 'div';\n            let apiClient;\n            let lastServerId;\n\n            for (const [i, item] of items.entries()) {\n                const serverId = item.ServerId || options.serverId;\n\n                if (serverId !== lastServerId) {\n                    lastServerId = serverId;\n                    apiClient = connectionManager.getApiClient(lastServerId);\n                }\n\n                if (options.indexBy) {\n                    let newIndexValue = '';\n\n                    if (options.indexBy === 'PremiereDate') {\n                        if (item.PremiereDate) {\n                            try {\n                                newIndexValue = datetime.toLocaleDateString(datetime.parseISO8601Date(item.PremiereDate), { weekday: 'long', month: 'long', day: 'numeric' });\n                            } catch (error) {\n                                console.error('error parsing timestamp for premiere date', error);\n                            }\n                        }\n                    } else if (options.indexBy === 'ProductionYear') {\n                        newIndexValue = item.ProductionYear;\n                    } else if (options.indexBy === 'CommunityRating') {\n                        newIndexValue = item.CommunityRating ? (Math.floor(item.CommunityRating) + (item.CommunityRating % 1 >= 0.5 ? 0.5 : 0)) + '+' : null;\n                    }\n\n                    if (newIndexValue !== currentIndexValue) {\n                        if (hasOpenRow) {\n                            html += '</div>';\n                            hasOpenRow = false;\n                            itemsInRow = 0;\n                        }\n\n                        if (hasOpenSection) {\n                            html += '</div>';\n\n                            if (isVertical) {\n                                html += '</div>';\n                            }\n                            hasOpenSection = false;\n                        }\n\n                        if (isVertical) {\n                            html += '<div class=\"verticalSection\">';\n                        } else {\n                            html += '<div class=\"horizontalSection\">';\n                        }\n                        html += '<' + sectionTitleTagName + ' class=\"sectionTitle\">' + newIndexValue + '</' + sectionTitleTagName + '>';\n                        if (isVertical) {\n                            html += '<div class=\"itemsContainer vertical-wrap\">';\n                        }\n                        currentIndexValue = newIndexValue;\n                        hasOpenSection = true;\n                    }\n                }\n\n                if (options.rows && itemsInRow === 0) {\n                    if (hasOpenRow) {\n                        html += '</div>';\n                        hasOpenRow = false;\n                    }\n\n                    html += '<div class=\"cardColumn\">';\n                    hasOpenRow = true;\n                }\n\n                html += buildCard(i, item, apiClient, options);\n\n                itemsInRow++;\n\n                if (options.rows && itemsInRow >= options.rows) {\n                    html += '</div>';\n                    hasOpenRow = false;\n                    itemsInRow = 0;\n                }\n            }\n\n            if (hasOpenRow) {\n                html += '</div>';\n            }\n\n            if (hasOpenSection) {\n                html += '</div>';\n\n                if (isVertical) {\n                    html += '</div>';\n                }\n            }\n\n            return html;\n        }\n\n        /**\n         * Computes the aspect ratio for a card given its shape.\n         * @param {string} shape - Shape for which to get the aspect ratio.\n         * @returns {null|number} Ratio of the shape.\n         */\n        function getDesiredAspect(shape) {\n            if (shape) {\n                shape = shape.toLowerCase();\n                if (shape.indexOf('portrait') !== -1) {\n                    return (2 / 3);\n                }\n                if (shape.indexOf('backdrop') !== -1) {\n                    return (16 / 9);\n                }\n                if (shape.indexOf('square') !== -1) {\n                    return 1;\n                }\n                if (shape.indexOf('banner') !== -1) {\n                    return (1000 / 185);\n                }\n            }\n            return null;\n        }\n\n        /** Get the URL of the card's image.\n         * @param {Object} item - Item for which to generate a card.\n         * @param {Object} apiClient - API client object.\n         * @param {Object} options - Options of the card.\n         * @param {string} shape - Shape of the desired image.\n         * @returns {Object} Object representing the URL of the card's image.\n         */\n        function getCardImageUrl(item, apiClient, options, shape) {\n            item = item.ProgramInfo || item;\n\n            const width = options.width;\n            let height = null;\n            const primaryImageAspectRatio = item.PrimaryImageAspectRatio;\n            let forceName = false;\n            let imgUrl = null;\n            let imgTag = null;\n            let coverImage = false;\n            let uiAspect = null;\n            let imgType = null;\n            let itemId = null;\n\n            if (options.preferThumb && item.ImageTags && item.ImageTags.Thumb) {\n                imgType = 'Thumb';\n                imgTag = item.ImageTags.Thumb;\n            } else if ((options.preferBanner || shape === 'banner') && item.ImageTags && item.ImageTags.Banner) {\n                imgType = 'Banner';\n                imgTag = item.ImageTags.Banner;\n            } else if (options.preferDisc && item.ImageTags && item.ImageTags.Disc) {\n                imgType = 'Disc';\n                imgTag = item.ImageTags.Disc;\n            } else if (options.preferLogo && item.ImageTags && item.ImageTags.Logo) {\n                imgType = 'Logo';\n                imgTag = item.ImageTags.Logo;\n            } else if (options.preferLogo && item.ParentLogoImageTag && item.ParentLogoItemId) {\n                imgType = 'Logo';\n                imgTag = item.ParentLogoImageTag;\n                itemId = item.ParentLogoItemId;\n            } else if (options.preferThumb && item.SeriesThumbImageTag && options.inheritThumb !== false) {\n                imgType = 'Thumb';\n                imgTag = item.SeriesThumbImageTag;\n                itemId = item.SeriesId;\n            } else if (options.preferThumb && item.ParentThumbItemId && options.inheritThumb !== false && item.MediaType !== 'Photo') {\n                imgType = 'Thumb';\n                imgTag = item.ParentThumbImageTag;\n                itemId = item.ParentThumbItemId;\n            } else if (options.preferThumb && item.BackdropImageTags && item.BackdropImageTags.length) {\n                imgType = 'Backdrop';\n                imgTag = item.BackdropImageTags[0];\n                forceName = true;\n            } else if (options.preferThumb && item.ParentBackdropImageTags && item.ParentBackdropImageTags.length && options.inheritThumb !== false && item.Type === 'Episode') {\n                imgType = 'Backdrop';\n                imgTag = item.ParentBackdropImageTags[0];\n                itemId = item.ParentBackdropItemId;\n            } else if (item.ImageTags && item.ImageTags.Primary && (item.Type !== 'Episode' || item.ChildCount !== 0)) {\n                imgType = 'Primary';\n                imgTag = item.ImageTags.Primary;\n                height = width && primaryImageAspectRatio ? Math.round(width / primaryImageAspectRatio) : null;\n\n                if (options.preferThumb && options.showTitle !== false) {\n                    forceName = true;\n                }\n\n                if (primaryImageAspectRatio) {\n                    uiAspect = getDesiredAspect(shape);\n                    if (uiAspect) {\n                        coverImage = (Math.abs(primaryImageAspectRatio - uiAspect) / uiAspect) <= 0.2;\n                    }\n                }\n            } else if (item.SeriesPrimaryImageTag) {\n                imgType = 'Primary';\n                imgTag = item.SeriesPrimaryImageTag;\n                itemId = item.SeriesId;\n            } else if (item.PrimaryImageTag) {\n                imgType = 'Primary';\n                imgTag = item.PrimaryImageTag;\n                itemId = item.PrimaryImageItemId;\n                height = width && primaryImageAspectRatio ? Math.round(width / primaryImageAspectRatio) : null;\n\n                if (options.preferThumb && options.showTitle !== false) {\n                    forceName = true;\n                }\n\n                if (primaryImageAspectRatio) {\n                    uiAspect = getDesiredAspect(shape);\n                    if (uiAspect) {\n                        coverImage = (Math.abs(primaryImageAspectRatio - uiAspect) / uiAspect) <= 0.2;\n                    }\n                }\n            } else if (item.ParentPrimaryImageTag) {\n                imgType = 'Primary';\n                imgTag = item.ParentPrimaryImageTag;\n                itemId = item.ParentPrimaryImageItemId;\n            } else if (item.AlbumId && item.AlbumPrimaryImageTag) {\n                imgType = 'Primary';\n                imgTag = item.AlbumPrimaryImageTag;\n                itemId = item.AlbumId;\n                height = width && primaryImageAspectRatio ? Math.round(width / primaryImageAspectRatio) : null;\n\n                if (primaryImageAspectRatio) {\n                    uiAspect = getDesiredAspect(shape);\n                    if (uiAspect) {\n                        coverImage = (Math.abs(primaryImageAspectRatio - uiAspect) / uiAspect) <= 0.2;\n                    }\n                }\n            } else if (item.Type === 'Season' && item.ImageTags && item.ImageTags.Thumb) {\n                imgType = 'Thumb';\n                imgTag = item.ImageTags.Thumb;\n            } else if (item.BackdropImageTags && item.BackdropImageTags.length) {\n                imgType = 'Backdrop';\n                imgTag = item.BackdropImageTags[0];\n            } else if (item.ImageTags && item.ImageTags.Thumb) {\n                imgType = 'Thumb';\n                imgTag = item.ImageTags.Thumb;\n            } else if (item.SeriesThumbImageTag && options.inheritThumb !== false) {\n                imgType = 'Thumb';\n                imgTag = item.SeriesThumbImageTag;\n                itemId = item.SeriesId;\n            } else if (item.ParentThumbItemId && options.inheritThumb !== false) {\n                imgType = 'Thumb';\n                imgTag = item.ParentThumbImageTag;\n                itemId = item.ParentThumbItemId;\n            } else if (item.ParentBackdropImageTags && item.ParentBackdropImageTags.length && options.inheritThumb !== false) {\n                imgType = 'Backdrop';\n                imgTag = item.ParentBackdropImageTags[0];\n                itemId = item.ParentBackdropItemId;\n            }\n\n            if (!itemId) {\n                itemId = item.Id;\n            }\n\n            if (imgTag && imgType) {\n                imgUrl = apiClient.getScaledImageUrl(itemId, {\n                    type: imgType,\n                    maxHeight: height,\n                    maxWidth: width,\n                    tag: imgTag\n                });\n            }\n\n            const blurHashes = options.imageBlurhashes || item.ImageBlurHashes || {};\n\n            return {\n                imgUrl: imgUrl,\n                blurhash: (blurHashes[imgType] || {})[imgTag],\n                forceName: forceName,\n                coverImage: coverImage\n            };\n        }\n\n        /**\n         * Generates a random integer in a given range.\n         * @param {number} min - Minimum of the range.\n         * @param {number} max - Maximum of the range.\n         * @returns {number} Randomly generated number.\n         */\n        function getRandomInt(min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        }\n\n        /**\n         * Generates an index used to select the default color of a card based on a string.\n         * @param {string} str - String to use for generating the index.\n         * @returns {number} Index of the color.\n         */\n        function getDefaultColorIndex(str) {\n            const numRandomColors = 5;\n\n            if (str) {\n                const charIndex = Math.floor(str.length / 2);\n                const character = String(str.substr(charIndex, 1).charCodeAt());\n                let sum = 0;\n                for (let i = 0; i < character.length; i++) {\n                    sum += parseInt(character.charAt(i));\n                }\n                const index = String(sum).substr(-1);\n\n                return (index % numRandomColors) + 1;\n            } else {\n                return getRandomInt(1, numRandomColors);\n            }\n        }\n\n        /**\n         * Generates the HTML markup for a card's text.\n         * @param {Array} lines - Array containing the text lines.\n         * @param {string} cssClass - Base CSS class to use for the lines.\n         * @param {boolean} forceLines - Flag to force the rendering of all lines.\n         * @param {boolean} isOuterFooter - Flag to mark the text lines as outer footer.\n         * @param {string} cardLayout - DEPRECATED\n         * @param {boolean} addRightMargin - Flag to add a right margin to the text.\n         * @param {number} maxLines - Maximum number of lines to render.\n         * @returns {string} HTML markup for the card's text.\n         */\n        function getCardTextLines(lines, cssClass, forceLines, isOuterFooter, cardLayout, addRightMargin, maxLines) {\n            let html = '';\n\n            let valid = 0;\n\n            for (let i = 0; i < lines.length; i++) {\n                let currentCssClass = cssClass;\n                const text = lines[i];\n\n                if (valid > 0 && isOuterFooter) {\n                    currentCssClass += ' cardText-secondary';\n                } else if (valid === 0 && isOuterFooter) {\n                    currentCssClass += ' cardText-first';\n                }\n\n                if (addRightMargin) {\n                    currentCssClass += ' cardText-rightmargin';\n                }\n\n                if (text) {\n                    html += \"<div class='\" + currentCssClass + \"'>\";\n                    html += text;\n                    html += '</div>';\n                    valid++;\n\n                    if (maxLines && valid >= maxLines) {\n                        break;\n                    }\n                }\n            }\n\n            if (forceLines) {\n                const linesLength = maxLines || Math.min(lines.length, maxLines || lines.length);\n\n                while (valid < linesLength) {\n                    html += \"<div class='\" + cssClass + \"'>&nbsp;</div>\";\n                    valid++;\n                }\n            }\n\n            return html;\n        }\n\n        /**\n         * Determines if the item is live TV.\n         * @param {Object} item - Item to use for the check.\n         * @returns {boolean} Flag showing if the item is live TV.\n         */\n        function isUsingLiveTvNaming(item) {\n            return item.Type === 'Program' || item.Type === 'Timer' || item.Type === 'Recording';\n        }\n\n        /**\n         * Returns the air time text for the item based on the given times.\n         * @param {object} item - Item used to generate the air time text.\n         * @param {string} showAirDateTime - ISO8601 date for the start of the show.\n         * @param {string} showAirEndTime - ISO8601 date for the end of the show.\n         * @returns {string} The air time text for the item based on the given dates.\n         */\n        function getAirTimeText(item, showAirDateTime, showAirEndTime) {\n            let airTimeText = '';\n\n            if (item.StartDate) {\n                try {\n                    let date = datetime.parseISO8601Date(item.StartDate);\n\n                    if (showAirDateTime) {\n                        airTimeText += datetime.toLocaleDateString(date, { weekday: 'short', month: 'short', day: 'numeric' }) + ' ';\n                    }\n\n                    airTimeText += datetime.getDisplayTime(date);\n\n                    if (item.EndDate && showAirEndTime) {\n                        date = datetime.parseISO8601Date(item.EndDate);\n                        airTimeText += ' - ' + datetime.getDisplayTime(date);\n                    }\n                } catch (e) {\n                    console.error('error parsing date: ' + item.StartDate);\n                }\n            }\n\n            return airTimeText;\n        }\n\n        /**\n         * Generates the HTML markup for the card's footer text.\n         * @param {Object} item - Item used to generate the footer text.\n         * @param {Object} apiClient - API client instance.\n         * @param {Object} options - Options used to generate the footer text.\n         * @param {string} showTitle - Flag to show the title in the footer.\n         * @param {boolean} forceName - Flag to force showing the name of the item.\n         * @param {boolean} overlayText - Flag to show overlay text.\n         * @param {Object} imgUrl - Object representing the card's image URL.\n         * @param {string} footerClass - CSS classes of the footer element.\n         * @param {string} progressHtml - HTML markup of the progress bar element.\n         * @param {string} logoUrl - URL of the logo for the item.\n         * @param {boolean} isOuterFooter - Flag to mark the text as outer footer.\n         * @returns {string} HTML markup of the card's footer text element.\n         */\n        function getCardFooterText(item, apiClient, options, showTitle, forceName, overlayText, imgUrl, footerClass, progressHtml, logoUrl, isOuterFooter) {\n            let html = '';\n\n            if (logoUrl) {\n                html += '<div class=\"lazy cardFooterLogo\" data-src=\"' + logoUrl + '\"></div>';\n            }\n\n            const showOtherText = isOuterFooter ? !overlayText : overlayText;\n\n            if (isOuterFooter && options.cardLayout && layoutManager.mobile) {\n                if (options.cardFooterAside !== 'none') {\n                    html += '<button is=\"paper-icon-button-light\" class=\"itemAction btnCardOptions cardText-secondary\" data-action=\"menu\"><span class=\"material-icons more_vert\"></span></button>';\n                }\n            }\n\n            const cssClass = options.centerText ? 'cardText cardTextCentered' : 'cardText';\n            const serverId = item.ServerId || options.serverId;\n\n            let lines = [];\n            const parentTitleUnderneath = item.Type === 'MusicAlbum' || item.Type === 'Audio' || item.Type === 'MusicVideo';\n            let titleAdded;\n\n            if (showOtherText) {\n                if ((options.showParentTitle || options.showParentTitleOrTitle) && !parentTitleUnderneath) {\n                    if (isOuterFooter && item.Type === 'Episode' && item.SeriesName) {\n                        if (item.SeriesId) {\n                            lines.push(getTextActionButton({\n                                Id: item.SeriesId,\n                                ServerId: serverId,\n                                Name: item.SeriesName,\n                                Type: 'Series',\n                                IsFolder: true\n                            }));\n                        } else {\n                            lines.push(item.SeriesName);\n                        }\n                    } else {\n                        if (isUsingLiveTvNaming(item)) {\n                            lines.push(item.Name);\n\n                            if (!item.EpisodeTitle) {\n                                titleAdded = true;\n                            }\n                        } else {\n                            const parentTitle = item.SeriesName || item.Series || item.Album || item.AlbumArtist || '';\n\n                            if (parentTitle || showTitle) {\n                                lines.push(parentTitle);\n                            }\n                        }\n                    }\n                }\n            }\n\n            let showMediaTitle = (showTitle && !titleAdded) || (options.showParentTitleOrTitle && !lines.length);\n            if (!showMediaTitle && !titleAdded && (showTitle || forceName)) {\n                showMediaTitle = true;\n            }\n\n            if (showMediaTitle) {\n                const name = options.showTitle === 'auto' && !item.IsFolder && item.MediaType === 'Photo' ? '' : itemHelper.getDisplayName(item, {\n                    includeParentInfo: options.includeParentInfoInTitle\n                });\n\n                lines.push(getTextActionButton({\n                    Id: item.Id,\n                    ServerId: serverId,\n                    Name: name,\n                    Type: item.Type,\n                    CollectionType: item.CollectionType,\n                    IsFolder: item.IsFolder\n                }));\n            }\n\n            if (showOtherText) {\n                if (options.showParentTitle && parentTitleUnderneath) {\n                    if (isOuterFooter && item.AlbumArtists && item.AlbumArtists.length) {\n                        item.AlbumArtists[0].Type = 'MusicArtist';\n                        item.AlbumArtists[0].IsFolder = true;\n                        lines.push(getTextActionButton(item.AlbumArtists[0], null, serverId));\n                    } else {\n                        lines.push(isUsingLiveTvNaming(item) ? item.Name : (item.SeriesName || item.Series || item.Album || item.AlbumArtist || ''));\n                    }\n                }\n\n                if (options.showItemCounts) {\n                    lines.push(getItemCountsHtml(options, item));\n                }\n\n                if (options.textLines) {\n                    const additionalLines = options.textLines(item);\n                    for (let i = 0; i < additionalLines.length; i++) {\n                        lines.push(additionalLines[i]);\n                    }\n                }\n\n                if (options.showSongCount) {\n                    let songLine = '';\n\n                    if (item.SongCount) {\n                        songLine = item.SongCount === 1 ?\n                            globalize.translate('ValueOneSong') :\n                            globalize.translate('ValueSongCount', item.SongCount);\n                    }\n\n                    lines.push(songLine);\n                }\n\n                if (options.showPremiereDate) {\n                    if (item.PremiereDate) {\n                        try {\n                            lines.push(datetime.toLocaleDateString(\n                                datetime.parseISO8601Date(item.PremiereDate),\n                                { weekday: 'long', month: 'long', day: 'numeric' }\n                            ));\n                        } catch (err) {\n                            lines.push('');\n                        }\n                    } else {\n                        lines.push('');\n                    }\n                }\n\n                if (options.showYear || options.showSeriesYear) {\n                    if (item.Type === 'Series') {\n                        if (item.Status === 'Continuing') {\n                            lines.push(globalize.translate('SeriesYearToPresent', item.ProductionYear || ''));\n                        } else {\n                            if (item.EndDate && item.ProductionYear) {\n                                const endYear = datetime.parseISO8601Date(item.EndDate).getFullYear();\n                                lines.push(item.ProductionYear + ((endYear === item.ProductionYear) ? '' : (' - ' + endYear)));\n                            } else {\n                                lines.push(item.ProductionYear || '');\n                            }\n                        }\n                    } else {\n                        lines.push(item.ProductionYear || '');\n                    }\n                }\n\n                if (options.showRuntime) {\n                    if (item.RunTimeTicks) {\n                        lines.push(datetime.getDisplayRunningTime(item.RunTimeTicks));\n                    } else {\n                        lines.push('');\n                    }\n                }\n\n                if (options.showAirTime) {\n                    lines.push(getAirTimeText(item, options.showAirDateTime, options.showAirEndTime) || '');\n                }\n\n                if (options.showChannelName) {\n                    if (item.ChannelId) {\n                        lines.push(getTextActionButton({\n\n                            Id: item.ChannelId,\n                            ServerId: serverId,\n                            Name: item.ChannelName,\n                            Type: 'TvChannel',\n                            MediaType: item.MediaType,\n                            IsFolder: false\n\n                        }, item.ChannelName));\n                    } else {\n                        lines.push(item.ChannelName || '&nbsp;');\n                    }\n                }\n\n                if (options.showCurrentProgram && item.Type === 'TvChannel') {\n                    if (item.CurrentProgram) {\n                        lines.push(item.CurrentProgram.Name);\n                    } else {\n                        lines.push('');\n                    }\n                }\n\n                if (options.showCurrentProgramTime && item.Type === 'TvChannel') {\n                    if (item.CurrentProgram) {\n                        lines.push(getAirTimeText(item.CurrentProgram, false, true) || '');\n                    } else {\n                        lines.push('');\n                    }\n                }\n\n                if (options.showSeriesTimerTime) {\n                    if (item.RecordAnyTime) {\n                        lines.push(globalize.translate('Anytime'));\n                    } else {\n                        lines.push(datetime.getDisplayTime(item.StartDate));\n                    }\n                }\n\n                if (options.showSeriesTimerChannel) {\n                    if (item.RecordAnyChannel) {\n                        lines.push(globalize.translate('AllChannels'));\n                    } else {\n                        lines.push(item.ChannelName || globalize.translate('OneChannel'));\n                    }\n                }\n\n                if (options.showPersonRoleOrType) {\n                    if (item.Role) {\n                        lines.push(globalize.translate('PersonRole', item.Role));\n                    }\n                }\n            }\n\n            if ((showTitle || !imgUrl) && forceName && overlayText && lines.length === 1) {\n                lines = [];\n            }\n\n            if (overlayText && showTitle) {\n                lines = [item.Name];\n            }\n\n            const addRightTextMargin = isOuterFooter && options.cardLayout && !options.centerText && options.cardFooterAside !== 'none' && layoutManager.mobile;\n\n            html += getCardTextLines(lines, cssClass, !options.overlayText, isOuterFooter, options.cardLayout, addRightTextMargin, options.lines);\n\n            if (progressHtml) {\n                html += progressHtml;\n            }\n\n            if (html) {\n                if (!isOuterFooter || logoUrl || options.cardLayout) {\n                    html = '<div class=\"' + footerClass + '\">' + html;\n\n                    //cardFooter\n                    html += '</div>';\n                }\n            }\n\n            return html;\n        }\n\n        /**\n         * Generates the HTML markup for the action button.\n         * @param {Object} item - Item used to generate the action button.\n         * @param {string} text - Text of the action button.\n         * @param {string} serverId - ID of the server.\n         * @returns {string} HTML markup of the action button.\n         */\n        function getTextActionButton(item, text, serverId) {\n            if (!text) {\n                text = itemHelper.getDisplayName(item);\n            }\n\n            if (layoutManager.tv) {\n                return text;\n            }\n\n            let html = '<button ' + itemShortcuts.getShortcutAttributesHtml(item, serverId) + ' type=\"button\" class=\"itemAction textActionButton\" title=\"' + text + '\" data-action=\"link\">';\n            html += text;\n            html += '</button>';\n\n            return html;\n        }\n\n        /**\n         * Generates HTML markup for the item count indicator.\n         * @param {Object} options - Options used to generate the item count.\n         * @param {Object} item - Item used to generate the item count.\n         * @returns {string} HTML markup for the item count indicator.\n         */\n        function getItemCountsHtml(options, item) {\n            const counts = [];\n            let childText;\n\n            if (item.Type === 'Playlist') {\n                childText = '';\n\n                if (item.RunTimeTicks) {\n                    let minutes = item.RunTimeTicks / 600000000;\n\n                    minutes = minutes || 1;\n\n                    childText += globalize.translate('ValueMinutes', Math.round(minutes));\n                } else {\n                    childText += globalize.translate('ValueMinutes', 0);\n                }\n\n                counts.push(childText);\n            } else if (item.Type === 'Genre' || item.Type === 'Studio') {\n                if (item.MovieCount) {\n                    childText = item.MovieCount === 1 ?\n                        globalize.translate('ValueOneMovie') :\n                        globalize.translate('ValueMovieCount', item.MovieCount);\n\n                    counts.push(childText);\n                }\n\n                if (item.SeriesCount) {\n                    childText = item.SeriesCount === 1 ?\n                        globalize.translate('ValueOneSeries') :\n                        globalize.translate('ValueSeriesCount', item.SeriesCount);\n\n                    counts.push(childText);\n                }\n                if (item.EpisodeCount) {\n                    childText = item.EpisodeCount === 1 ?\n                        globalize.translate('ValueOneEpisode') :\n                        globalize.translate('ValueEpisodeCount', item.EpisodeCount);\n\n                    counts.push(childText);\n                }\n            } else if (item.Type === 'MusicGenre' || options.context === 'MusicArtist') {\n                if (item.AlbumCount) {\n                    childText = item.AlbumCount === 1 ?\n                        globalize.translate('ValueOneAlbum') :\n                        globalize.translate('ValueAlbumCount', item.AlbumCount);\n\n                    counts.push(childText);\n                }\n                if (item.SongCount) {\n                    childText = item.SongCount === 1 ?\n                        globalize.translate('ValueOneSong') :\n                        globalize.translate('ValueSongCount', item.SongCount);\n\n                    counts.push(childText);\n                }\n                if (item.MusicVideoCount) {\n                    childText = item.MusicVideoCount === 1 ?\n                        globalize.translate('ValueOneMusicVideo') :\n                        globalize.translate('ValueMusicVideoCount', item.MusicVideoCount);\n\n                    counts.push(childText);\n                }\n            } else if (item.Type === 'Series') {\n                childText = item.RecursiveItemCount === 1 ?\n                    globalize.translate('ValueOneEpisode') :\n                    globalize.translate('ValueEpisodeCount', item.RecursiveItemCount);\n\n                counts.push(childText);\n            }\n\n            return counts.join(', ');\n        }\n\n        let refreshIndicatorLoaded;\n\n        /**\n         * Imports the refresh indicator element.\n         */\n        function importRefreshIndicator() {\n            if (!refreshIndicatorLoaded) {\n                refreshIndicatorLoaded = true;\n                /* eslint-disable-next-line  @babel/no-unused-expressions */\n                import('emby-itemrefreshindicator');\n            }\n        }\n\n        /**\n         * Returns the default background class for a card based on a string.\n         * @param {string} str - Text used to generate the background class.\n         * @returns {string} CSS classes for default card backgrounds.\n         */\n        export function getDefaultBackgroundClass(str) {\n            return 'defaultCardBackground defaultCardBackground' + getDefaultColorIndex(str);\n        }\n\n        /**\n         * Builds the HTML markup for an individual card.\n         * @param {number} index - Index of the card\n         * @param {object} item - Item used to generate the card.\n         * @param {object} apiClient - API client instance.\n         * @param {object} options - Options used to generate the card.\n         * @returns {string} HTML markup for the generated card.\n         */\n        function buildCard(index, item, apiClient, options) {\n            let action = options.action || 'link';\n\n            if (action === 'play' && item.IsFolder) {\n                // If this hard-coding is ever removed make sure to test nested photo albums\n                action = 'link';\n            } else if (item.MediaType === 'Photo') {\n                action = 'play';\n            }\n\n            let shape = options.shape;\n\n            if (shape === 'mixed') {\n                shape = null;\n\n                const primaryImageAspectRatio = item.PrimaryImageAspectRatio;\n\n                if (primaryImageAspectRatio) {\n                    if (primaryImageAspectRatio >= 1.33) {\n                        shape = 'mixedBackdrop';\n                    } else if (primaryImageAspectRatio > 0.71) {\n                        shape = 'mixedSquare';\n                    } else {\n                        shape = 'mixedPortrait';\n                    }\n                }\n\n                shape = shape || 'mixedSquare';\n            }\n\n            // TODO move card creation code to Card component\n\n            let className = 'card';\n\n            if (shape) {\n                className += ' ' + shape + 'Card';\n            }\n\n            if (options.cardCssClass) {\n                className += ' ' + options.cardCssClass;\n            }\n\n            if (options.cardClass) {\n                className += ' ' + options.cardClass;\n            }\n\n            if (layoutManager.desktop) {\n                className += ' card-hoverable';\n            }\n\n            if (layoutManager.tv) {\n                className += ' show-focus';\n\n                if (enableFocusTransform) {\n                    className += ' show-animation';\n                }\n            }\n\n            const imgInfo = getCardImageUrl(item, apiClient, options, shape);\n            const imgUrl = imgInfo.imgUrl;\n            const blurhash = imgInfo.blurhash;\n\n            const forceName = imgInfo.forceName;\n\n            const showTitle = options.showTitle === 'auto' ? true : (options.showTitle || item.Type === 'PhotoAlbum' || item.Type === 'Folder');\n            const overlayText = options.overlayText;\n\n            let cardImageContainerClass = 'cardImageContainer';\n            const coveredImage = options.coverImage || imgInfo.coverImage;\n\n            if (coveredImage) {\n                cardImageContainerClass += ' coveredImage';\n\n                if (item.Type === 'TvChannel') {\n                    cardImageContainerClass += ' coveredImage-contain';\n                }\n            }\n\n            if (!imgUrl) {\n                cardImageContainerClass += ' ' + getDefaultBackgroundClass(item.Name);\n            }\n\n            let cardBoxClass = options.cardLayout ? 'cardBox visualCardBox' : 'cardBox';\n\n            let footerCssClass;\n            let progressHtml = indicators.getProgressBarHtml(item);\n\n            let innerCardFooter = '';\n\n            let footerOverlayed = false;\n\n            let logoUrl;\n            const logoHeight = 40;\n\n            if (options.showChannelLogo && item.ChannelPrimaryImageTag) {\n                logoUrl = apiClient.getScaledImageUrl(item.ChannelId, {\n                    type: 'Primary',\n                    height: logoHeight,\n                    tag: item.ChannelPrimaryImageTag\n                });\n            } else if (options.showLogo && item.ParentLogoImageTag) {\n                logoUrl = apiClient.getScaledImageUrl(item.ParentLogoItemId, {\n                    type: 'Logo',\n                    height: logoHeight,\n                    tag: item.ParentLogoImageTag\n                });\n            }\n\n            if (overlayText) {\n                logoUrl = null;\n\n                footerCssClass = progressHtml ? 'innerCardFooter fullInnerCardFooter' : 'innerCardFooter';\n                innerCardFooter += getCardFooterText(item, apiClient, options, showTitle, forceName, overlayText, imgUrl, footerCssClass, progressHtml, logoUrl, false);\n                footerOverlayed = true;\n            } else if (progressHtml) {\n                innerCardFooter += '<div class=\"innerCardFooter fullInnerCardFooter innerCardFooterClear\">';\n                innerCardFooter += progressHtml;\n                innerCardFooter += '</div>';\n\n                progressHtml = '';\n            }\n\n            const mediaSourceCount = item.MediaSourceCount || 1;\n            if (mediaSourceCount > 1 && options.disableIndicators !== true) {\n                innerCardFooter += '<div class=\"mediaSourceIndicator\">' + mediaSourceCount + '</div>';\n            }\n\n            let outerCardFooter = '';\n            if (!overlayText && !footerOverlayed) {\n                footerCssClass = options.cardLayout ? 'cardFooter' : 'cardFooter cardFooter-transparent';\n\n                if (logoUrl) {\n                    footerCssClass += ' cardFooter-withlogo';\n                }\n\n                if (!options.cardLayout) {\n                    logoUrl = null;\n                }\n\n                outerCardFooter = getCardFooterText(item, apiClient, options, showTitle, forceName, overlayText, imgUrl, footerCssClass, progressHtml, logoUrl, true);\n            }\n\n            if (outerCardFooter && !options.cardLayout) {\n                cardBoxClass += ' cardBox-bottompadded';\n            }\n\n            let overlayButtons = '';\n            if (layoutManager.mobile) {\n                let overlayPlayButton = options.overlayPlayButton;\n\n                if (overlayPlayButton == null && !options.overlayMoreButton && !options.overlayInfoButton && !options.cardLayout) {\n                    overlayPlayButton = item.MediaType === 'Video';\n                }\n\n                const btnCssClass = 'cardOverlayButton cardOverlayButton-br itemAction';\n\n                if (options.centerPlayButton) {\n                    overlayButtons += '<button is=\"paper-icon-button-light\" class=\"' + btnCssClass + ' cardOverlayButton-centered\" data-action=\"play\"><span class=\"material-icons cardOverlayButtonIcon play_arrow\"></span></button>';\n                }\n\n                if (overlayPlayButton && !item.IsPlaceHolder && (item.LocationType !== 'Virtual' || !item.MediaType || item.Type === 'Program') && item.Type !== 'Person') {\n                    overlayButtons += '<button is=\"paper-icon-button-light\" class=\"' + btnCssClass + '\" data-action=\"play\"><span class=\"material-icons cardOverlayButtonIcon play_arrow\"></span></button>';\n                }\n\n                if (options.overlayMoreButton) {\n                    overlayButtons += '<button is=\"paper-icon-button-light\" class=\"' + btnCssClass + '\" data-action=\"menu\"><span class=\"material-icons cardOverlayButtonIcon more_vert\"></span></button>';\n                }\n            }\n\n            if (options.showChildCountIndicator && item.ChildCount) {\n                className += ' groupedCard';\n            }\n\n            // cardBox can be it's own separate element if an outer footer is ever needed\n            let cardImageContainerOpen;\n            let cardImageContainerClose = '';\n            let cardBoxClose = '';\n            let cardScalableClose = '';\n\n            const cardContentClass = 'cardContent';\n\n            let blurhashAttrib = '';\n            if (blurhash && blurhash.length > 0) {\n                blurhashAttrib = 'data-blurhash=\"' + blurhash + '\"';\n            }\n\n            if (layoutManager.tv) {\n                // Don't use the IMG tag with safari because it puts a white border around it\n                cardImageContainerOpen = imgUrl ? ('<div class=\"' + cardImageContainerClass + ' ' + cardContentClass + ' lazy\" data-src=\"' + imgUrl + '\" ' + blurhashAttrib + '>') : ('<div class=\"' + cardImageContainerClass + ' ' + cardContentClass + '\">');\n\n                cardImageContainerClose = '</div>';\n            } else {\n                // Don't use the IMG tag with safari because it puts a white border around it\n                cardImageContainerOpen = imgUrl ? ('<button data-action=\"' + action + '\" class=\"' + cardImageContainerClass + ' ' + cardContentClass + ' itemAction lazy\" data-src=\"' + imgUrl + '\" ' + blurhashAttrib + '>') : ('<button data-action=\"' + action + '\" class=\"' + cardImageContainerClass + ' ' + cardContentClass + ' itemAction\">');\n\n                cardImageContainerClose = '</button>';\n            }\n\n            const cardScalableClass = 'cardScalable';\n\n            cardImageContainerOpen = '<div class=\"' + cardBoxClass + '\"><div class=\"' + cardScalableClass + '\"><div class=\"cardPadder cardPadder-' + shape + '\"></div>' + cardImageContainerOpen;\n            cardBoxClose = '</div>';\n            cardScalableClose = '</div>';\n\n            if (options.disableIndicators !== true) {\n                let indicatorsHtml = '';\n\n                if (options.missingIndicator !== false) {\n                    indicatorsHtml += indicators.getMissingIndicator(item);\n                }\n\n                indicatorsHtml += indicators.getSyncIndicator(item);\n                indicatorsHtml += indicators.getTimerIndicator(item);\n\n                indicatorsHtml += indicators.getTypeIndicator(item);\n\n                if (options.showGroupCount) {\n                    indicatorsHtml += indicators.getChildCountIndicatorHtml(item, {\n                        minCount: 1\n                    });\n                } else {\n                    indicatorsHtml += indicators.getPlayedIndicatorHtml(item);\n                }\n\n                if (item.Type === 'CollectionFolder' || item.CollectionType) {\n                    const refreshClass = item.RefreshProgress ? '' : ' class=\"hide\"';\n                    indicatorsHtml += '<div is=\"emby-itemrefreshindicator\"' + refreshClass + ' data-progress=\"' + (item.RefreshProgress || 0) + '\" data-status=\"' + item.RefreshStatus + '\"></div>';\n                    importRefreshIndicator();\n                }\n\n                if (indicatorsHtml) {\n                    cardImageContainerOpen += '<div class=\"cardIndicators\">' + indicatorsHtml + '</div>';\n                }\n            }\n\n            if (!imgUrl) {\n                cardImageContainerOpen += getDefaultText(item, options);\n            }\n\n            const tagName = (layoutManager.tv) && !overlayButtons ? 'button' : 'div';\n\n            const nameWithPrefix = (item.SortName || item.Name || '');\n            let prefix = nameWithPrefix.substring(0, Math.min(3, nameWithPrefix.length));\n\n            if (prefix) {\n                prefix = prefix.toUpperCase();\n            }\n\n            let timerAttributes = '';\n            if (item.TimerId) {\n                timerAttributes += ' data-timerid=\"' + item.TimerId + '\"';\n            }\n            if (item.SeriesTimerId) {\n                timerAttributes += ' data-seriestimerid=\"' + item.SeriesTimerId + '\"';\n            }\n\n            let actionAttribute;\n\n            if (tagName === 'button') {\n                className += ' itemAction';\n                actionAttribute = ' data-action=\"' + action + '\"';\n            } else {\n                actionAttribute = '';\n            }\n\n            if (item.Type !== 'MusicAlbum' && item.Type !== 'MusicArtist' && item.Type !== 'Audio') {\n                className += ' card-withuserdata';\n            }\n\n            const positionTicksData = item.UserData && item.UserData.PlaybackPositionTicks ? (' data-positionticks=\"' + item.UserData.PlaybackPositionTicks + '\"') : '';\n            const collectionIdData = options.collectionId ? (' data-collectionid=\"' + options.collectionId + '\"') : '';\n            const playlistIdData = options.playlistId ? (' data-playlistid=\"' + options.playlistId + '\"') : '';\n            const mediaTypeData = item.MediaType ? (' data-mediatype=\"' + item.MediaType + '\"') : '';\n            const collectionTypeData = item.CollectionType ? (' data-collectiontype=\"' + item.CollectionType + '\"') : '';\n            const channelIdData = item.ChannelId ? (' data-channelid=\"' + item.ChannelId + '\"') : '';\n            const contextData = options.context ? (' data-context=\"' + options.context + '\"') : '';\n            const parentIdData = options.parentId ? (' data-parentid=\"' + options.parentId + '\"') : '';\n\n            let additionalCardContent = '';\n\n            if (layoutManager.desktop && !options.disableHoverMenu) {\n                additionalCardContent += getHoverMenuHtml(item, action, options);\n            }\n\n            return '<' + tagName + ' data-index=\"' + index + '\"' + timerAttributes + actionAttribute + ' data-isfolder=\"' + (item.IsFolder || false) + '\" data-serverid=\"' + (item.ServerId || options.serverId) + '\" data-id=\"' + (item.Id || item.ItemId) + '\" data-type=\"' + item.Type + '\"' + mediaTypeData + collectionTypeData + channelIdData + positionTicksData + collectionIdData + playlistIdData + contextData + parentIdData + ' data-prefix=\"' + prefix + '\" class=\"' + className + '\">' + cardImageContainerOpen + innerCardFooter + cardImageContainerClose + overlayButtons + additionalCardContent + cardScalableClose + outerCardFooter + cardBoxClose + '</' + tagName + '>';\n        }\n\n        /**\n         * Generates HTML markup for the card overlay.\n         * @param {object} item - Item used to generate the card overlay.\n         * @param {string} action - Action assigned to the overlay.\n         * @param {Array} options - Card builder options.\n         * @returns {string} HTML markup of the card overlay.\n         */\n        function getHoverMenuHtml(item, action, options) {\n            let html = '';\n\n            html += '<div class=\"cardOverlayContainer itemAction\" data-action=\"' + action + '\">';\n\n            const btnCssClass = 'cardOverlayButton cardOverlayButton-hover itemAction paper-icon-button-light';\n\n            if (playbackManager.canPlay(item)) {\n                html += '<button is=\"paper-icon-button-light\" class=\"' + btnCssClass + ' cardOverlayFab-primary\" data-action=\"resume\"><span class=\"material-icons cardOverlayButtonIcon cardOverlayButtonIcon-hover play_arrow\"></span></button>';\n            }\n\n            html += '<div class=\"cardOverlayButton-br flex\">';\n\n            const userData = item.UserData || {};\n\n            if (itemHelper.canMarkPlayed(item)) {\n                /* eslint-disable-next-line  @babel/no-unused-expressions */\n                import('emby-playstatebutton');\n                html += '<button is=\"emby-playstatebutton\" type=\"button\" data-action=\"none\" class=\"' + btnCssClass + '\" data-id=\"' + item.Id + '\" data-serverid=\"' + item.ServerId + '\" data-itemtype=\"' + item.Type + '\" data-played=\"' + (userData.Played) + '\"><span class=\"material-icons cardOverlayButtonIcon cardOverlayButtonIcon-hover check\"></span></button>';\n            }\n\n            if (itemHelper.canRate(item)) {\n                const likes = userData.Likes == null ? '' : userData.Likes;\n\n                /* eslint-disable-next-line  @babel/no-unused-expressions */\n                import('emby-ratingbutton');\n                html += '<button is=\"emby-ratingbutton\" type=\"button\" data-action=\"none\" class=\"' + btnCssClass + '\" data-id=\"' + item.Id + '\" data-serverid=\"' + item.ServerId + '\" data-itemtype=\"' + item.Type + '\" data-likes=\"' + likes + '\" data-isfavorite=\"' + (userData.IsFavorite) + '\"><span class=\"material-icons cardOverlayButtonIcon cardOverlayButtonIcon-hover favorite\"></span></button>';\n            }\n\n            html += '<button is=\"paper-icon-button-light\" class=\"' + btnCssClass + '\" data-action=\"menu\"><span class=\"material-icons cardOverlayButtonIcon cardOverlayButtonIcon-hover more_vert\"></span></button>';\n            html += '</div>';\n            html += '</div>';\n\n            return html;\n        }\n\n        /**\n         * Generates the text or icon used for default card backgrounds.\n         * @param {object} item - Item used to generate the card overlay.\n         * @param {object} options - Options used to generate the card overlay.\n         * @returns {string} HTML markup of the card overlay.\n         */\n        export function getDefaultText(item, options) {\n            if (item.CollectionType) {\n                return '<span class=\"cardImageIcon material-icons ' + imageHelper.getLibraryIcon(item.CollectionType) + '\"></span>';\n            }\n\n            switch (item.Type) {\n                case 'MusicAlbum':\n                    return '<span class=\"cardImageIcon material-icons album\"></span>';\n                case 'MusicArtist':\n                case 'Person':\n                    return '<span class=\"cardImageIcon material-icons person\"></span>';\n                case 'Audio':\n                    return '<span class=\"cardImageIcon material-icons audiotrack\"></span>';\n                case 'Movie':\n                    return '<span class=\"cardImageIcon material-icons movie\"></span>';\n                case 'Series':\n                    return '<span class=\"cardImageIcon material-icons tv\"></span>';\n                case 'Book':\n                    return '<span class=\"cardImageIcon material-icons book\"></span>';\n                case 'Folder':\n                    return '<span class=\"cardImageIcon material-icons folder\"></span>';\n                case 'BoxSet':\n                    return '<span class=\"cardImageIcon material-icons collections\"></span>';\n                case 'Playlist':\n                    return '<span class=\"cardImageIcon material-icons view_list\"></span>';\n                case 'PhotoAlbum':\n                    return '<span class=\"cardImageIcon material-icons photo_album\"></span>';\n            }\n\n            if (options && options.defaultCardImageIcon) {\n                return '<span class=\"cardImageIcon material-icons ' + options.defaultCardImageIcon + '\"></span>';\n            }\n\n            const defaultName = isUsingLiveTvNaming(item) ? item.Name : itemHelper.getDisplayName(item);\n            return '<div class=\"cardText cardDefaultText\">' + defaultName + '</div>';\n        }\n\n        /**\n         * Builds a set of cards and inserts them into the page.\n         * @param {Array} items - Array of items used to build the cards.\n         * @param {options} options - Options of the cards to build.\n         */\n        export function buildCards(items, options) {\n            // Abort if the container has been disposed\n            if (!document.body.contains(options.itemsContainer)) {\n                return;\n            }\n\n            if (options.parentContainer) {\n                if (items.length) {\n                    options.parentContainer.classList.remove('hide');\n                } else {\n                    options.parentContainer.classList.add('hide');\n                    return;\n                }\n            }\n\n            const html = buildCardsHtmlInternal(items, options);\n\n            if (html) {\n                if (options.itemsContainer.cardBuilderHtml !== html) {\n                    options.itemsContainer.innerHTML = html;\n\n                    if (items.length < 50) {\n                        options.itemsContainer.cardBuilderHtml = html;\n                    } else {\n                        options.itemsContainer.cardBuilderHtml = null;\n                    }\n                }\n\n                imageLoader.lazyChildren(options.itemsContainer);\n            } else {\n                options.itemsContainer.innerHTML = html;\n                options.itemsContainer.cardBuilderHtml = null;\n            }\n\n            if (options.autoFocus) {\n                focusManager.autoFocus(options.itemsContainer, true);\n            }\n        }\n\n        /**\n         * Ensures the indicators for a card exist and creates them if they don't exist.\n         * @param {HTMLDivElement} card - DOM element of the card.\n         * @param {HTMLDivElement} indicatorsElem - DOM element of the indicators.\n         * @returns {HTMLDivElement} - DOM element of the indicators.\n         */\n        function ensureIndicators(card, indicatorsElem) {\n            if (indicatorsElem) {\n                return indicatorsElem;\n            }\n\n            indicatorsElem = card.querySelector('.cardIndicators');\n\n            if (!indicatorsElem) {\n                const cardImageContainer = card.querySelector('.cardImageContainer');\n                indicatorsElem = document.createElement('div');\n                indicatorsElem.classList.add('cardIndicators');\n                cardImageContainer.appendChild(indicatorsElem);\n            }\n\n            return indicatorsElem;\n        }\n\n        /**\n         * Adds user data to the card such as progress indicators and played status.\n         * @param {HTMLDivElement} card - DOM element of the card.\n         * @param {Object} userData - User data to apply to the card.\n         */\n        function updateUserData(card, userData) {\n            const type = card.getAttribute('data-type');\n            const enableCountIndicator = type === 'Series' || type === 'BoxSet' || type === 'Season';\n            let indicatorsElem = null;\n            let playedIndicator = null;\n            let countIndicator = null;\n            let itemProgressBar = null;\n\n            if (userData.Played) {\n                playedIndicator = card.querySelector('.playedIndicator');\n\n                if (!playedIndicator) {\n                    playedIndicator = document.createElement('div');\n                    playedIndicator.classList.add('playedIndicator');\n                    playedIndicator.classList.add('indicator');\n                    indicatorsElem = ensureIndicators(card, indicatorsElem);\n                    indicatorsElem.appendChild(playedIndicator);\n                }\n                playedIndicator.innerHTML = '<span class=\"material-icons indicatorIcon check\"></span>';\n            } else {\n                playedIndicator = card.querySelector('.playedIndicator');\n                if (playedIndicator) {\n                    playedIndicator.parentNode.removeChild(playedIndicator);\n                }\n            }\n            if (userData.UnplayedItemCount) {\n                countIndicator = card.querySelector('.countIndicator');\n\n                if (!countIndicator) {\n                    countIndicator = document.createElement('div');\n                    countIndicator.classList.add('countIndicator');\n                    indicatorsElem = ensureIndicators(card, indicatorsElem);\n                    indicatorsElem.appendChild(countIndicator);\n                }\n                countIndicator.innerHTML = userData.UnplayedItemCount;\n            } else if (enableCountIndicator) {\n                countIndicator = card.querySelector('.countIndicator');\n                if (countIndicator) {\n                    countIndicator.parentNode.removeChild(countIndicator);\n                }\n            }\n\n            const progressHtml = indicators.getProgressBarHtml({\n                Type: type,\n                UserData: userData,\n                MediaType: 'Video'\n            });\n\n            if (progressHtml) {\n                itemProgressBar = card.querySelector('.itemProgressBar');\n\n                if (!itemProgressBar) {\n                    itemProgressBar = document.createElement('div');\n                    itemProgressBar.classList.add('itemProgressBar');\n\n                    let innerCardFooter = card.querySelector('.innerCardFooter');\n                    if (!innerCardFooter) {\n                        innerCardFooter = document.createElement('div');\n                        innerCardFooter.classList.add('innerCardFooter');\n                        const cardImageContainer = card.querySelector('.cardImageContainer');\n                        cardImageContainer.appendChild(innerCardFooter);\n                    }\n                    innerCardFooter.appendChild(itemProgressBar);\n                }\n\n                itemProgressBar.innerHTML = progressHtml;\n            } else {\n                itemProgressBar = card.querySelector('.itemProgressBar');\n                if (itemProgressBar) {\n                    itemProgressBar.parentNode.removeChild(itemProgressBar);\n                }\n            }\n        }\n\n        /**\n         * Handles when user data has changed.\n         * @param {Object} userData - User data to apply to the card.\n         * @param {HTMLElement} scope - DOM element to use as a scope when selecting cards.\n         */\n        export function onUserDataChanged(userData, scope) {\n            const cards = (scope || document.body).querySelectorAll('.card-withuserdata[data-id=\"' + userData.ItemId + '\"]');\n\n            for (let i = 0, length = cards.length; i < length; i++) {\n                updateUserData(cards[i], userData);\n            }\n        }\n\n        /**\n         * Handles when a timer has been created.\n         * @param {string} programId - ID of the program.\n         * @param {string} newTimerId - ID of the new timer.\n         * @param {HTMLElement} itemsContainer - DOM element of the itemsContainer.\n         */\n        export function onTimerCreated(programId, newTimerId, itemsContainer) {\n            const cells = itemsContainer.querySelectorAll('.card[data-id=\"' + programId + '\"]');\n\n            for (let i = 0, length = cells.length; i < length; i++) {\n                const cell = cells[i];\n                const icon = cell.querySelector('.timerIndicator');\n                if (!icon) {\n                    const indicatorsElem = ensureIndicators(cell);\n                    indicatorsElem.insertAdjacentHTML('beforeend', '<span class=\"material-icons timerIndicator indicatorIcon fiber_manual_record\"></span>');\n                }\n                cell.setAttribute('data-timerid', newTimerId);\n            }\n        }\n\n        /**\n         * Handles when a timer has been cancelled.\n         * @param {string} timerId - ID of the cancelled timer.\n         * @param {HTMLElement} itemsContainer - DOM element of the itemsContainer.\n         */\n        export function onTimerCancelled(timerId, itemsContainer) {\n            const cells = itemsContainer.querySelectorAll('.card[data-timerid=\"' + timerId + '\"]');\n\n            for (let i = 0; i < cells.length; i++) {\n                const cell = cells[i];\n                const icon = cell.querySelector('.timerIndicator');\n                if (icon) {\n                    icon.parentNode.removeChild(icon);\n                }\n                cell.removeAttribute('data-timerid');\n            }\n        }\n\n        /**\n         * Handles when a series timer has been cancelled.\n         * @param {string} cancelledTimerId - ID of the cancelled timer.\n         * @param {HTMLElement} itemsContainer - DOM element of the itemsContainer.\n         */\n        export function onSeriesTimerCancelled(cancelledTimerId, itemsContainer) {\n            const cells = itemsContainer.querySelectorAll('.card[data-seriestimerid=\"' + cancelledTimerId + '\"]');\n\n            for (let i = 0; i < cells.length; i++) {\n                const cell = cells[i];\n                const icon = cell.querySelector('.timerIndicator');\n                if (icon) {\n                    icon.parentNode.removeChild(icon);\n                }\n                cell.removeAttribute('data-seriestimerid');\n            }\n        }\n\n/* eslint-enable indent */\n\nexport default {\n    getCardsHtml: getCardsHtml,\n    getDefaultBackgroundClass: getDefaultBackgroundClass,\n    getDefaultText: getDefaultText,\n    buildCards: buildCards,\n    onUserDataChanged: onUserDataChanged,\n    onTimerCreated: onTimerCreated,\n    onTimerCancelled: onTimerCancelled,\n    onSeriesTimerCancelled: onSeriesTimerCancelled\n};\n"]}