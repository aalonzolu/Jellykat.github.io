{"version":3,"sources":["components/mediainfo/mediainfo.js"],"names":["define","_exports","_datetime","_globalize","_appRouter","_itemHelper","_indicators","_materialIcons","_mediainfo","_programStyles","_embyButton","_interopRequireDefault","obj","__esModule","default","getMediaInfoHtml","item","options","text","date","minutes","count","html","miscInfo","showFolderRuntime","Type","MediaType","SongCount","ChildCount","push","globalize","translate","RunTimeTicks","datetime","getDisplayRunningTime","originalAirDate","PremiereDate","parseISO8601Date","toLocaleDateString","e","console","error","RecordAnyTime","getDisplayTime","StartDate","RecordAnyChannel","ChannelName","year","ProductionYear","Status","EndDate","getFullYear","concat","programIndicator","IsLive","IsPremiere","IsSeries","IsRepeat","EpisodeTitle","episodeTitle","itemHelper","getDisplayName","includeIndexNumber","episodeTitleIndexNumber","IsMovie","runtime","Math","round","OfficialRating","cssClass","Video3DFormat","Width","Height","container","Container","map","m","getMediaInfoItem","join","getStarIconsHtml","CommunityRating","toFixed","HasSubtitles","subtitles","CriticRating","criticRating","endsAt","getEndsAt","indicators","getMissingIndicator","endDate","Date","getTime","displayTime","getEndsAtFromPosition","runtimeTicks","positionTicks","includeText","mediaInfoText","fillPrimaryMediaInfo","elem","getPrimaryMediaInfoHtml","innerHTML","afterFill","fillSecondaryMediaInfo","getSecondaryMediaInfoHtml","endsAtElem","querySelector","dynamicEndTime","interval","setInterval","document","body","contains","clearInterval","lnkChannel","addEventListener","onChannelLinkClick","channelId","this","getAttribute","serverId","appRouter","showItem","preventDefault","interactive","getProgramInfoHtml","programTime","startDate","weekday","month","day","ChannelNumber","ChannelId","getRouteUrl","ServerId","Name","Id","timerIndicator","timerHtml","getTimerIndicator","status","TimerId","SeriesTimerId","getResolutionText","i","width","height","IsInterlaced","getMediaInfoStats","list","videoStream","MediaSources","MediaStreams","filter","audioStream","getAudioStreamForDisplay","mediaSource","Index","DefaultAudioStreamIndex","VideoType","type","resolutionText","Codec","channelText","channels","Channels","audioCodec","toLowerCase","Profile","DateCreated","enableDateAddedDisplay","dateCreated","Object","defineProperty","value","_default"],"mappings":"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","file":"mediainfo.js","sourcesContent":["import datetime from 'datetime';\nimport globalize from 'globalize';\nimport appRouter from 'appRouter';\nimport itemHelper from 'itemHelper';\nimport indicators from 'indicators';\nimport 'material-icons';\nimport 'css!./mediainfo.css';\nimport 'programStyles';\nimport 'emby-button';\n\n/* eslint-disable indent */\n    function getTimerIndicator(item) {\n        let status;\n\n        if (item.Type === 'SeriesTimer') {\n            return '<span class=\"material-icons mediaInfoItem mediaInfoIconItem mediaInfoTimerIcon fiber_smart_record\"></span>';\n        } else if (item.TimerId || item.SeriesTimerId) {\n            status = item.Status || 'Cancelled';\n        } else if (item.Type === 'Timer') {\n            status = item.Status;\n        } else {\n            return '';\n        }\n\n        if (item.SeriesTimerId) {\n            if (status !== 'Cancelled') {\n                return '<span class=\"material-icons mediaInfoItem mediaInfoIconItem mediaInfoTimerIcon fiber_smart_record\"></span>';\n            }\n\n            return '<span class=\"material-icons mediaInfoItem mediaInfoIconItem fiber_smart_record\"></span>';\n        }\n\n        return '<span class=\"material-icons mediaInfoItem mediaInfoIconItem mediaInfoTimerIcon fiber_manual_record\"></span>';\n    }\n\n    function getProgramInfoHtml(item, options) {\n        let html = '';\n\n        const miscInfo = [];\n        let text;\n        let date;\n\n        if (item.StartDate && options.programTime !== false) {\n            try {\n                text = '';\n\n                date = datetime.parseISO8601Date(item.StartDate);\n\n                if (options.startDate !== false) {\n                    text += datetime.toLocaleDateString(date, { weekday: 'short', month: 'short', day: 'numeric' });\n                }\n\n                text += ` ${datetime.getDisplayTime(date)}`;\n\n                if (item.EndDate) {\n                    date = datetime.parseISO8601Date(item.EndDate);\n                    text += ` - ${datetime.getDisplayTime(date)}`;\n                }\n\n                miscInfo.push(text);\n            } catch (e) {\n                console.error('error parsing date:', item.StartDate);\n            }\n        }\n\n        if (item.ChannelNumber) {\n            miscInfo.push(`CH ${item.ChannelNumber}`);\n        }\n\n        if (item.ChannelName) {\n            if (options.interactive && item.ChannelId) {\n                miscInfo.push({\n                    html: `<a is=\"emby-linkbutton\" class=\"button-flat mediaInfoItem\" href=\"${appRouter.getRouteUrl({\n\n                        ServerId: item.ServerId,\n                        Type: 'TvChannel',\n                        Name: item.ChannelName,\n                        Id: item.ChannelId\n\n                    })}\">${item.ChannelName}</a>`\n                });\n            } else {\n                miscInfo.push(item.ChannelName);\n            }\n        }\n\n        if (options.timerIndicator !== false) {\n            const timerHtml = getTimerIndicator(item);\n            if (timerHtml) {\n                miscInfo.push({\n                    html: timerHtml\n                });\n            }\n        }\n\n        html += miscInfo.map(m => {\n            return getMediaInfoItem(m);\n        }).join('');\n\n        return html;\n    }\n\n    export function getMediaInfoHtml(item, options) {\n        let html = '';\n\n        const miscInfo = [];\n        options = options || {};\n        let text;\n        let date;\n        let minutes;\n        let count;\n\n        const showFolderRuntime = item.Type === 'MusicAlbum' || item.MediaType === 'MusicArtist' || item.MediaType === 'Playlist' || item.MediaType === 'MusicGenre';\n\n        if (showFolderRuntime) {\n            count = item.SongCount || item.ChildCount;\n\n            if (count) {\n                miscInfo.push(globalize.translate('TrackCount', count));\n            }\n\n            if (item.RunTimeTicks) {\n                miscInfo.push(datetime.getDisplayRunningTime(item.RunTimeTicks));\n            }\n        } else if (item.Type === 'PhotoAlbum' || item.Type === 'BoxSet') {\n            count = item.ChildCount;\n\n            if (count) {\n                miscInfo.push(globalize.translate('ItemCount', count));\n            }\n        }\n\n        if ((item.Type === 'Episode' || item.MediaType === 'Photo') && options.originalAirDate !== false) {\n            if (item.PremiereDate) {\n                try {\n                    date = datetime.parseISO8601Date(item.PremiereDate);\n\n                    text = datetime.toLocaleDateString(date);\n                    miscInfo.push(text);\n                } catch (e) {\n                    console.error('error parsing date:', item.PremiereDate);\n                }\n            }\n        }\n\n        if (item.Type === 'SeriesTimer') {\n            if (item.RecordAnyTime) {\n                miscInfo.push(globalize.translate('Anytime'));\n            } else {\n                miscInfo.push(datetime.getDisplayTime(item.StartDate));\n            }\n\n            if (item.RecordAnyChannel) {\n                miscInfo.push(globalize.translate('AllChannels'));\n            } else {\n                miscInfo.push(item.ChannelName || globalize.translate('OneChannel'));\n            }\n        }\n\n        if (item.StartDate && item.Type !== 'Program' && item.Type !== 'SeriesTimer') {\n            try {\n                date = datetime.parseISO8601Date(item.StartDate);\n\n                text = datetime.toLocaleDateString(date);\n                miscInfo.push(text);\n\n                if (item.Type !== 'Recording') {\n                    text = datetime.getDisplayTime(date);\n                    miscInfo.push(text);\n                }\n            } catch (e) {\n                console.error('error parsing date:', item.StartDate);\n            }\n        }\n\n        if (options.year !== false && item.ProductionYear && item.Type === 'Series') {\n            if (item.Status === 'Continuing') {\n                miscInfo.push(globalize.translate('SeriesYearToPresent', item.ProductionYear));\n            } else if (item.ProductionYear) {\n                text = item.ProductionYear;\n\n                if (item.EndDate) {\n                    try {\n                        const endYear = datetime.parseISO8601Date(item.EndDate).getFullYear();\n\n                        if (endYear !== item.ProductionYear) {\n                            text += `-${datetime.parseISO8601Date(item.EndDate).getFullYear()}`;\n                        }\n                    } catch (e) {\n                        console.error('error parsing date:', item.EndDate);\n                    }\n                }\n\n                miscInfo.push(text);\n            }\n        }\n\n        if (item.Type === 'Program') {\n            if (options.programIndicator !== false) {\n                if (item.IsLive) {\n                    miscInfo.push({\n                        html: `<div class=\"mediaInfoProgramAttribute mediaInfoItem liveTvProgram\">${globalize.translate('Live')}</div>`\n                    });\n                } else if (item.IsPremiere) {\n                    miscInfo.push({\n                        html: `<div class=\"mediaInfoProgramAttribute mediaInfoItem premiereTvProgram\">${globalize.translate('Premiere')}</div>`\n                    });\n                } else if (item.IsSeries && !item.IsRepeat) {\n                    miscInfo.push({\n                        html: `<div class=\"mediaInfoProgramAttribute mediaInfoItem newTvProgram\">${globalize.translate('New')}</div>`\n                    });\n                } else if (item.IsSeries && item.IsRepeat) {\n                    miscInfo.push({\n                        html: `<div class=\"mediaInfoProgramAttribute mediaInfoItem repeatTvProgram\">${globalize.translate('Repeat')}</div>`\n                    });\n                }\n            }\n\n            if ((item.IsSeries || item.EpisodeTitle) && options.episodeTitle !== false) {\n                text = itemHelper.getDisplayName(item, {\n                    includeIndexNumber: options.episodeTitleIndexNumber\n                });\n\n                if (text) {\n                    miscInfo.push(text);\n                }\n            } else if (item.IsMovie && item.ProductionYear && options.originalAirDate !== false) {\n                miscInfo.push(item.ProductionYear);\n            } else if (item.PremiereDate && options.originalAirDate !== false) {\n                try {\n                    date = datetime.parseISO8601Date(item.PremiereDate);\n                    text = globalize.translate('OriginalAirDateValue', datetime.toLocaleDateString(date));\n                    miscInfo.push(text);\n                } catch (e) {\n                    console.error('error parsing date:', item.PremiereDate);\n                }\n            } else if (item.ProductionYear) {\n                miscInfo.push(item.ProductionYear);\n            }\n        }\n\n        if (options.year !== false) {\n            if (item.Type !== 'Series' && item.Type !== 'Episode' && item.Type !== 'Person' && item.MediaType !== 'Photo' && item.Type !== 'Program' && item.Type !== 'Season') {\n                if (item.ProductionYear) {\n                    miscInfo.push(item.ProductionYear);\n                } else if (item.PremiereDate) {\n                    try {\n                        text = datetime.parseISO8601Date(item.PremiereDate).getFullYear();\n                        miscInfo.push(text);\n                    } catch (e) {\n                        console.error('error parsing date:', item.PremiereDate);\n                    }\n                }\n            }\n        }\n\n        if (item.RunTimeTicks && item.Type !== 'Series' && item.Type !== 'Program' && item.Type !== 'Book' && !showFolderRuntime && options.runtime !== false) {\n            if (item.Type === 'Audio') {\n                miscInfo.push(datetime.getDisplayRunningTime(item.RunTimeTicks));\n            } else {\n                minutes = item.RunTimeTicks / 600000000;\n\n                minutes = minutes || 1;\n\n                miscInfo.push(`${Math.round(minutes)} mins`);\n            }\n        }\n\n        if (item.OfficialRating && item.Type !== 'Season' && item.Type !== 'Episode') {\n            miscInfo.push({\n                text: item.OfficialRating,\n                cssClass: 'mediaInfoOfficialRating'\n            });\n        }\n\n        if (item.Video3DFormat) {\n            miscInfo.push('3D');\n        }\n\n        if (item.MediaType === 'Photo' && item.Width && item.Height) {\n            miscInfo.push(`${item.Width}x${item.Height}`);\n        }\n\n        if (options.container !== false && item.Type === 'Audio' && item.Container) {\n            miscInfo.push(item.Container);\n        }\n\n        html += miscInfo.map(m => {\n            return getMediaInfoItem(m);\n        }).join('');\n\n        html += getStarIconsHtml(item);\n\n        if (item.HasSubtitles && options.subtitles !== false) {\n            html += '<div class=\"mediaInfoItem mediaInfoText closedCaptionMediaInfoText\">CC</div>';\n        }\n\n        if (item.CriticRating && options.criticRating !== false) {\n            if (item.CriticRating >= 60) {\n                html += `<div class=\"mediaInfoItem mediaInfoCriticRating mediaInfoCriticRatingFresh\">${item.CriticRating}</div>`;\n            } else {\n                html += `<div class=\"mediaInfoItem mediaInfoCriticRating mediaInfoCriticRatingRotten\">${item.CriticRating}</div>`;\n            }\n        }\n\n        if (options.endsAt !== false) {\n            const endsAt = getEndsAt(item);\n            if (endsAt) {\n                html += getMediaInfoItem(endsAt, 'endsAt');\n            }\n        }\n\n        html += indicators.getMissingIndicator(item);\n\n        return html;\n    }\n\n    export function getEndsAt(item) {\n        if (item.MediaType === 'Video' && item.RunTimeTicks) {\n            if (!item.StartDate) {\n                let endDate = new Date().getTime() + (item.RunTimeTicks / 10000);\n                endDate = new Date(endDate);\n\n                const displayTime = datetime.getDisplayTime(endDate);\n                return globalize.translate('EndsAtValue', displayTime);\n            }\n        }\n\n        return null;\n    }\n\n    export function getEndsAtFromPosition(runtimeTicks, positionTicks, includeText) {\n        let endDate = new Date().getTime() + ((runtimeTicks - (positionTicks || 0)) / 10000);\n        endDate = new Date(endDate);\n\n        const displayTime = datetime.getDisplayTime(endDate);\n\n        if (includeText === false) {\n            return displayTime;\n        }\n        return globalize.translate('EndsAtValue', displayTime);\n    }\n\n    function getMediaInfoItem(m, cssClass) {\n        cssClass = cssClass ? (`${cssClass} mediaInfoItem`) : 'mediaInfoItem';\n        let mediaInfoText = m;\n\n        if (typeof (m) !== 'string' && typeof (m) !== 'number') {\n            if (m.html) {\n                return m.html;\n            }\n            mediaInfoText = m.text;\n            cssClass += ` ${m.cssClass}`;\n        }\n        return `<div class=\"${cssClass}\">${mediaInfoText}</div>`;\n    }\n\n    function getStarIconsHtml(item) {\n        let html = '';\n\n        if (item.CommunityRating) {\n            html += '<div class=\"starRatingContainer mediaInfoItem\">';\n\n            html += '<span class=\"material-icons starIcon star\"></span>';\n            html += item.CommunityRating.toFixed(1);\n            html += '</div>';\n        }\n\n        return html;\n    }\n\n    function dynamicEndTime(elem, item) {\n        const interval = setInterval(() => {\n            if (!document.body.contains(elem)) {\n                clearInterval(interval);\n                return;\n            }\n\n            elem.innerHTML = getEndsAt(item);\n        }, 60000);\n    }\n\n    export function fillPrimaryMediaInfo(elem, item, options) {\n        const html = getPrimaryMediaInfoHtml(item, options);\n\n        elem.innerHTML = html;\n        afterFill(elem, item, options);\n    }\n\n    export function fillSecondaryMediaInfo(elem, item, options) {\n        const html = getSecondaryMediaInfoHtml(item, options);\n\n        elem.innerHTML = html;\n        afterFill(elem, item, options);\n    }\n\n    function afterFill(elem, item, options) {\n        if (options.endsAt !== false) {\n            const endsAtElem = elem.querySelector('.endsAt');\n            if (endsAtElem) {\n                dynamicEndTime(endsAtElem, item);\n            }\n        }\n\n        const lnkChannel = elem.querySelector('.lnkChannel');\n        if (lnkChannel) {\n            lnkChannel.addEventListener('click', onChannelLinkClick);\n        }\n    }\n\n    function onChannelLinkClick(e) {\n        const channelId = this.getAttribute('data-id');\n        const serverId = this.getAttribute('data-serverid');\n\n        appRouter.showItem(channelId, serverId);\n\n        e.preventDefault();\n        return false;\n    }\n\n    export function getPrimaryMediaInfoHtml(item, options) {\n        options = options || {};\n        if (options.interactive == null) {\n            options.interactive = false;\n        }\n\n        return getMediaInfoHtml(item, options);\n    }\n\n    export function getSecondaryMediaInfoHtml(item, options) {\n        options = options || {};\n        if (options.interactive == null) {\n            options.interactive = false;\n        }\n        if (item.Type === 'Program') {\n            return getProgramInfoHtml(item, options);\n        }\n\n        return '';\n    }\n\n    export function getResolutionText(i) {\n        const width = i.Width;\n        const height = i.Height;\n\n        if (width && height) {\n            if (width >= 3800 || height >= 2000) {\n                return '4K';\n            }\n            if (width >= 2500 || height >= 1400) {\n                if (i.IsInterlaced) {\n                    return '1440i';\n                }\n                return '1440p';\n            }\n            if (width >= 1800 || height >= 1000) {\n                if (i.IsInterlaced) {\n                    return '1080i';\n                }\n                return '1080p';\n            }\n            if (width >= 1200 || height >= 700) {\n                if (i.IsInterlaced) {\n                    return '720i';\n                }\n                return '720p';\n            }\n            if (width >= 700 || height >= 400) {\n                if (i.IsInterlaced) {\n                    return '480i';\n                }\n                return '480p';\n            }\n        }\n        return null;\n    }\n\n    function getAudioStreamForDisplay(item) {\n        if (!item.MediaSources) {\n            return null;\n        }\n\n        const mediaSource = item.MediaSources[0];\n        if (!mediaSource) {\n            return null;\n        }\n\n        return (mediaSource.MediaStreams || []).filter(i => {\n            return i.Type === 'Audio' && (i.Index === mediaSource.DefaultAudioStreamIndex || mediaSource.DefaultAudioStreamIndex == null);\n        })[0];\n    }\n\n    export function getMediaInfoStats(item, options) {\n        options = options || {};\n\n        const list = [];\n\n        const mediaSource = (item.MediaSources || [])[0] || {};\n\n        const videoStream = (mediaSource.MediaStreams || []).filter(i => {\n            return i.Type === 'Video';\n        })[0] || {};\n        const audioStream = getAudioStreamForDisplay(item) || {};\n\n        if (item.VideoType === 'Dvd') {\n            list.push({\n                type: 'mediainfo',\n                text: 'Dvd'\n            });\n        }\n\n        if (item.VideoType === 'BluRay') {\n            list.push({\n                type: 'mediainfo',\n                text: 'BluRay'\n            });\n        }\n\n        const resolutionText = getResolutionText(videoStream);\n        if (resolutionText) {\n            list.push({\n                type: 'mediainfo',\n                text: resolutionText\n            });\n        }\n\n        if (videoStream.Codec) {\n            list.push({\n                type: 'mediainfo',\n                text: videoStream.Codec\n            });\n        }\n\n        const channels = audioStream.Channels;\n        let channelText;\n\n        if (channels === 8) {\n            channelText = '7.1';\n        } else if (channels === 7) {\n            channelText = '6.1';\n        } else if (channels === 6) {\n            channelText = '5.1';\n        } else if (channels === 2) {\n            channelText = '2.0';\n        }\n\n        if (channelText) {\n            list.push({\n                type: 'mediainfo',\n                text: channelText\n            });\n        }\n\n        const audioCodec = (audioStream.Codec || '').toLowerCase();\n\n        if ((audioCodec === 'dca' || audioCodec === 'dts') && audioStream.Profile) {\n            list.push({\n                type: 'mediainfo',\n                text: audioStream.Profile\n            });\n        } else if (audioStream.Codec) {\n            list.push({\n                type: 'mediainfo',\n                text: audioStream.Codec\n            });\n        }\n\n        if (item.DateCreated && itemHelper.enableDateAddedDisplay(item)) {\n            const dateCreated = datetime.parseISO8601Date(item.DateCreated);\n\n            list.push({\n                type: 'added',\n                text: globalize.translate('AddedOnValue', `${datetime.toLocaleDateString(dateCreated)} ${datetime.getDisplayTime(dateCreated)}`)\n            });\n        }\n\n        return list;\n    }\n\n/* eslint-enable indent */\n\nexport default {\n    getMediaInfoHtml: getPrimaryMediaInfoHtml,\n    getEndsAt: getEndsAt,\n    getEndsAtFromPosition: getEndsAtFromPosition,\n    getPrimaryMediaInfoHtml: getPrimaryMediaInfoHtml,\n    getSecondaryMediaInfoHtml: getSecondaryMediaInfoHtml,\n    fillPrimaryMediaInfo: fillPrimaryMediaInfo,\n    fillSecondaryMediaInfo: fillSecondaryMediaInfo,\n    getMediaInfoStats: getMediaInfoStats,\n    getResolutionText: getResolutionText\n};\n"]}