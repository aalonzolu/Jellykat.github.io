{"version":3,"sources":["components/subtitlesync/subtitlesync.js"],"names":["define","_exports","_playbackManager","_layoutManager","_subtitlesyncTemplate","_subtitlesync","_interopRequireDefault","obj","__esModule","default","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","player","subtitleSyncSlider","subtitleSyncTextField","subtitleSyncCloseButton","subtitleSyncContainer","init","instance","parent","document","createElement","body","appendChild","innerHTML","template","querySelector","layoutManager","tv","classList","add","setTimeout","enableKeyboardDragging","updateOffset","offset","this","textContent","addEventListener","hasFocus","event","inputOffset","exec","parseFloat","playbackManager","setSubtitleOffset","getPercentageFromOffset","value","percentValue","Math","min","max","toFixed","getPlayerSubtitleOffset","preventDefault","match","stopPropagation","blur","prototype","percent","undefined","getOffsetFromPercentage","getBubbleHtml","newOffset","disableShowingSubtitleOffset","SubtitleSync","toggle","element","currentPlayer","_classCallCheck","Constructor","TypeError","_createClass","protoProps","staticProps","destroy","elem","parentNode","removeChild","action","supportSubtitleOffset","isShowingSubtitleOffsetEnabled","canHandleOffsetOnCurrentSubtitle","remove","_default"],"mappings":"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","file":"subtitlesync.js","sourcesContent":["import playbackManager from 'playbackManager';\nimport layoutManager from 'layoutManager';\nimport template from 'text!./subtitlesync.template.html';\nimport 'css!./subtitlesync';\n\nlet player;\nlet subtitleSyncSlider;\nlet subtitleSyncTextField;\nlet subtitleSyncCloseButton;\nlet subtitleSyncContainer;\n\nfunction init(instance) {\n    const parent = document.createElement('div');\n    document.body.appendChild(parent);\n    parent.innerHTML = template;\n\n    subtitleSyncSlider = parent.querySelector('.subtitleSyncSlider');\n    subtitleSyncTextField = parent.querySelector('.subtitleSyncTextField');\n    subtitleSyncCloseButton = parent.querySelector('.subtitleSync-closeButton');\n    subtitleSyncContainer = parent.querySelector('.subtitleSyncContainer');\n\n    if (layoutManager.tv) {\n        subtitleSyncSlider.classList.add('focusable');\n        // HACK: Delay to give time for registered element attach (Firefox)\n        setTimeout(function () {\n            subtitleSyncSlider.enableKeyboardDragging();\n        }, 0);\n    }\n\n    subtitleSyncContainer.classList.add('hide');\n\n    subtitleSyncTextField.updateOffset = function (offset) {\n        this.textContent = offset + 's';\n    };\n\n    subtitleSyncTextField.addEventListener('click', function () {\n        // keep focus to prevent fade with osd\n        this.hasFocus = true;\n    });\n\n    subtitleSyncTextField.addEventListener('keydown', function (event) {\n        if (event.key === 'Enter') {\n            // if input key is enter search for float pattern\n            let inputOffset = /[-+]?\\d+\\.?\\d*/g.exec(this.textContent);\n            if (inputOffset) {\n                inputOffset = inputOffset[0];\n\n                // replace current text by considered offset\n                this.textContent = inputOffset + 's';\n\n                inputOffset = parseFloat(inputOffset);\n                // set new offset\n                playbackManager.setSubtitleOffset(inputOffset, player);\n                // synchronize with slider value\n                subtitleSyncSlider.updateOffset(\n                    getPercentageFromOffset(inputOffset));\n            } else {\n                this.textContent = (playbackManager.getPlayerSubtitleOffset(player) || 0) + 's';\n            }\n            this.hasFocus = false;\n            event.preventDefault();\n        } else {\n            // keep focus to prevent fade with osd\n            this.hasFocus = true;\n            if (event.key.match(/[+-\\d.s]/) === null) {\n                event.preventDefault();\n            }\n        }\n\n        // FIXME: TV layout will require special handling for navigation keys. But now field is not focusable\n        event.stopPropagation();\n    });\n\n    subtitleSyncTextField.blur = function () {\n        // prevent textfield to blur while element has focus\n        if (!this.hasFocus && this.prototype) {\n            this.prototype.blur();\n        }\n    };\n\n    subtitleSyncSlider.updateOffset = function (percent) {\n        // default value is 0s = 50%\n        this.value = percent === undefined ? 50 : percent;\n    };\n\n    subtitleSyncSlider.addEventListener('change', function () {\n        // set new offset\n        playbackManager.setSubtitleOffset(getOffsetFromPercentage(this.value), player);\n        // synchronize with textField value\n        subtitleSyncTextField.updateOffset(\n            getOffsetFromPercentage(this.value));\n    });\n\n    subtitleSyncSlider.getBubbleHtml = function (value) {\n        const newOffset = getOffsetFromPercentage(value);\n        return '<h1 class=\"sliderBubbleText\">' +\n            (newOffset > 0 ? '+' : '') + parseFloat(newOffset) + 's' +\n            '</h1>';\n    };\n\n    subtitleSyncCloseButton.addEventListener('click', function () {\n        playbackManager.disableShowingSubtitleOffset(player);\n        SubtitleSync.prototype.toggle('forceToHide');\n    });\n\n    instance.element = parent;\n}\n\nfunction getOffsetFromPercentage(value) {\n    // convert percent to fraction\n    let offset = (value - 50) / 50;\n    // multiply by offset min/max range value (-x to +x) :\n    offset *= 30;\n    return offset.toFixed(1);\n}\n\nfunction getPercentageFromOffset(value) {\n    // divide by offset min/max range value (-x to +x) :\n    let percentValue = value / 30;\n    // convert fraction to percent\n    percentValue *= 50;\n    percentValue += 50;\n    return Math.min(100, Math.max(0, percentValue.toFixed()));\n}\n\nclass SubtitleSync {\n    constructor(currentPlayer) {\n        player = currentPlayer;\n        init(this);\n    }\n\n    destroy() {\n        SubtitleSync.prototype.toggle('forceToHide');\n        if (player) {\n            playbackManager.disableShowingSubtitleOffset(player);\n            playbackManager.setSubtitleOffset(0, player);\n        }\n        const elem = this.element;\n        if (elem) {\n            elem.parentNode.removeChild(elem);\n            this.element = null;\n        }\n    }\n\n    toggle(action) {\n        if (player && playbackManager.supportSubtitleOffset(player)) {\n            /* eslint-disable no-fallthrough */\n            switch (action) {\n                case undefined:\n                    // if showing subtitle sync is enabled and if there is an external subtitle stream enabled\n                    if (playbackManager.isShowingSubtitleOffsetEnabled(player) && playbackManager.canHandleOffsetOnCurrentSubtitle(player)) {\n                        // if no subtitle offset is defined or element has focus (offset being defined)\n                        if (!(playbackManager.getPlayerSubtitleOffset(player) || subtitleSyncTextField.hasFocus)) {\n                            // set default offset to '0' = 50%\n                            subtitleSyncSlider.value = '50';\n                            subtitleSyncTextField.textContent = '0s';\n                            playbackManager.setSubtitleOffset(0, player);\n                        }\n                        // show subtitle sync\n                        subtitleSyncContainer.classList.remove('hide');\n                        break; // stop here\n                    } // else continue and hide\n                case 'hide':\n                    // only break if element has focus\n                    if (subtitleSyncTextField.hasFocus) {\n                        break;\n                    }\n                case 'forceToHide':\n                    subtitleSyncContainer.classList.add('hide');\n                    break;\n            }\n            /* eslint-enable no-fallthrough */\n        }\n    }\n}\n\nexport default SubtitleSync;\n"]}