{"version":3,"sources":["components/directorybrowser/directorybrowser.js"],"names":["define","_require","_exports","_loading","_dialogHelper","_dom","_globalize","_listViewStyle","_embyInput","_paperIconButtonLight","_directorybrowser","_formDialogStyle","_embyButton","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","onDialogClosed","loading","hide","refreshDirectoryBrowser","page","path","fileOptions","updatePathOnError","Error","show","promises","push","ApiClient","getNetworkDevices","getDirectoryContents","getParentPath","getDrives","Promise","all","then","responses","folders","parentPath","html","querySelector","scrollTop","value","getItem","i","length","folder","Type","Path","Name","globalize","translate","innerHTML","cssClass","type","name","concat","alertText","text","alertTextWithOptions","options","_resolve","_reject","imported","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","_ref","alert","initEditor","content","addEventListener","e","lnkPath","dom","parentWithClass","target","getAttribute","classList","contains","txtDirectoryPickerPath","parentWithTag","id","callback","networkSharePath","this","validatePath","validateWriteable","apiClient","ajax","url","getUrl","data","JSON","stringify","ValidateWriteable","catch","response","status","reject","resolve","preventDefault","stopPropagation","getDefaultPath","getJSON","result","systemInfo","_default","directoryBrowser","currentDialog","_classCallCheck","instance","Constructor","TypeError","includeDirectories","includeFiles","getPublicSystemInfo","info","initialPath","dlg","dialogHelper","createDialog","size","removeOnClose","scrollY","add","header","getEditorHtml","labelKey","pathReadOnly","instruction","OperatingSystem","toLowerCase","readOnlyAttribute","enableNetworkSharePath","open","close","txtNetworkPath"],"mappings":"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","file":"directorybrowser.js","sourcesContent":["import loading from 'loading';\nimport dialogHelper from 'dialogHelper';\nimport dom from 'dom';\nimport globalize from 'globalize';\nimport 'listViewStyle';\nimport 'emby-input';\nimport 'paper-icon-button-light';\nimport 'css!./directorybrowser';\nimport 'formDialogStyle';\nimport 'emby-button';\n\n/* eslint-disable indent */\n\n    function getSystemInfo() {\n        return systemInfo ? Promise.resolve(systemInfo) : ApiClient.getPublicSystemInfo().then(\n            info => {\n                systemInfo = info;\n                return info;\n            }\n        );\n    }\n\n    function onDialogClosed() {\n        loading.hide();\n    }\n\n    function refreshDirectoryBrowser(page, path, fileOptions, updatePathOnError) {\n        if (path && typeof path !== 'string') {\n            throw new Error('invalid path');\n        }\n\n        loading.show();\n\n        const promises = [];\n\n        if (path === 'Network') {\n            promises.push(ApiClient.getNetworkDevices());\n        } else {\n            if (path) {\n                promises.push(ApiClient.getDirectoryContents(path, fileOptions));\n                promises.push(ApiClient.getParentPath(path));\n            } else {\n                promises.push(ApiClient.getDrives());\n            }\n        }\n\n        Promise.all(promises).then(\n            responses => {\n                const folders = responses[0];\n                const parentPath = responses[1] || '';\n                let html = '';\n\n                page.querySelector('.results').scrollTop = 0;\n                page.querySelector('#txtDirectoryPickerPath').value = path || '';\n\n                if (path) {\n                    html += getItem('lnkPath lnkDirectory', '', parentPath, '...');\n                }\n                for (let i = 0, length = folders.length; i < length; i++) {\n                    const folder = folders[i];\n                    const cssClass = folder.Type === 'File' ? 'lnkPath lnkFile' : 'lnkPath lnkDirectory';\n                    html += getItem(cssClass, folder.Type, folder.Path, folder.Name);\n                }\n\n                if (!path) {\n                    html += getItem('lnkPath lnkDirectory', '', 'Network', globalize.translate('ButtonNetwork'));\n                }\n\n                page.querySelector('.results').innerHTML = html;\n                loading.hide();\n            }, () => {\n                if (updatePathOnError) {\n                    page.querySelector('#txtDirectoryPickerPath').value = '';\n                    page.querySelector('.results').innerHTML = '';\n                    loading.hide();\n                }\n            }\n        );\n    }\n\n    function getItem(cssClass, type, path, name) {\n        let html = '';\n        html += `<div class=\"listItem listItem-border ${cssClass}\" data-type=\"${type}\" data-path=\"${path}\">`;\n        html += '<div class=\"listItemBody\" style=\"padding-left:0;padding-top:.5em;padding-bottom:.5em;\">';\n        html += '<div class=\"listItemBodyText\">';\n        html += name;\n        html += '</div>';\n        html += '</div>';\n        html += '<span class=\"material-icons arrow_forward\" style=\"font-size:inherit;\"></span>';\n        html += '</div>';\n        return html;\n    }\n\n    function getEditorHtml(options, systemInfo) {\n        let html = '';\n        html += '<div class=\"formDialogContent scrollY\">';\n        html += '<div class=\"dialogContentInner dialog-content-centered\" style=\"padding-top:2em;\">';\n        if (!options.pathReadOnly) {\n            const instruction = options.instruction ? `${options.instruction}<br/><br/>` : '';\n            html += '<div class=\"infoBanner\" style=\"margin-bottom:1.5em;\">';\n            html += instruction;\n            if (systemInfo.OperatingSystem.toLowerCase() === 'bsd') {\n                html += '<br/>';\n                html += '<br/>';\n                html += globalize.translate('MessageDirectoryPickerBSDInstruction');\n                html += '<br/>';\n            } else if (systemInfo.OperatingSystem.toLowerCase() === 'linux') {\n                html += '<br/>';\n                html += '<br/>';\n                html += globalize.translate('MessageDirectoryPickerLinuxInstruction');\n                html += '<br/>';\n            }\n            html += '</div>';\n        }\n        html += '<form style=\"margin:auto;\">';\n        html += '<div class=\"inputContainer\" style=\"display: flex; align-items: center;\">';\n        html += '<div style=\"flex-grow:1;\">';\n        let labelKey;\n        if (options.includeFiles !== true) {\n            labelKey = 'LabelFolder';\n        } else {\n            labelKey = 'LabelPath';\n        }\n        const readOnlyAttribute = options.pathReadOnly ? ' readonly' : '';\n        html += `<input is=\"emby-input\" id=\"txtDirectoryPickerPath\" type=\"text\" required=\"required\" ${readOnlyAttribute} label=\"${globalize.translate(labelKey)}\"/>`;\n        html += '</div>';\n        if (!readOnlyAttribute) {\n            html += `<button type=\"button\" is=\"paper-icon-button-light\" class=\"btnRefreshDirectories emby-input-iconbutton\" title=\"${globalize.translate('Refresh')}\"><span class=\"material-icons search\"></span></button>`;\n        }\n        html += '</div>';\n        if (!readOnlyAttribute) {\n            html += '<div class=\"results paperList\" style=\"max-height: 200px; overflow-y: auto;\"></div>';\n        }\n        if (options.enableNetworkSharePath) {\n            html += '<div class=\"inputContainer\" style=\"margin-top:2em;\">';\n            html += `<input is=\"emby-input\" id=\"txtNetworkPath\" type=\"text\" label=\"${globalize.translate('LabelOptionalNetworkPath')}\"/>`;\n            html += '<div class=\"fieldDescription\">';\n            html += globalize.translate('LabelOptionalNetworkPathHelp', '<b>\\\\\\\\server</b>', '<b>\\\\\\\\192.168.1.101</b>');\n            html += '</div>';\n            html += '</div>';\n        }\n        html += '<div class=\"formDialogFooter\">';\n        html += `<button is=\"emby-button\" type=\"submit\" class=\"raised button-submit block formDialogFooterItem\">${globalize.translate('ButtonOk')}</button>`;\n        html += '</div>';\n        html += '</form>';\n        html += '</div>';\n        html += '</div>';\n        html += '</div>';\n\n        return html;\n    }\n\n    function alertText(text) {\n        alertTextWithOptions({\n            text: text\n        });\n    }\n\n    function alertTextWithOptions(options) {\n        import('alert').then(({default: alert}) => {\n            alert(options);\n        });\n    }\n\n    function validatePath(path, validateWriteable, apiClient) {\n        return apiClient.ajax({\n            type: 'POST',\n            url: apiClient.getUrl('Environment/ValidatePath'),\n            data: JSON.stringify({\n                ValidateWriteable: validateWriteable,\n                Path: path\n            })\n        }).catch(response => {\n            if (response) {\n                if (response.status === 404) {\n                    alertText(globalize.translate('PathNotFound'));\n                    return Promise.reject();\n                }\n                if (response.status === 500) {\n                    if (validateWriteable) {\n                        alertText(globalize.translate('WriteAccessRequired'));\n                    } else {\n                        alertText(globalize.translate('PathNotFound'));\n                    }\n                    return Promise.reject();\n                }\n            }\n            return Promise.resolve();\n        });\n    }\n\n    function initEditor(content, options, fileOptions) {\n        content.addEventListener('click', e => {\n            const lnkPath = dom.parentWithClass(e.target, 'lnkPath');\n            if (lnkPath) {\n                const path = lnkPath.getAttribute('data-path');\n                if (lnkPath.classList.contains('lnkFile')) {\n                    content.querySelector('#txtDirectoryPickerPath').value = path;\n                } else {\n                    refreshDirectoryBrowser(content, path, fileOptions, true);\n                }\n            }\n        });\n\n        content.addEventListener('click', e => {\n            if (dom.parentWithClass(e.target, 'btnRefreshDirectories')) {\n                const path = content.querySelector('#txtDirectoryPickerPath').value;\n                refreshDirectoryBrowser(content, path, fileOptions);\n            }\n        });\n\n        content.addEventListener('change', e => {\n            const txtDirectoryPickerPath = dom.parentWithTag(e.target, 'INPUT');\n            if (txtDirectoryPickerPath && txtDirectoryPickerPath.id === 'txtDirectoryPickerPath') {\n                refreshDirectoryBrowser(content, txtDirectoryPickerPath.value, fileOptions);\n            }\n        });\n\n        content.querySelector('form').addEventListener('submit', function(e) {\n            if (options.callback) {\n                let networkSharePath = this.querySelector('#txtNetworkPath');\n                networkSharePath = networkSharePath ? networkSharePath.value : null;\n                const path = this.querySelector('#txtDirectoryPickerPath').value;\n                validatePath(path, options.validateWriteable, ApiClient).then(options.callback(path, networkSharePath));\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n        });\n    }\n\n    function getDefaultPath(options) {\n        if (options.path) {\n            return Promise.resolve(options.path);\n        } else {\n            return ApiClient.getJSON(ApiClient.getUrl('Environment/DefaultDirectoryBrowser')).then(\n                result => {\n                    return result.Path || '';\n                }, () => {\n                    return '';\n                }\n            );\n        }\n    }\n\n    class directoryBrowser {\n        constructor() {\n            let currentDialog;\n            this.show = options => {\n                options = options || {};\n                const fileOptions = {\n                    includeDirectories: true\n                };\n                if (options.includeDirectories != null) {\n                    fileOptions.includeDirectories = options.includeDirectories;\n                }\n                if (options.includeFiles != null) {\n                    fileOptions.includeFiles = options.includeFiles;\n                }\n                Promise.all([getSystemInfo(), getDefaultPath(options)]).then(\n                    responses => {\n                        const systemInfo = responses[0];\n                        const initialPath = responses[1];\n                        const dlg = dialogHelper.createDialog({\n                            size: 'small',\n                            removeOnClose: true,\n                            scrollY: false\n                        });\n                        dlg.classList.add('ui-body-a');\n                        dlg.classList.add('background-theme-a');\n                        dlg.classList.add('directoryPicker');\n                        dlg.classList.add('formDialog');\n\n                        let html = '';\n                        html += '<div class=\"formDialogHeader\">';\n                        html += '<button is=\"paper-icon-button-light\" class=\"btnCloseDialog autoSize\" tabindex=\"-1\"><span class=\"material-icons arrow_back\"></span></button>';\n                        html += '<h3 class=\"formDialogHeaderTitle\">';\n                        html += options.header || globalize.translate('HeaderSelectPath');\n                        html += '</h3>';\n                        html += '</div>';\n                        html += getEditorHtml(options, systemInfo);\n                        dlg.innerHTML = html;\n                        initEditor(dlg, options, fileOptions);\n                        dlg.addEventListener('close', onDialogClosed);\n                        dialogHelper.open(dlg);\n                        dlg.querySelector('.btnCloseDialog').addEventListener('click', () => {\n                            dialogHelper.close(dlg);\n                        });\n                        currentDialog = dlg;\n                        dlg.querySelector('#txtDirectoryPickerPath').value = initialPath;\n                        const txtNetworkPath = dlg.querySelector('#txtNetworkPath');\n                        if (txtNetworkPath) {\n                            txtNetworkPath.value = options.networkSharePath || '';\n                        }\n                        if (!options.pathReadOnly) {\n                            refreshDirectoryBrowser(dlg, initialPath, fileOptions, true);\n                        }\n                    }\n                );\n            };\n            this.close = () => {\n                if (currentDialog) {\n                    dialogHelper.close(currentDialog);\n                }\n            };\n        }\n    }\n\n    let systemInfo;\n\n/* eslint-enable indent */\nexport default directoryBrowser;\n"]}