{"version":3,"sources":["components/slideshow/slideshow.js"],"names":["define","_require","_exports","_dialogHelper","_inputManager","_connectionManager","_layoutManager","_focusManager","_browser","_apphost","_dom","_style","_materialIcons","_paperIconButtonLight","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","value","_default","options","swiperInstance","dialog","currentOptions","hideTimeout","lastMouseMoveData","createElements","dialogHelper","createDialog","exitAnimationDuration","interactive","size","autoFocus","scrollY","exitAnimation","removeOnClose","classList","add","html","layoutManager","tv","actionButtonsOnTop","mobile","getIcon","appHost","supports","user","Policy","EnableContentDownloading","innerHTML","querySelector","addEventListener","e","close","btnPause","playPause","btnDownload","download","btnShare","share","setUserScalable","open","then","inputManager","on","window","onInputCommand","document","PointerEvent","onPointerMove","onDialogClosed","loadSwiper","slides","items","Promise","_resolve","_reject","imported","_ref","Swiper","direction","loop","zoom","minRatio","toggle","autoplay","keyboard","enabled","preloadImages","slidesPerView","slidesPerColumn","initialSlide","startIndex","speed","navigation","nextEl","prevEl","virtual","renderSlide","getSwiperSlideHtml","addSlidesBefore","addSlidesAfter","onAutoplayStart","onAutoplayStop","useFakeZoomImage","onZoomChange","btnSlideshowPause","replace","swiper","scale","imageEl","slideEl","zoomImage","style","width","height","contains","setTimeout","callback","removeEventListener","transitionEndEventName","remove","parseFloat","transitionDuration","item","index","getSwiperSlideHtmlFromSlide","getSwiperSlideHtmlFromItem","originalImage","getImgUrl","Id","ServerId","concat","title","subtitle","description","getCurrentImageInfo","slide","url","getAttribute","shareUrl","itemId","serverId","imageInfo","_ref2","navigator","play","start","pause","stop","destroy","off","body","showOsd","bottom","slideUpToShow","element","onFinish","focusManager","focus","animate","requestAnimationFrame","keyframes","transform","offsetHeight","opacity","offset","duration","iterations","easing","onfinish","startHideTimer","stopHideTimer","clearTimeout","hideOsd","slideDownToHide","event","pointerType","eventX","screenX","eventY","screenY","x","y","Math","abs","detail","command","this","show","hide","dom","whichTransitionEvent","browser","safari","apiClient","connectionManager","getApiClient","imageOptions","BackdropImageTags","length","getBackdropImageUrl","type","maxWidth","maxHeight","quality","tag","getScaledImageUrl","MediaType","getItemDownloadUrl","getImageUrl","ImageTags","AlbumId","AlbumPrimaryImageTag","icon","cssClass","canFocus","scalable","err","console","error"],"mappings":"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","file":"slideshow.js","sourcesContent":["/**\n * Image viewer component\n * @module components/slideshow/slideshow\n */\nimport dialogHelper from 'dialogHelper';\nimport inputManager from 'inputManager';\nimport connectionManager from 'connectionManager';\nimport layoutManager from 'layoutManager';\nimport focusManager from 'focusManager';\nimport browser from 'browser';\nimport appHost from 'apphost';\nimport dom from 'dom';\nimport 'css!./style';\nimport 'material-icons';\nimport 'paper-icon-button-light';\n\n/**\n * Name of transition event.\n */\nconst transitionEndEventName = dom.whichTransitionEvent();\n\n/**\n * Flag to use fake image to fix blurry zoomed image.\n * At least WebKit doesn't restore quality for zoomed images.\n */\nconst useFakeZoomImage = browser.safari;\n\n/**\n * Retrieves an item's image URL from the API.\n * @param {object|string} item - Item used to generate the image URL.\n * @param {object} options - Options of the image.\n * @param {object} apiClient - API client instance used to retrieve the image.\n * @returns {null|string} URL of the item's image.\n */\nfunction getImageUrl(item, options, apiClient) {\n    options = options || {};\n    options.type = options.type || 'Primary';\n\n    if (typeof (item) === 'string') {\n        return apiClient.getScaledImageUrl(item, options);\n    }\n\n    if (item.ImageTags && item.ImageTags[options.type]) {\n        options.tag = item.ImageTags[options.type];\n        return apiClient.getScaledImageUrl(item.Id, options);\n    }\n\n    if (options.type === 'Primary') {\n        if (item.AlbumId && item.AlbumPrimaryImageTag) {\n            options.tag = item.AlbumPrimaryImageTag;\n            return apiClient.getScaledImageUrl(item.AlbumId, options);\n        }\n    }\n\n    return null;\n}\n\n/**\n * Retrieves a backdrop's image URL from the API.\n * @param {object} item - Item used to generate the image URL.\n * @param {object} options - Options of the image.\n * @param {object} apiClient - API client instance used to retrieve the image.\n * @returns {null|string} URL of the item's backdrop.\n */\nfunction getBackdropImageUrl(item, options, apiClient) {\n    options = options || {};\n    options.type = options.type || 'Backdrop';\n\n    // If not resizing, get the original image\n    if (!options.maxWidth && !options.width && !options.maxHeight && !options.height) {\n        options.quality = 100;\n    }\n\n    if (item.BackdropImageTags && item.BackdropImageTags.length) {\n        options.tag = item.BackdropImageTags[0];\n        return apiClient.getScaledImageUrl(item.Id, options);\n    }\n\n    return null;\n}\n\n/**\n * Dispatches a request for an item's image to its respective handler.\n * @param {object} item - Item used to generate the image URL.\n * @returns {string} URL of the item's image.\n */\nfunction getImgUrl(item, user) {\n    const apiClient = connectionManager.getApiClient(item.ServerId);\n    const imageOptions = {};\n\n    if (item.BackdropImageTags && item.BackdropImageTags.length) {\n        return getBackdropImageUrl(item, imageOptions, apiClient);\n    } else {\n        if (item.MediaType === 'Photo' && user && user.Policy.EnableContentDownloading) {\n            return apiClient.getItemDownloadUrl(item.Id);\n        }\n        imageOptions.type = 'Primary';\n        return getImageUrl(item, imageOptions, apiClient);\n    }\n}\n\n/**\n * Generates a button using the specified icon, classes and properties.\n * @param {string} icon - Name of the material icon on the button\n * @param {string} cssClass - CSS classes to assign to the button\n * @param {boolean} canFocus - Flag to set the tabindex attribute on the button to -1.\n * @param {boolean} autoFocus - Flag to set the autofocus attribute on the button.\n * @returns {string} The HTML markup of the button.\n */\nfunction getIcon(icon, cssClass, canFocus, autoFocus) {\n    const tabIndex = canFocus ? '' : ' tabindex=\"-1\"';\n    autoFocus = autoFocus ? ' autofocus' : '';\n    return '<button is=\"paper-icon-button-light\" class=\"autoSize ' + cssClass + '\"' + tabIndex + autoFocus + '><span class=\"material-icons slideshowButtonIcon ' + icon + '\"></span></button>';\n}\n\n/**\n * Sets the viewport meta tag to enable or disable scaling by the user.\n * @param {boolean} scalable - Flag to set the scalability of the viewport.\n */\nfunction setUserScalable(scalable) {\n    try {\n        appHost.setUserScalable(scalable);\n    } catch (err) {\n        console.error('error in appHost.setUserScalable: ' + err);\n    }\n}\n\nexport default function (options) {\n    const self = this;\n    /** Initialized instance of Swiper. */\n    let swiperInstance;\n    /** Initialized instance of the dialog containing the Swiper instance. */\n    let dialog;\n    /** Options of the slideshow components */\n    let currentOptions;\n    /** ID of the timeout used to hide the OSD. */\n    let hideTimeout;\n    /** Last coordinates of the mouse pointer. */\n    let lastMouseMoveData;\n\n    /**\n     * Creates the HTML markup for the dialog and the OSD.\n     * @param {Object} options - Options used to create the dialog and slideshow.\n     */\n    function createElements(options) {\n        currentOptions = options;\n\n        dialog = dialogHelper.createDialog({\n            exitAnimationDuration: options.interactive ? 400 : 800,\n            size: 'fullscreen',\n            autoFocus: false,\n            scrollY: false,\n            exitAnimation: 'fadeout',\n            removeOnClose: true\n        });\n\n        dialog.classList.add('slideshowDialog');\n\n        let html = '';\n\n        html += '<div class=\"slideshowSwiperContainer\"><div class=\"swiper-wrapper\"></div></div>';\n\n        if (options.interactive && !layoutManager.tv) {\n            const actionButtonsOnTop = layoutManager.mobile;\n\n            html += getIcon('keyboard_arrow_left', 'btnSlideshowPrevious slideshowButton hide-mouse-idle-tv', false);\n            html += getIcon('keyboard_arrow_right', 'btnSlideshowNext slideshowButton hide-mouse-idle-tv', false);\n\n            html += '<div class=\"topActionButtons\">';\n            if (actionButtonsOnTop) {\n                if (appHost.supports('filedownload') && options.user && options.user.Policy.EnableContentDownloading) {\n                    html += getIcon('file_download', 'btnDownload slideshowButton', true);\n                }\n                if (appHost.supports('sharing')) {\n                    html += getIcon('share', 'btnShare slideshowButton', true);\n                }\n            }\n            html += getIcon('close', 'slideshowButton btnSlideshowExit hide-mouse-idle-tv', false);\n            html += '</div>';\n\n            if (!actionButtonsOnTop) {\n                html += '<div class=\"slideshowBottomBar hide\">';\n\n                html += getIcon('play_arrow', 'btnSlideshowPause slideshowButton', true, true);\n                if (appHost.supports('filedownload') && options.user && options.user.Policy.EnableContentDownloading) {\n                    html += getIcon('file_download', 'btnDownload slideshowButton', true);\n                }\n                if (appHost.supports('sharing')) {\n                    html += getIcon('share', 'btnShare slideshowButton', true);\n                }\n\n                html += '</div>';\n            }\n        } else {\n            html += '<div class=\"slideshowImage\"></div><h1 class=\"slideshowImageText\"></h1>';\n        }\n\n        dialog.innerHTML = html;\n\n        if (options.interactive && !layoutManager.tv) {\n            dialog.querySelector('.btnSlideshowExit').addEventListener('click', function (e) {\n                dialogHelper.close(dialog);\n            });\n\n            const btnPause = dialog.querySelector('.btnSlideshowPause');\n            if (btnPause) {\n                btnPause.addEventListener('click', playPause);\n            }\n\n            const btnDownload = dialog.querySelector('.btnDownload');\n            if (btnDownload) {\n                btnDownload.addEventListener('click', download);\n            }\n\n            const btnShare = dialog.querySelector('.btnShare');\n            if (btnShare) {\n                btnShare.addEventListener('click', share);\n            }\n        }\n\n        setUserScalable(true);\n\n        dialogHelper.open(dialog).then(function () {\n            setUserScalable(false);\n        });\n\n        inputManager.on(window, onInputCommand);\n        /* eslint-disable-next-line compat/compat */\n        document.addEventListener((window.PointerEvent ? 'pointermove' : 'mousemove'), onPointerMove);\n\n        dialog.addEventListener('close', onDialogClosed);\n\n        loadSwiper(dialog, options);\n    }\n\n    /**\n     * Handles OSD changes when the autoplay is started.\n     */\n    function onAutoplayStart() {\n        const btnSlideshowPause = dialog.querySelector('.btnSlideshowPause .material-icons');\n        if (btnSlideshowPause) {\n            btnSlideshowPause.classList.replace('play_arrow', 'pause');\n        }\n    }\n\n    /**\n     * Handles OSD changes when the autoplay is stopped.\n     */\n    function onAutoplayStop() {\n        const btnSlideshowPause = dialog.querySelector('.btnSlideshowPause .material-icons');\n        if (btnSlideshowPause) {\n            btnSlideshowPause.classList.replace('pause', 'play_arrow');\n        }\n    }\n\n    /**\n     * Handles zoom changes.\n     */\n    function onZoomChange(swiper, scale, imageEl, slideEl) {\n        const zoomImage = slideEl.querySelector('.swiper-zoom-fakeimg');\n\n        if (zoomImage) {\n            zoomImage.style.width = zoomImage.style.height = scale * 100 + '%';\n\n            if (scale > 1) {\n                if (zoomImage.classList.contains('swiper-zoom-fakeimg-hidden')) {\n                    // Await for Swiper style changes\n                    setTimeout(() => {\n                        const callback = () => {\n                            imageEl.removeEventListener(transitionEndEventName, callback);\n                            zoomImage.classList.remove('swiper-zoom-fakeimg-hidden');\n                        };\n\n                        // Swiper set 'transition-duration: 300ms' for auto zoom\n                        // and 'transition-duration: 0s' for touch zoom\n                        const transitionDuration = parseFloat(imageEl.style.transitionDuration.replace(/[a-z]/i, ''));\n\n                        if (transitionDuration > 0) {\n                            imageEl.addEventListener(transitionEndEventName, callback);\n                        } else {\n                            callback();\n                        }\n                    }, 0);\n                }\n            } else {\n                zoomImage.classList.add('swiper-zoom-fakeimg-hidden');\n            }\n        }\n    }\n\n    /**\n     * Initializes the Swiper instance and binds the relevant events.\n     * @param {HTMLElement} dialog - Element containing the dialog.\n     * @param {Object} options - Options used to initialize the Swiper instance.\n     */\n    function loadSwiper(dialog, options) {\n        let slides;\n        if (currentOptions.slides) {\n            slides = currentOptions.slides;\n        } else {\n            slides = currentOptions.items;\n        }\n\n        import('swiper').then(({default: Swiper}) => {\n            swiperInstance = new Swiper(dialog.querySelector('.slideshowSwiperContainer'), {\n                direction: 'horizontal',\n                // Loop is disabled due to the virtual slides option not supporting it.\n                loop: false,\n                zoom: {\n                    minRatio: 1,\n                    toggle: true\n                },\n                autoplay: !options.interactive,\n                keyboard: {\n                    enabled: true\n                },\n                preloadImages: true,\n                slidesPerView: 1,\n                slidesPerColumn: 1,\n                initialSlide: options.startIndex || 0,\n                speed: 240,\n                navigation: {\n                    nextEl: '.btnSlideshowNext',\n                    prevEl: '.btnSlideshowPrevious'\n                },\n                // Virtual slides reduce memory consumption for large libraries while allowing preloading of images;\n                virtual: {\n                    slides: slides,\n                    cache: true,\n                    renderSlide: getSwiperSlideHtml,\n                    addSlidesBefore: 1,\n                    addSlidesAfter: 1\n                }\n            });\n\n            swiperInstance.on('autoplayStart', onAutoplayStart);\n            swiperInstance.on('autoplayStop', onAutoplayStop);\n\n            if (useFakeZoomImage) {\n                swiperInstance.on('zoomChange', onZoomChange);\n            }\n        });\n    }\n\n    /**\n     * Renders the HTML markup of a slide for an item or a slide.\n     * @param {Object} item - The item used to render the slide.\n     * @param {number} index - The index of the item in the Swiper instance.\n     * @returns {string} The HTML markup of the slide.\n     */\n    function getSwiperSlideHtml(item, index) {\n        if (currentOptions.slides) {\n            return getSwiperSlideHtmlFromSlide(item);\n        } else {\n            return getSwiperSlideHtmlFromItem(item);\n        }\n    }\n\n    /**\n     * Renders the HTML markup of a slide for an item.\n     * @param {Object} item - Item used to generate the slide.\n     * @returns {string} The HTML markup of the slide.\n     */\n    function getSwiperSlideHtmlFromItem(item) {\n        return getSwiperSlideHtmlFromSlide({\n            originalImage: getImgUrl(item, currentOptions.user),\n            Id: item.Id,\n            ServerId: item.ServerId\n        });\n    }\n\n    /**\n     * Renders the HTML markup of a slide for a slide object.\n     * @param {Object} item - Slide object used to generate the slide.\n     * @returns {string} The HTML markup of the slide.\n     */\n    function getSwiperSlideHtmlFromSlide(item) {\n        let html = '';\n        html += '<div class=\"swiper-slide\" data-original=\"' + item.originalImage + '\" data-itemid=\"' + item.Id + '\" data-serverid=\"' + item.ServerId + '\">';\n        html += '<div class=\"swiper-zoom-container\">';\n        if (useFakeZoomImage) {\n            html += `<div class=\"swiper-zoom-fakeimg swiper-zoom-fakeimg-hidden\" style=\"background-image: url('${item.originalImage}')\"></div>`;\n        }\n        html += '<img src=\"' + item.originalImage + '\" class=\"swiper-slide-img\">';\n        html += '</div>';\n        if (item.title || item.subtitle) {\n            html += '<div class=\"slideText\">';\n            html += '<div class=\"slideTextInner\">';\n            if (item.title) {\n                html += '<h1 class=\"slideTitle\">';\n                html += item.title;\n                html += '</h1>';\n            }\n            if (item.description) {\n                html += '<div class=\"slideSubtitle\">';\n                html += item.description;\n                html += '</div>';\n            }\n            html += '</div>';\n            html += '</div>';\n        }\n        html += '</div>';\n\n        return html;\n    }\n\n    /**\n     * Fetches the information of the currently displayed slide.\n     * @returns {null|{itemId: string, shareUrl: string, serverId: string, url: string}} Object containing the information of the currently displayed slide.\n     */\n    function getCurrentImageInfo() {\n        if (swiperInstance) {\n            const slide = document.querySelector('.swiper-slide-active');\n\n            if (slide) {\n                return {\n                    url: slide.getAttribute('data-original'),\n                    shareUrl: slide.getAttribute('data-original'),\n                    itemId: slide.getAttribute('data-itemid'),\n                    serverId: slide.getAttribute('data-serverid')\n                };\n            }\n            return null;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Starts a download for the currently displayed slide.\n     */\n    function download() {\n        const imageInfo = getCurrentImageInfo();\n\n        import('fileDownloader').then(({default: fileDownloader}) => {\n            fileDownloader.download([imageInfo]);\n        });\n    }\n\n    /**\n     * Shares the currently displayed slide using the browser's built-in sharing feature.\n     */\n    function share() {\n        const imageInfo = getCurrentImageInfo();\n\n        navigator.share({\n            url: imageInfo.shareUrl\n        });\n    }\n\n    /**\n     * Starts the autoplay feature of the Swiper instance.\n     */\n    function play() {\n        if (swiperInstance.autoplay) {\n            swiperInstance.autoplay.start();\n        }\n    }\n\n    /**\n     * Pauses the autoplay feature of the Swiper instance;\n     */\n    function pause() {\n        if (swiperInstance.autoplay) {\n            swiperInstance.autoplay.stop();\n        }\n    }\n\n    /**\n     * Toggles the autoplay feature of the Swiper instance.\n     */\n    function playPause() {\n        const paused = !dialog.querySelector('.btnSlideshowPause .material-icons').classList.contains('pause');\n        if (paused) {\n            play();\n        } else {\n            pause();\n        }\n    }\n\n    /**\n     * Closes the dialog and destroys the Swiper instance.\n     */\n    function onDialogClosed() {\n        const swiper = swiperInstance;\n        if (swiper) {\n            swiper.destroy(true, true);\n            swiperInstance = null;\n        }\n\n        inputManager.off(window, onInputCommand);\n        /* eslint-disable-next-line compat/compat */\n        document.removeEventListener((window.PointerEvent ? 'pointermove' : 'mousemove'), onPointerMove);\n        // Shows page scrollbar\n        document.body.classList.remove('hide-scroll');\n        document.body.classList.add('force-scroll');\n    }\n\n    /**\n     * Shows the OSD.\n     */\n    function showOsd() {\n        const bottom = dialog.querySelector('.slideshowBottomBar');\n        if (bottom) {\n            slideUpToShow(bottom);\n            startHideTimer();\n        }\n    }\n\n    /**\n     * Hides the OSD.\n     */\n    function hideOsd() {\n        const bottom = dialog.querySelector('.slideshowBottomBar');\n        if (bottom) {\n            slideDownToHide(bottom);\n        }\n    }\n\n    /**\n     * Starts the timer used to automatically hide the OSD.\n     */\n    function startHideTimer() {\n        stopHideTimer();\n        hideTimeout = setTimeout(hideOsd, 3000);\n    }\n\n    /**\n     * Stops the timer used to automatically hide the OSD.\n     */\n    function stopHideTimer() {\n        if (hideTimeout) {\n            clearTimeout(hideTimeout);\n            hideTimeout = null;\n        }\n    }\n\n    /**\n     * Shows the OSD by sliding it into view.\n     * @param {HTMLElement} element - Element containing the OSD.\n     */\n    function slideUpToShow(element) {\n        if (!element.classList.contains('hide')) {\n            return;\n        }\n\n        element.classList.remove('hide');\n\n        const onFinish = function () {\n            focusManager.focus(element.querySelector('.btnSlideshowPause'));\n        };\n\n        if (!element.animate) {\n            onFinish();\n            return;\n        }\n\n        requestAnimationFrame(function () {\n            const keyframes = [\n                { transform: 'translate3d(0,' + element.offsetHeight + 'px,0)', opacity: '.3', offset: 0 },\n                { transform: 'translate3d(0,0,0)', opacity: '1', offset: 1 }\n            ];\n            const timing = { duration: 300, iterations: 1, easing: 'ease-out' };\n            element.animate(keyframes, timing).onfinish = onFinish;\n        });\n    }\n\n    /**\n     * Hides the OSD by sliding it out of view.\n     * @param {HTMLElement} element - Element containing the OSD.\n     */\n    function slideDownToHide(element) {\n        if (element.classList.contains('hide')) {\n            return;\n        }\n\n        const onFinish = function () {\n            element.classList.add('hide');\n        };\n\n        if (!element.animate) {\n            onFinish();\n            return;\n        }\n\n        requestAnimationFrame(function () {\n            const keyframes = [\n                { transform: 'translate3d(0,0,0)', opacity: '1', offset: 0 },\n                { transform: 'translate3d(0,' + element.offsetHeight + 'px,0)', opacity: '.3', offset: 1 }\n            ];\n            const timing = { duration: 300, iterations: 1, easing: 'ease-out' };\n            element.animate(keyframes, timing).onfinish = onFinish;\n        });\n    }\n\n    /**\n     * Shows the OSD when moving the mouse pointer or touching the screen.\n     * @param {Event} event - Pointer movement event.\n     */\n    function onPointerMove(event) {\n        const pointerType = event.pointerType || (layoutManager.mobile ? 'touch' : 'mouse');\n\n        if (pointerType === 'mouse') {\n            const eventX = event.screenX || 0;\n            const eventY = event.screenY || 0;\n\n            const obj = lastMouseMoveData;\n            if (!obj) {\n                lastMouseMoveData = {\n                    x: eventX,\n                    y: eventY\n                };\n                return;\n            }\n\n            // if coord are same, it didn't move\n            if (Math.abs(eventX - obj.x) < 10 && Math.abs(eventY - obj.y) < 10) {\n                return;\n            }\n\n            obj.x = eventX;\n            obj.y = eventY;\n\n            showOsd();\n        }\n    }\n\n    /**\n     * Dispatches keyboard inputs to their proper handlers.\n     * @param {Event} event - Keyboard input event.\n     */\n    function onInputCommand(event) {\n        switch (event.detail.command) {\n            case 'up':\n            case 'down':\n            case 'select':\n            case 'menu':\n            case 'info':\n                showOsd();\n                break;\n            case 'play':\n                play();\n                break;\n            case 'pause':\n                pause();\n                break;\n            case 'playpause':\n                playPause();\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Shows the slideshow component.\n     */\n    self.show = function () {\n        createElements(options);\n        // Hides page scrollbar\n        document.body.classList.remove('force-scroll');\n        document.body.classList.add('hide-scroll');\n    };\n\n    /**\n     * Hides the slideshow element.\n     */\n    self.hide = function () {\n        if (dialog) {\n            dialogHelper.close(dialog);\n        }\n    };\n}\n"]}