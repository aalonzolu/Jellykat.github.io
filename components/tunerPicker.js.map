{"version":3,"sources":["components/tunerPicker.js"],"names":["define","_exports","_dialogHelper","_dom","_layoutManager","_connectionManager","_globalize","_loading","_browser","_focusManager","_scrollHelper","_materialIcons","_formDialogStyle","_embyButton","_embyItemscontainer","_cardStyle","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","enableFocusTransform","browser","slow","edge","getDeviceHtml","device","html","cssClass","layoutManager","tv","DeviceId","getTunerName","providerId","toLowerCase","Type","FriendlyName","Url","discoverDevices","view","apiClient","loading","show","querySelector","classList","remove","ApiClient","getJSON","getUrl","NewDevicesOnly","then","devices","currentDevices","renderDevices","i","length","globalize","translate","add","elem","innerHTML","focusManager","autoFocus","hide","_default","tunerPicker","this","options","dialogOptions","removeOnClose","scrollY","size","dlg","dialogHelper","createDialog","deviceResult","getEditorHtml","addEventListener","close","e","tunerCard","dom","parentWithClass","target","deviceId","getAttribute","filter","d","scrollHelper","centerFocus","on","connectionManager","getApiClient","serverId","off","open","Promise","resolve","reject"],"mappings":"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","file":"tunerPicker.js","sourcesContent":["import dialogHelper from 'dialogHelper';\nimport dom from 'dom';\nimport layoutManager from 'layoutManager';\nimport connectionManager from 'connectionManager';\nimport globalize from 'globalize';\nimport loading from 'loading';\nimport browser from 'browser';\nimport focusManager from 'focusManager';\nimport scrollHelper from 'scrollHelper';\nimport 'material-icons';\nimport 'formDialogStyle';\nimport 'emby-button';\nimport 'emby-itemscontainer';\nimport 'cardStyle';\n\nconst enableFocusTransform = !browser.slow && !browser.edge;\n\nfunction getEditorHtml() {\n    let html = '';\n    html += '<div class=\"formDialogContent scrollY\">';\n    html += '<div class=\"dialogContentInner dialog-content-centered\">';\n    html += '<div class=\"loadingContent hide\">';\n    html += '<h1>' + globalize.translate('DetectingDevices') + '...</h1>';\n    html += '<p>' + globalize.translate('MessagePleaseWait') + '</p>';\n    html += '</div>';\n    html += '<h1 style=\"margin-bottom:.25em;\" class=\"devicesHeader hide\">' + globalize.translate('HeaderNewDevices') + '</h1>';\n    html += '<div is=\"emby-itemscontainer\" class=\"results vertical-wrap\">';\n    html += '</div>';\n    html += '</div>';\n    return html += '</div>';\n}\n\nfunction getDeviceHtml(device) {\n    let html = '';\n    let cssClass = 'card scalableCard backdropCard backdropCard-scalable';\n    const cardBoxCssClass = 'cardBox visualCardBox';\n    const padderClass = 'cardPadder-backdrop';\n\n    // TODO move card creation code to Card component\n\n    if (layoutManager.tv) {\n        cssClass += ' show-focus';\n\n        if (enableFocusTransform) {\n            cssClass += ' show-animation';\n        }\n    }\n\n    html += '<button type=\"button\" class=\"' + cssClass + '\" data-id=\"' + device.DeviceId + '\" style=\"min-width:33.3333%;\">';\n    html += '<div class=\"' + cardBoxCssClass + '\">';\n    html += '<div class=\"cardScalable visualCardBox-cardScalable\">';\n    html += '<div class=\"' + padderClass + '\"></div>';\n    html += '<div class=\"cardContent searchImage\">';\n    html += '<div class=\"cardImageContainer coveredImage\"><span class=\"cardImageIcon material-icons dvr\"></span></div>';\n    html += '</div>';\n    html += '</div>';\n    html += '<div class=\"cardFooter visualCardBox-cardFooter\">';\n    html += '<div class=\"cardText cardTextCentered\">' + getTunerName(device.Type) + '</div>';\n    html += '<div class=\"cardText cardTextCentered cardText-secondary\">' + device.FriendlyName + '</div>';\n    html += '<div class=\"cardText cardText-secondary cardTextCentered\">';\n    html += device.Url || '&nbsp;';\n    html += '</div>';\n    html += '</div>';\n    html += '</div>';\n    return html += '</button>';\n}\n\nfunction getTunerName(providerId) {\n    switch (providerId = providerId.toLowerCase()) {\n        case 'm3u':\n            return 'M3U';\n\n        case 'hdhomerun':\n            return 'HDHomerun';\n\n        case 'hauppauge':\n            return 'Hauppauge';\n\n        case 'satip':\n            return 'DVB';\n\n        default:\n            return 'Unknown';\n    }\n}\n\nfunction renderDevices(view, devices) {\n    let html = '';\n\n    for (let i = 0, length = devices.length; i < length; i++) {\n        html += getDeviceHtml(devices[i]);\n    }\n\n    if (devices.length) {\n        view.querySelector('.devicesHeader').classList.remove('hide');\n    } else {\n        html = '<p><br/>' + globalize.translate('NoNewDevicesFound') + '</p>';\n        view.querySelector('.devicesHeader').classList.add('hide');\n    }\n\n    const elem = view.querySelector('.results');\n    elem.innerHTML = html;\n\n    if (layoutManager.tv) {\n        focusManager.autoFocus(elem);\n    }\n}\n\nfunction discoverDevices(view, apiClient) {\n    loading.show();\n    view.querySelector('.loadingContent').classList.remove('hide');\n    return ApiClient.getJSON(ApiClient.getUrl('LiveTv/Tuners/Discvover', {\n        NewDevicesOnly: true\n    })).then(function (devices) {\n        currentDevices = devices;\n        renderDevices(view, devices);\n        view.querySelector('.loadingContent').classList.add('hide');\n        loading.hide();\n    });\n}\n\nfunction tunerPicker() {\n    this.show = function (options) {\n        const dialogOptions = {\n            removeOnClose: true,\n            scrollY: false\n        };\n\n        if (layoutManager.tv) {\n            dialogOptions.size = 'fullscreen';\n        } else {\n            dialogOptions.size = 'small';\n        }\n\n        const dlg = dialogHelper.createDialog(dialogOptions);\n        dlg.classList.add('formDialog');\n        let html = '';\n        html += '<div class=\"formDialogHeader\">';\n        html += '<button is=\"paper-icon-button-light\" class=\"btnCancel autoSize\" tabindex=\"-1\"><span class=\"material-icons arrow_back\"></span></button>';\n        html += '<h3 class=\"formDialogHeaderTitle\">';\n        html += globalize.translate('HeaderLiveTvTunerSetup');\n        html += '</h3>';\n        html += '</div>';\n        html += getEditorHtml();\n        dlg.innerHTML = html;\n        dlg.querySelector('.btnCancel').addEventListener('click', function () {\n            dialogHelper.close(dlg);\n        });\n        let deviceResult;\n        dlg.querySelector('.results').addEventListener('click', function (e) {\n            const tunerCard = dom.parentWithClass(e.target, 'card');\n\n            if (tunerCard) {\n                const deviceId = tunerCard.getAttribute('data-id');\n                deviceResult = currentDevices.filter(function (d) {\n                    return d.DeviceId === deviceId;\n                })[0];\n                dialogHelper.close(dlg);\n            }\n        });\n\n        if (layoutManager.tv) {\n            scrollHelper.centerFocus.on(dlg.querySelector('.formDialogContent'), false);\n        }\n\n        const apiClient = connectionManager.getApiClient(options.serverId);\n        discoverDevices(dlg, apiClient);\n\n        if (layoutManager.tv) {\n            scrollHelper.centerFocus.off(dlg.querySelector('.formDialogContent'), false);\n        }\n\n        return dialogHelper.open(dlg).then(function () {\n            if (deviceResult) {\n                return Promise.resolve(deviceResult);\n            }\n\n            return Promise.reject();\n        });\n    };\n}\n\nlet currentDevices = [];\n\nexport default tunerPicker;\n"]}