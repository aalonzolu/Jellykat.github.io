{"version":3,"sources":["components/themeMediaPlayer.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","define","_playbackManager","userSettings","_connectionManager","_getRequireWildcardCache","WeakMap","cache","_interopRequireDefault","__esModule","default","currentOwnerId","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","currentThemeIds","playThemeMedia","items","ownerId","currentThemeItems","filter","i","enabled","mediaType","enableThemeVideos","enableThemeSongs","MediaType","length","playbackManager","isPlaying","map","Id","play","fullscreen","enableRemotePlayers","then","stopIfPlaying","stop","excludeTypes","document","addEventListener","e","item","detail","state","ServerId","loadThemeMedia","CollectionType","indexOf","Type","apiClient","connectionManager","getApiClient","getThemeMedia","getCurrentUserId","themeMediaResult","ThemeVideosResult","Items","OwnerId","ThemeSongsResult","options","supportsThemeMedia","Events","on","player","currentItem"],"mappings":"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","file":"themeMediaPlayer.js","sourcesContent":["import playbackManager from 'playbackManager';\nimport * as userSettings from 'userSettings';\nimport connectionManager from 'connectionManager';\n\nlet currentOwnerId;\nlet currentThemeIds = [];\n\nfunction playThemeMedia(items, ownerId) {\n    const currentThemeItems = items.filter(function (i) {\n        return enabled(i.MediaType);\n    });\n\n    if (currentThemeItems.length) {\n        // Stop if a theme song from another ownerId\n        // Leave it alone if anything else (e.g user playing a movie)\n        if (!currentOwnerId && playbackManager.isPlaying()) {\n            return;\n        }\n\n        currentThemeIds = currentThemeItems.map(function (i) {\n            return i.Id;\n        });\n\n        playbackManager.play({\n            items: currentThemeItems,\n            fullscreen: false,\n            enableRemotePlayers: false\n        }).then(function () {\n            currentOwnerId = ownerId;\n        });\n    } else {\n        stopIfPlaying();\n    }\n}\n\nfunction stopIfPlaying() {\n    if (currentOwnerId) {\n        playbackManager.stop();\n    }\n\n    currentOwnerId = null;\n}\n\nfunction enabled(mediaType) {\n    if (mediaType === 'Video') {\n        return userSettings.enableThemeVideos();\n    }\n\n    return userSettings.enableThemeSongs();\n}\n\nconst excludeTypes = ['CollectionFolder', 'UserView', 'Program', 'SeriesTimer', 'Person', 'TvChannel', 'Channel'];\n\nfunction loadThemeMedia(item) {\n    if (item.CollectionType) {\n        stopIfPlaying();\n        return;\n    }\n\n    if (excludeTypes.indexOf(item.Type) !== -1) {\n        stopIfPlaying();\n        return;\n    }\n\n    const apiClient = connectionManager.getApiClient(item.ServerId);\n    apiClient.getThemeMedia(apiClient.getCurrentUserId(), item.Id, true).then(function (themeMediaResult) {\n        const ownerId = themeMediaResult.ThemeVideosResult.Items.length ? themeMediaResult.ThemeVideosResult.OwnerId : themeMediaResult.ThemeSongsResult.OwnerId;\n\n        if (ownerId !== currentOwnerId) {\n            const items = themeMediaResult.ThemeVideosResult.Items.length ? themeMediaResult.ThemeVideosResult.Items : themeMediaResult.ThemeSongsResult.Items;\n\n            playThemeMedia(items, ownerId);\n        }\n    });\n}\n\ndocument.addEventListener('viewshow', function (e) {\n    const state = e.detail.state || {};\n    const item = state.item;\n\n    if (item && item.ServerId) {\n        loadThemeMedia(item);\n        return;\n    }\n\n    const viewOptions = e.detail.options || {};\n\n    if (viewOptions.supportsThemeMedia) {\n        // Do nothing here, allow it to keep playing\n    } else {\n        playThemeMedia([], null);\n    }\n}, true);\n\nEvents.on(playbackManager, 'playbackstart', function (e, player) {\n    const item = playbackManager.currentItem(player);\n    // User played something manually\n    if (currentThemeIds.indexOf(item.Id) == -1) {\n        currentOwnerId = null;\n    }\n});\n"]}