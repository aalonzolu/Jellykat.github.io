{"version":3,"sources":["components/playlisteditor/playlisteditor.js"],"names":["define","_require","_exports","_dom","_dialogHelper","_loading","_layoutManager","_playbackManager","_connectionManager","userSettings","_appRouter","_globalize","_embyInput","_paperIconButtonLight","_embySelect","_materialIcons","_formdialog","_embyButton","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","currentServerId","onSubmit","e","panel","dom","parentWithClass","this","playlistId","querySelector","value","apiClient","connectionManager","getApiClient","addToPlaylist","dlg","id","itemIds","playbackManager","queue","serverId","ids","split","submitted","dialogHelper","close","loading","show","url","getUrl","concat","Ids","userId","getCurrentUserId","ajax","type","then","hide","createPlaylist","Name","dataType","result","Id","redirectToPlaylist","appRouter","showItem","preventDefault","triggerChange","select","dispatchEvent","CustomEvent","initEditor","content","options","items","addEventListener","classList","add","removeAttribute","remove","setAttribute","join","length","populatePlaylists","editorOptions","getItems","Recursive","IncludeItemTypes","SortBy","EnableTotalRecordCount","html","enableAddToPlayQueue","isPlaying","globalize","translate","Items","map","i","innerHTML","defaultValue","selectPlaylistToAddTo","centerFocus","elem","horiz","on","Promise","_resolve","_reject","imported","scrollHelper","fn","showEditor","_classCallCheck","instance","Constructor","TypeError","dialogOptions","removeOnClose","scrollY","layoutManager","tv","size","createDialog","getEditorHtml","autoFocus","open","resolve","reject","_default"],"mappings":"AAAAA,OAAO,CAAC,UAAW,UAAW,MAAO,eAAgB,UAAW,gBAAiB,kBAAmB,oBAAqB,eAAgB,YAAa,YAAa,aAAc,0BAA2B,cAAe,iBAAkB,sBAAuB,gBAAgB,SAAUC,SAAUC,SAAUC,KAAMC,cAAeC,SAAUC,eAAgBC,iBAAkBC,mBAAoBC,aAAcC,WAAYC,WAAYC,WAAYC,sBAAuBC,YAAaC,eAAgBC,YAAaC,aACxf,aAgBA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KAEvF,SAASG,QAAQH,KAAmV,OAAtOG,QAArD,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAmC,SAASF,QAAQH,KAAO,cAAcA,KAA2B,SAASG,QAAQH,KAAO,OAAOA,KAAyB,mBAAXI,QAAyBJ,IAAIM,cAAgBF,QAAUJ,MAAQI,OAAOG,UAAY,gBAAkBP,MAAyBA,KAInX,SAASQ,2BAA6B,GAAuB,mBAAZC,QAAwB,OAAO,KAAM,IAAIC,MAAQ,IAAID,QAA6F,OAAlFD,yBAA2B,SAASA,2BAA6B,OAAOE,OAAiBA,MAE1M,SAASC,wBAAwBX,KAAO,GAAIA,KAAOA,IAAIC,WAAc,OAAOD,IAAO,GAAY,OAARA,KAAiC,WAAjBG,QAAQH,MAAoC,mBAARA,IAAsB,MAAO,CAAEE,QAASF,KAAS,IAAIU,MAAQF,2BAA4B,GAAIE,OAASA,MAAME,IAAIZ,KAAQ,OAAOU,MAAMG,IAAIb,KAAQ,IAAIc,OAAS,GAAQC,sBAAwBC,OAAOC,gBAAkBD,OAAOE,yBAA0B,IAAK,IAAIC,OAAOnB,IAAO,GAAIgB,OAAOT,UAAUa,eAAeC,KAAKrB,IAAKmB,KAAM,CAAE,IAAIG,KAAOP,sBAAwBC,OAAOE,yBAAyBlB,IAAKmB,KAAO,KAAUG,OAASA,KAAKT,KAAOS,KAAKC,KAAQP,OAAOC,eAAeH,OAAQK,IAAKG,MAAgBR,OAAOK,KAAOnB,IAAImB,KAAyE,OAA7DL,OAAOZ,QAAUF,IAASU,OAASA,MAAMa,IAAIvB,IAAKc,QAAkBA,OAP9tB,IAAIU,gBAEJ,SAASC,SAASC,GACd,IAAMC,MAAQC,KAAAA,QAAIC,gBAAgBC,KAAM,UAElCC,WAAaJ,MAAMK,cAAc,0BAA0BC,MAC3DC,UAAYC,mBAAAA,QAAkBC,aAAaZ,iBAUjD,OARIO,YACAzC,aAAaiC,IAAI,gCAAiCQ,YAsC1D,SAASM,cAAcH,UAAWI,IAAKC,IACnC,IAAMC,QAAUF,IAAIN,cAAc,uBAAuBC,OAAS,GAElE,GAAW,UAAPM,GAOA,OANAE,iBAAAA,QAAgBC,MAAM,CAClBC,SAAUT,UAAUS,WACpBC,IAAKJ,QAAQK,MAAM,OAEvBP,IAAIQ,WAAY,OAChBC,cAAAA,QAAaC,MAAMV,KAIvBW,SAAAA,QAAQC,OAER,IAAMC,IAAMjB,UAAUkB,OAAV,aAAAC,OAA8Bd,GAA9B,UAA0C,CAClDe,IAAKd,QACLe,OAAQrB,UAAUsB,qBAGtBtB,UAAUuB,KAAK,CACXC,KAAM,OACNP,IAAKA,MAENQ,MAAK,WACJV,SAAAA,QAAQW,OAERtB,IAAIQ,WAAY,EAChBC,cAAAA,QAAaC,MAAMV,QAjEnBD,CAAcH,UAAWP,MAAOI,aASxC,SAAS8B,eAAe3B,UAAWI,KAC/BW,SAAAA,QAAQC,OAER,IAAMC,IAAMjB,UAAUkB,OAAO,YAAa,CACtCU,KAAMxB,IAAIN,cAAc,uBAAuBC,MAC/CqB,IAAKhB,IAAIN,cAAc,uBAAuBC,OAAS,GACvDsB,OAAQrB,UAAUsB,qBAItBtB,UAAUuB,KAAK,CACXC,KAAM,OACNP,IAAKA,IACLY,SAAU,SACXJ,MAAK,SAAAK,QACJf,SAAAA,QAAQW,OAER,IAAMrB,GAAKyB,OAAOC,GAClB3B,IAAIQ,WAAY,EAChBC,cAAAA,QAAaC,MAAMV,KAK3B,SAAS4B,mBAAmBhC,UAAWK,IACnC4B,WAAAA,QAAUC,SAAS7B,GAAIL,UAAUS,YAL7BuB,CAAmBhC,UAAWK,OA3B9BsB,CAAe3B,UAAWP,OAG9BD,EAAE2C,kBACK,EA+DX,SAASC,cAAcC,QACnBA,OAAOC,cAAc,IAAIC,YAAY,SAAU,KAqFnD,SAASC,WAAWC,QAASC,QAASC,OAelC,GAdAF,QAAQ3C,cAAc,0BAA0B8C,iBAAiB,UAAU,WACnEhD,KAAKG,OACL0C,QAAQ3C,cAAc,oBAAoB+C,UAAUC,IAAI,QACxDL,QAAQ3C,cAAc,uBAAuBiD,gBAAgB,cAE7DN,QAAQ3C,cAAc,oBAAoB+C,UAAUG,OAAO,QAC3DP,QAAQ3C,cAAc,uBAAuBmD,aAAa,WAAY,gBAI9ER,QAAQ3C,cAAc,QAAQ8C,iBAAiB,SAAUrD,UAEzDkD,QAAQ3C,cAAc,sBAAuB2C,SAAS1C,MAAQ4C,MAAMO,KAAK,KAErEP,MAAMQ,OACNV,QAAQ3C,cAAc,sBAAsB+C,UAAUG,OAAO,QAlGrE,SAASI,kBAAkBC,cAAe5D,OACtC,IAAM4C,OAAS5C,MAAMK,cAAc,0BAEnCiB,SAAAA,QAAQW,OAERjC,MAAMK,cAAc,oBAAoB+C,UAAUC,IAAI,QAEtD,IAOM9C,UAAYC,mBAAAA,QAAkBC,aAAaZ,iBACjDU,UAAUsD,SAAStD,UAAUsB,mBARb,CACZiC,WAAW,EACXC,iBAAkB,WAClBC,OAAQ,WACRC,wBAAwB,IAI8BjC,MAAK,SAAAK,QAC3D,IAAI6B,KAAO,IAEgC,IAAvCN,cAAcO,sBAAkCrD,iBAAAA,QAAgBsD,cAChEF,MAAI,yBAAAxC,OAA6B2C,WAAAA,QAAUC,UAAU,kBAAjD,cAGRJ,MAAI,oBAAAxC,OAAwB2C,WAAAA,QAAUC,UAAU,aAA5C,aAEJJ,MAAQ7B,OAAOkC,MAAMC,KAAI,SAAAC,GACrB,MAAA,kBAAA/C,OAAyB+C,EAAEnC,GAA3B,MAAAZ,OAAkC+C,EAAEtC,KAApC,gBAGJS,OAAO8B,UAAYR,KAEnB,IAAIS,aAAef,cAAce,aAC5BA,eACDA,aAAehH,aAAauB,IAAI,kCAAoC,IAExE0D,OAAOtC,MAAyB,QAAjBqE,aAAyB,GAAKA,aAGxC/B,OAAOtC,QACRsC,OAAOtC,MAAQ,IAGnBqC,cAAcC,QAEdtB,SAAAA,QAAQW,UAwDR0B,CAAkBV,QAASD,aACxB,CACHA,QAAQ3C,cAAc,sBAAsB+C,UAAUC,IAAI,QAE1D,IAAMuB,sBAAwB5B,QAAQ3C,cAAc,0BACpDuE,sBAAsBF,UAAY,GAClCE,sBAAsBtE,MAAQ,GAC9BqC,cAAciC,wBAItB,SAASC,YAAYC,KAAMC,MAAOC,IAC9B,IAAAC,SAAA,SAAAC,SAAAC,SAAA,OAAAhI,SAAA,CAAO,iBAAP,SAAAiI,UAAA,OAAAF,SAAAlG,wBAAAoG,aAAAD,YAAuBnD,MAAK,SAACqD,cACzB,IAAMC,GAAKN,GAAK,KAAO,MACvBK,aAAaR,YAAYS,IAAIR,KAAMC,UAnN7C1F,OAAOC,eAAelC,SAAU,aAAc,CAC5CkD,OAAO,IAETlD,SAASmB,QAAUnB,SAASmI,gBAAa,EAN3ClI,KAAAe,uBAAAf,MACAC,cAAAc,uBAAAd,eACAC,SAAAa,uBAAAb,UACAC,eAAAY,uBAAAZ,gBACAC,iBAAAW,uBAAAX,kBACAC,mBAAAU,uBAAAV,oBACAC,aAAAqB,wBAAArB,cACAC,WAAAQ,uBAAAR,YACAC,WAAAO,uBAAAP,YAqNE,IAHe0H,WACT,SAAAA,WAAYtC,UAtMlB,SAASuC,gBAAgBC,SAAUC,aAAe,KAAMD,oBAAoBC,aAAgB,MAAM,IAAIC,UAAU,qCAsMrFH,CAAArF,KAAAoF,YACjB,IAAMrC,MAAQD,QAAQC,OAAS,GAC/BrD,gBAAkBoD,QAAQjC,SAE1B,IAAM4E,cAAgB,CAClBC,eAAe,EACfC,SAAS,GAGTC,eAAAA,QAAcC,GACdJ,cAAcK,KAAO,aAErBL,cAAcK,KAAO,QAGzB,IAAMtF,IAAMS,cAAAA,QAAa8E,aAAaN,eAEtCjF,IAAIyC,UAAUC,IAAI,cAElB,IAAIa,KAAO,GAyBX,OAtBAA,MAAQ,iCACRA,MAAQ,yIACRA,MAAQ,qCACRA,MALcG,WAAAA,QAAUC,UAAU,uBAMlCJ,MAAQ,QAERA,MAAQ,SAERA,MArGR,SAASiC,cAAcjD,OACnB,IAAIgB,KAAO,GAEXA,MAAQ,yEACRA,MAAQ,2DACRA,MAAQ,8BAERA,MAAQ,kDACR,IAAIkC,UAAYlD,MAAMQ,OAAS,aAAe,GAwB9C,OAvBAQ,MAAI,8DAAAxC,OAAkE2C,WAAAA,QAAUC,UAAU,iBAAtF,KAAA5C,OAA0G0E,UAA1G,cACJlC,MAAQ,SAERA,MAAQ,gCAERA,MAAQ,+BACRkC,UAAYlD,MAAMQ,OAAS,GAAK,aAChCQ,MAAI,yFAAAxC,OAA6F2C,WAAAA,QAAUC,UAAU,aAAjH,KAAA5C,OAAiI0E,UAAjI,OACJlC,MAAQ,SAGRA,MAAQ,SAERA,MAAQ,iCACRA,MAAI,4GAAAxC,OAAgH2C,WAAAA,QAAUC,UAAU,OAApI,aACJJ,MAAQ,SAERA,MAAQ,qDAERA,MAAQ,UACRA,MAAQ,SACRA,MAAQ,SAuEIiC,CAAcjD,OAEtBvC,IAAI+D,UAAYR,KAEhBnB,WAAWpC,IAAKsC,QAASC,OAEzBvC,IAAIN,cAAc,cAAc8C,iBAAiB,SAAS,WACtD/B,cAAAA,QAAaC,MAAMV,QAGnBoF,eAAAA,QAAcC,IACdnB,YAAYlE,IAAIN,cAAc,uBAAuB,GAAO,GAGzDe,cAAAA,QAAaiF,KAAK1F,KAAKqB,MAAK,WAK/B,OAJI+D,eAAAA,QAAcC,IACdnB,YAAYlE,IAAIN,cAAc,uBAAuB,GAAO,GAG5DM,IAAIQ,UACG8D,QAAQqB,UAGZrB,QAAQsB,aAI7BnJ,SAASmI,WAAaA,WACtB,IAAIiB,SACSjB,WAAbnI,SAASmB,QAAUiI","file":"playlisteditor.js","sourcesContent":["import dom from 'dom';\nimport dialogHelper from 'dialogHelper';\nimport loading from 'loading';\nimport layoutManager from 'layoutManager';\nimport playbackManager from 'playbackManager';\nimport connectionManager from 'connectionManager';\nimport * as userSettings from 'userSettings';\nimport appRouter from 'appRouter';\nimport globalize from 'globalize';\nimport 'emby-input';\nimport 'paper-icon-button-light';\nimport 'emby-select';\nimport 'material-icons';\nimport 'css!./../formdialog';\nimport 'emby-button';\n\n/* eslint-disable indent */\n\n    let currentServerId;\n\n    function onSubmit(e) {\n        const panel = dom.parentWithClass(this, 'dialog');\n\n        const playlistId = panel.querySelector('#selectPlaylistToAddTo').value;\n        const apiClient = connectionManager.getApiClient(currentServerId);\n\n        if (playlistId) {\n            userSettings.set('playlisteditor-lastplaylistid', playlistId);\n            addToPlaylist(apiClient, panel, playlistId);\n        } else {\n            createPlaylist(apiClient, panel);\n        }\n\n        e.preventDefault();\n        return false;\n    }\n\n    function createPlaylist(apiClient, dlg) {\n        loading.show();\n\n        const url = apiClient.getUrl('Playlists', {\n            Name: dlg.querySelector('#txtNewPlaylistName').value,\n            Ids: dlg.querySelector('.fldSelectedItemIds').value || '',\n            userId: apiClient.getCurrentUserId()\n\n        });\n\n        apiClient.ajax({\n            type: 'POST',\n            url: url,\n            dataType: 'json'\n        }).then(result => {\n            loading.hide();\n\n            const id = result.Id;\n            dlg.submitted = true;\n            dialogHelper.close(dlg);\n            redirectToPlaylist(apiClient, id);\n        });\n    }\n\n    function redirectToPlaylist(apiClient, id) {\n        appRouter.showItem(id, apiClient.serverId());\n    }\n\n    function addToPlaylist(apiClient, dlg, id) {\n        const itemIds = dlg.querySelector('.fldSelectedItemIds').value || '';\n\n        if (id === 'queue') {\n            playbackManager.queue({\n                serverId: apiClient.serverId(),\n                ids: itemIds.split(',')\n            });\n            dlg.submitted = true;\n            dialogHelper.close(dlg);\n            return;\n        }\n\n        loading.show();\n\n        const url = apiClient.getUrl(`Playlists/${id}/Items`, {\n            Ids: itemIds,\n            userId: apiClient.getCurrentUserId()\n        });\n\n        apiClient.ajax({\n            type: 'POST',\n            url: url\n\n        }).then(() => {\n            loading.hide();\n\n            dlg.submitted = true;\n            dialogHelper.close(dlg);\n        });\n    }\n\n    function triggerChange(select) {\n        select.dispatchEvent(new CustomEvent('change', {}));\n    }\n\n    function populatePlaylists(editorOptions, panel) {\n        const select = panel.querySelector('#selectPlaylistToAddTo');\n\n        loading.hide();\n\n        panel.querySelector('.newPlaylistInfo').classList.add('hide');\n\n        const options = {\n            Recursive: true,\n            IncludeItemTypes: 'Playlist',\n            SortBy: 'SortName',\n            EnableTotalRecordCount: false\n        };\n\n        const apiClient = connectionManager.getApiClient(currentServerId);\n        apiClient.getItems(apiClient.getCurrentUserId(), options).then(result => {\n            let html = '';\n\n            if (editorOptions.enableAddToPlayQueue !== false && playbackManager.isPlaying()) {\n                html += `<option value=\"queue\">${globalize.translate('AddToPlayQueue')}</option>`;\n            }\n\n            html += `<option value=\"\">${globalize.translate('OptionNew')}</option>`;\n\n            html += result.Items.map(i => {\n                return `<option value=\"${i.Id}\">${i.Name}</option>`;\n            });\n\n            select.innerHTML = html;\n\n            let defaultValue = editorOptions.defaultValue;\n            if (!defaultValue) {\n                defaultValue = userSettings.get('playlisteditor-lastplaylistid') || '';\n            }\n            select.value = defaultValue === 'new' ? '' : defaultValue;\n\n            // If the value is empty set it again, in case we tried to set a lastplaylistid that is no longer valid\n            if (!select.value) {\n                select.value = '';\n            }\n\n            triggerChange(select);\n\n            loading.hide();\n        });\n    }\n\n    function getEditorHtml(items) {\n        let html = '';\n\n        html += '<div class=\"formDialogContent smoothScrollY\" style=\"padding-top:2em;\">';\n        html += '<div class=\"dialogContentInner dialog-content-centered\">';\n        html += '<form style=\"margin:auto;\">';\n\n        html += '<div class=\"fldSelectPlaylist selectContainer\">';\n        let autoFocus = items.length ? ' autofocus' : '';\n        html += `<select is=\"emby-select\" id=\"selectPlaylistToAddTo\" label=\"${globalize.translate('LabelPlaylist')}\"${autoFocus}></select>`;\n        html += '</div>';\n\n        html += '<div class=\"newPlaylistInfo\">';\n\n        html += '<div class=\"inputContainer\">';\n        autoFocus = items.length ? '' : ' autofocus';\n        html += `<input is=\"emby-input\" type=\"text\" id=\"txtNewPlaylistName\" required=\"required\" label=\"${globalize.translate('LabelName')}\"${autoFocus} />`;\n        html += '</div>';\n\n        // newPlaylistInfo\n        html += '</div>';\n\n        html += '<div class=\"formDialogFooter\">';\n        html += `<button is=\"emby-button\" type=\"submit\" class=\"raised btnSubmit block formDialogFooterItem button-submit\">${globalize.translate('Add')}</button>`;\n        html += '</div>';\n\n        html += '<input type=\"hidden\" class=\"fldSelectedItemIds\" />';\n\n        html += '</form>';\n        html += '</div>';\n        html += '</div>';\n\n        return html;\n    }\n\n    function initEditor(content, options, items) {\n        content.querySelector('#selectPlaylistToAddTo').addEventListener('change', function () {\n            if (this.value) {\n                content.querySelector('.newPlaylistInfo').classList.add('hide');\n                content.querySelector('#txtNewPlaylistName').removeAttribute('required');\n            } else {\n                content.querySelector('.newPlaylistInfo').classList.remove('hide');\n                content.querySelector('#txtNewPlaylistName').setAttribute('required', 'required');\n            }\n        });\n\n        content.querySelector('form').addEventListener('submit', onSubmit);\n\n        content.querySelector('.fldSelectedItemIds', content).value = items.join(',');\n\n        if (items.length) {\n            content.querySelector('.fldSelectPlaylist').classList.remove('hide');\n            populatePlaylists(options, content);\n        } else {\n            content.querySelector('.fldSelectPlaylist').classList.add('hide');\n\n            const selectPlaylistToAddTo = content.querySelector('#selectPlaylistToAddTo');\n            selectPlaylistToAddTo.innerHTML = '';\n            selectPlaylistToAddTo.value = '';\n            triggerChange(selectPlaylistToAddTo);\n        }\n    }\n\n    function centerFocus(elem, horiz, on) {\n        import('scrollHelper').then((scrollHelper) => {\n            const fn = on ? 'on' : 'off';\n            scrollHelper.centerFocus[fn](elem, horiz);\n        });\n    }\n\n    export class showEditor {\n        constructor(options) {\n            const items = options.items || {};\n            currentServerId = options.serverId;\n\n            const dialogOptions = {\n                removeOnClose: true,\n                scrollY: false\n            };\n\n            if (layoutManager.tv) {\n                dialogOptions.size = 'fullscreen';\n            } else {\n                dialogOptions.size = 'small';\n            }\n\n            const dlg = dialogHelper.createDialog(dialogOptions);\n\n            dlg.classList.add('formDialog');\n\n            let html = '';\n            const title = globalize.translate('HeaderAddToPlaylist');\n\n            html += '<div class=\"formDialogHeader\">';\n            html += '<button is=\"paper-icon-button-light\" class=\"btnCancel autoSize\" tabindex=\"-1\"><span class=\"material-icons arrow_back\"></span></button>';\n            html += '<h3 class=\"formDialogHeaderTitle\">';\n            html += title;\n            html += '</h3>';\n\n            html += '</div>';\n\n            html += getEditorHtml(items);\n\n            dlg.innerHTML = html;\n\n            initEditor(dlg, options, items);\n\n            dlg.querySelector('.btnCancel').addEventListener('click', () => {\n                dialogHelper.close(dlg);\n            });\n\n            if (layoutManager.tv) {\n                centerFocus(dlg.querySelector('.formDialogContent'), false, true);\n            }\n\n            return dialogHelper.open(dlg).then(() => {\n                if (layoutManager.tv) {\n                    centerFocus(dlg.querySelector('.formDialogContent'), false, false);\n                }\n\n                if (dlg.submitted) {\n                    return Promise.resolve();\n                }\n\n                return Promise.reject();\n            });\n        }\n    }\n\n/* eslint-enable indent */\nexport default showEditor;\n"]}