{"version":3,"sources":["components/playerstats/playerstats.js"],"names":["define","_exports","_events","_globalize","_playbackManager","_connectionManager","_syncPlayManager","_playMethodHelper","_layoutManager","_paperIconButtonLight","_playerstats","_interopRequireDefault","obj","__esModule","default","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","onCloseButtonClick","this","enabled","translateReason","reason","globalize","translate","getTranscodingStats","session","player","displayPlayMethod","videoCodec","audioCodec","totalBitrate","audioChannels","sessionStats","TranscodingInfo","VideoCodec","AudioCodec","Bitrate","AudioChannels","push","label","value","IsVideoDirect","toUpperCase","IsAudioDirect","getDisplayBitrate","CompletionPercentage","toFixed","Framerate","TranscodeReasons","map","join","bitrate","Math","floor","getMediaSourceStats","size","mediaSource","playbackManager","currentMediaSource","mediaFileSize","Size","Container","parseFloat","videoStream","MediaStreams","filter","s","Type","Codec","audioStreamIndex","getAudioStreamIndex","audioStream","audioTracks","Index","Channels","videoInfos","Profile","BitRate","audioInfos","SampleRate","BitDepth","getStats","instance","statsPromise","Promise","resolve","sessionPromise","getSession","Date","getTime","lastSessionTime","lastSession","apiClient","connectionManager","getApiClient","currentItem","ServerId","getSessions","deviceId","then","sessions","all","responses","playerStats","categories","playMethodHelper","getDisplayPlayMethod","baseCategory","stats","name","unshift","category","type","syncStats","syncPlayManager","isSyncPlayEnabled","isMinServerVersion","TimeOffset","PlaybackDiff","SyncMethod","bindEvents","localOnTimeUpdate","renderPlayerStats","now","lastRender","elem","element","renderStats","querySelector","innerHTML","categoryHtml","subText","stat","onTimeUpdate","events","on","unbindEvents","off","_default","PlayerStats","options","_classCallCheck","Constructor","TypeError","init","button","parent","document","createElement","classList","add","layoutManager","tv","contentClass","addEventListener","bind","body","appendChild","_createClass","protoProps","staticProps","prototype","_enabled","remove","toggle","destroy","parentNode","removeChild"],"mappings":"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","file":"playerstats.js","sourcesContent":["import events from 'events';\nimport globalize from 'globalize';\nimport playbackManager from 'playbackManager';\nimport connectionManager from 'connectionManager';\nimport syncPlayManager from 'syncPlayManager';\nimport playMethodHelper from 'playMethodHelper';\nimport layoutManager from 'layoutManager';\nimport 'paper-icon-button-light';\nimport 'css!./playerstats';\n\n/* eslint-disable indent */\n\n    function init(instance) {\n        const parent = document.createElement('div');\n\n        parent.classList.add('playerStats');\n\n        if (layoutManager.tv) {\n            parent.classList.add('playerStats-tv');\n        }\n\n        parent.classList.add('hide');\n\n        let button;\n\n        if (layoutManager.tv) {\n            button = '';\n        } else {\n            button = '<button type=\"button\" is=\"paper-icon-button-light\" class=\"playerStats-closeButton\"><span class=\"material-icons close\"></span></button>';\n        }\n\n        const contentClass = layoutManager.tv ? 'playerStats-content playerStats-content-tv' : 'playerStats-content';\n\n        parent.innerHTML = '<div class=\"' + contentClass + '\">' + button + '<div class=\"playerStats-stats\"></div></div>';\n\n        button = parent.querySelector('.playerStats-closeButton');\n\n        if (button) {\n            button.addEventListener('click', onCloseButtonClick.bind(instance));\n        }\n\n        document.body.appendChild(parent);\n\n        instance.element = parent;\n    }\n\n    function onCloseButtonClick() {\n        this.enabled(false);\n    }\n\n    function renderStats(elem, categories) {\n        elem.querySelector('.playerStats-stats').innerHTML = categories.map(function (category) {\n            let categoryHtml = '';\n\n            const stats = category.stats;\n\n            if (stats.length && category.name) {\n                categoryHtml += '<div class=\"playerStats-stat playerStats-stat-header\">';\n\n                categoryHtml += '<div class=\"playerStats-stat-label\">';\n                categoryHtml += category.name;\n                categoryHtml += '</div>';\n\n                categoryHtml += '<div class=\"playerStats-stat-value\">';\n                categoryHtml += category.subText || '';\n                categoryHtml += '</div>';\n\n                categoryHtml += '</div>';\n            }\n\n            for (let i = 0, length = stats.length; i < length; i++) {\n                categoryHtml += '<div class=\"playerStats-stat\">';\n\n                const stat = stats[i];\n\n                categoryHtml += '<div class=\"playerStats-stat-label\">';\n                categoryHtml += stat.label;\n                categoryHtml += '</div>';\n\n                categoryHtml += '<div class=\"playerStats-stat-value\">';\n                categoryHtml += stat.value;\n                categoryHtml += '</div>';\n\n                categoryHtml += '</div>';\n            }\n\n            return categoryHtml;\n        }).join('');\n    }\n\n    function getSession(instance, player) {\n        const now = new Date().getTime();\n\n        if ((now - (instance.lastSessionTime || 0)) < 10000) {\n            return Promise.resolve(instance.lastSession);\n        }\n\n        const apiClient = connectionManager.getApiClient(playbackManager.currentItem(player).ServerId);\n\n        return apiClient.getSessions({\n            deviceId: apiClient.deviceId()\n        }).then(function (sessions) {\n            instance.lastSession = sessions[0] || {};\n            instance.lastSessionTime = new Date().getTime();\n\n            return Promise.resolve(instance.lastSession);\n        }, function () {\n            return Promise.resolve({});\n        });\n    }\n\n    function translateReason(reason) {\n        return globalize.translate('' + reason);\n    }\n\n    function getTranscodingStats(session, player, displayPlayMethod) {\n        const sessionStats = [];\n\n        let videoCodec;\n        let audioCodec;\n        let totalBitrate;\n        let audioChannels;\n\n        if (session.TranscodingInfo) {\n            videoCodec = session.TranscodingInfo.VideoCodec;\n            audioCodec = session.TranscodingInfo.AudioCodec;\n            totalBitrate = session.TranscodingInfo.Bitrate;\n            audioChannels = session.TranscodingInfo.AudioChannels;\n        }\n\n        if (videoCodec) {\n            sessionStats.push({\n                label: globalize.translate('LabelVideoCodec'),\n                value: session.TranscodingInfo.IsVideoDirect ? (videoCodec.toUpperCase() + ' (direct)') : videoCodec.toUpperCase()\n            });\n        }\n\n        if (audioCodec) {\n            sessionStats.push({\n                label: globalize.translate('LabelAudioCodec'),\n                value: session.TranscodingInfo.IsAudioDirect ? (audioCodec.toUpperCase() + ' (direct)') : audioCodec.toUpperCase()\n            });\n        }\n\n        if (audioChannels) {\n            sessionStats.push({\n                label: globalize.translate('LabelAudioChannels'),\n                value: audioChannels\n            });\n        }\n\n        if (displayPlayMethod === 'Transcode') {\n            if (totalBitrate) {\n                sessionStats.push({\n                    label: globalize.translate('LabelBitrate'),\n                    value: getDisplayBitrate(totalBitrate)\n                });\n            }\n            if (session.TranscodingInfo.CompletionPercentage) {\n                sessionStats.push({\n                    label: globalize.translate('LabelTranscodingProgress'),\n                    value: session.TranscodingInfo.CompletionPercentage.toFixed(1) + '%'\n                });\n            }\n            if (session.TranscodingInfo.Framerate) {\n                sessionStats.push({\n                    label: globalize.translate('LabelTranscodingFramerate'),\n                    value: session.TranscodingInfo.Framerate + ' fps'\n                });\n            }\n            if (session.TranscodingInfo.TranscodeReasons && session.TranscodingInfo.TranscodeReasons.length) {\n                sessionStats.push({\n                    label: globalize.translate('LabelReasonForTranscoding'),\n                    value: session.TranscodingInfo.TranscodeReasons.map(translateReason).join('<br/>')\n                });\n            }\n        }\n\n        return sessionStats;\n    }\n\n    function getDisplayBitrate(bitrate) {\n        if (bitrate > 1000000) {\n            return (bitrate / 1000000).toFixed(1) + ' Mbps';\n        } else {\n            return Math.floor(bitrate / 1000) + ' kbps';\n        }\n    }\n\n    function getReadableSize(size) {\n        if (size >= 1073741824) {\n            return parseFloat((size / 1073741824).toFixed(1)) + ' GiB';\n        } else if (size >= 1048576) {\n            return parseFloat((size / 1048576).toFixed(1)) + ' MiB';\n        } else {\n            return Math.floor(size / 1024) + ' KiB';\n        }\n    }\n\n    function getMediaSourceStats(session, player, displayPlayMethod) {\n        const sessionStats = [];\n\n        const mediaSource = playbackManager.currentMediaSource(player) || {};\n        const totalBitrate = mediaSource.Bitrate;\n        const mediaFileSize = mediaSource.Size;\n\n        if (mediaSource.Container) {\n            sessionStats.push({\n                label: globalize.translate('LabelProfileContainer'),\n                value: mediaSource.Container\n            });\n        }\n\n        if (mediaFileSize) {\n            sessionStats.push({\n                label: globalize.translate('LabelSize'),\n                value: getReadableSize(mediaFileSize)\n            });\n        }\n\n        if (totalBitrate) {\n            sessionStats.push({\n                label: globalize.translate('LabelBitrate'),\n                value: getDisplayBitrate(totalBitrate)\n            });\n        }\n\n        const mediaStreams = mediaSource.MediaStreams || [];\n        const videoStream = mediaStreams.filter(function (s) {\n            return s.Type === 'Video';\n        })[0] || {};\n\n        const videoCodec = videoStream.Codec;\n\n        const audioStreamIndex = playbackManager.getAudioStreamIndex(player);\n        const audioStream = playbackManager.audioTracks(player).filter(function (s) {\n            return s.Type === 'Audio' && s.Index === audioStreamIndex;\n        })[0] || {};\n\n        const audioCodec = audioStream.Codec;\n        const audioChannels = audioStream.Channels;\n\n        const videoInfos = [];\n\n        if (videoCodec) {\n            videoInfos.push(videoCodec.toUpperCase());\n        }\n\n        if (videoStream.Profile) {\n            videoInfos.push(videoStream.Profile);\n        }\n\n        if (videoInfos.length) {\n            sessionStats.push({\n                label: globalize.translate('LabelVideoCodec'),\n                value: videoInfos.join(' ')\n            });\n        }\n\n        if (videoStream.BitRate) {\n            sessionStats.push({\n                label: globalize.translate('LabelVideoBitrate'),\n                value: getDisplayBitrate(videoStream.BitRate)\n            });\n        }\n\n        const audioInfos = [];\n\n        if (audioCodec) {\n            audioInfos.push(audioCodec.toUpperCase());\n        }\n\n        if (audioStream.Profile) {\n            audioInfos.push(audioStream.Profile);\n        }\n\n        if (audioInfos.length) {\n            sessionStats.push({\n                label: globalize.translate('LabelAudioCodec'),\n                value: audioInfos.join(' ')\n            });\n        }\n\n        if (audioStream.BitRate) {\n            sessionStats.push({\n                label: globalize.translate('LabelAudioBitrate'),\n                value: getDisplayBitrate(audioStream.BitRate)\n            });\n        }\n\n        if (audioChannels) {\n            sessionStats.push({\n                label: globalize.translate('LabelAudioChannels'),\n                value: audioChannels\n            });\n        }\n\n        if (audioStream.SampleRate) {\n            sessionStats.push({\n                label: globalize.translate('LabelAudioSampleRate'),\n                value: audioStream.SampleRate + ' Hz'\n            });\n        }\n\n        if (audioStream.BitDepth) {\n            sessionStats.push({\n                label: globalize.translate('LabelAudioBitDepth'),\n                value: audioStream.BitDepth\n            });\n        }\n\n        return sessionStats;\n    }\n\n    function getSyncPlayStats() {\n        const syncStats = [];\n        const stats = syncPlayManager.getStats();\n\n        syncStats.push({\n            label: globalize.translate('LabelSyncPlayTimeOffset'),\n            value: stats.TimeOffset + globalize.translate('MillisecondsUnit')\n        });\n\n        syncStats.push({\n            label: globalize.translate('LabelSyncPlayPlaybackDiff'),\n            value: stats.PlaybackDiff + globalize.translate('MillisecondsUnit')\n        });\n\n        syncStats.push({\n            label: globalize.translate('LabelSyncPlaySyncMethod'),\n            value: stats.SyncMethod\n        });\n\n        return syncStats;\n    }\n\n    function getStats(instance, player) {\n        const statsPromise = player.getStats ? player.getStats() : Promise.resolve({});\n        const sessionPromise = getSession(instance, player);\n\n        return Promise.all([statsPromise, sessionPromise]).then(function (responses) {\n            const playerStatsResult = responses[0];\n            const playerStats = playerStatsResult.categories || [];\n            const session = responses[1];\n\n            const displayPlayMethod = playMethodHelper.getDisplayPlayMethod(session);\n\n            const baseCategory = {\n                stats: [],\n                name: 'Playback Info'\n            };\n\n            baseCategory.stats.unshift({\n                label: globalize.translate('LabelPlayMethod'),\n                value: displayPlayMethod\n            });\n\n            baseCategory.stats.unshift({\n                label: globalize.translate('LabelPlayer'),\n                value: player.name\n            });\n\n            const categories = [];\n\n            categories.push(baseCategory);\n\n            for (let i = 0, length = playerStats.length; i < length; i++) {\n                const category = playerStats[i];\n                if (category.type === 'audio') {\n                    category.name = 'Audio Info';\n                } else if (category.type === 'video') {\n                    category.name = 'Video Info';\n                }\n                categories.push(category);\n            }\n\n            if (session.TranscodingInfo) {\n                categories.push({\n                    stats: getTranscodingStats(session, player, displayPlayMethod),\n                    name: displayPlayMethod === 'Transcode' ? 'Transcoding Info' : 'Direct Stream Info'\n                });\n            }\n\n            categories.push({\n                stats: getMediaSourceStats(session, player),\n                name: 'Original Media Info'\n            });\n\n            var apiClient = connectionManager.getApiClient(playbackManager.currentItem(player).ServerId);\n            if (syncPlayManager.isSyncPlayEnabled() && apiClient.isMinServerVersion('10.6.0')) {\n                categories.push({\n                    stats: getSyncPlayStats(),\n                    name: 'SyncPlay Info'\n                });\n            }\n\n            return Promise.resolve(categories);\n        });\n    }\n\n    function renderPlayerStats(instance, player) {\n        const now = new Date().getTime();\n\n        if ((now - (instance.lastRender || 0)) < 700) {\n            return;\n        }\n\n        instance.lastRender = now;\n\n        getStats(instance, player).then(function (stats) {\n            const elem = instance.element;\n            if (!elem) {\n                return;\n            }\n\n            renderStats(elem, stats);\n        });\n    }\n\n    function bindEvents(instance, player) {\n        const localOnTimeUpdate = function () {\n            renderPlayerStats(instance, player);\n        };\n\n        instance.onTimeUpdate = localOnTimeUpdate;\n        events.on(player, 'timeupdate', localOnTimeUpdate);\n    }\n\n    function unbindEvents(instance, player) {\n        const localOnTimeUpdate = instance.onTimeUpdate;\n\n        if (localOnTimeUpdate) {\n            events.off(player, 'timeupdate', localOnTimeUpdate);\n        }\n    }\n\nclass PlayerStats {\n    constructor(options) {\n        this.options = options;\n\n        init(this);\n\n        this.enabled(true);\n    }\n\n    enabled(enabled) {\n        if (enabled == null) {\n            return this._enabled;\n        }\n\n        const options = this.options;\n\n        if (!options) {\n            return;\n        }\n\n        this._enabled = enabled;\n        if (enabled) {\n            this.element.classList.remove('hide');\n            bindEvents(this, options.player);\n        } else {\n            this.element.classList.add('hide');\n            unbindEvents(this, options.player);\n        }\n    }\n\n    toggle() {\n        this.enabled(!this.enabled());\n    }\n\n    destroy() {\n        const options = this.options;\n\n        if (options) {\n            this.options = null;\n            unbindEvents(this, options.player);\n        }\n\n        const elem = this.element;\n        if (elem) {\n            elem.parentNode.removeChild(elem);\n            this.element = null;\n        }\n    }\n}\n\n/* eslint-enable indent */\n\nexport default PlayerStats;\n"]}