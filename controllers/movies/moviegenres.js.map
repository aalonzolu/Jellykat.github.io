{"version":3,"sources":["controllers/movies/moviegenres.js"],"names":["define","_exports","_layoutManager","_loading","_libraryBrowser","_cardBuilder","_lazyLoader","_globalize","_appRouter","_embyButton","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_default","view","params","tabContent","_this","this","getPageData","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","EnableTotalRecordCount","ParentId","topParentId","libraryBrowser","loadSavedQueryValues","getQuery","enableScrollX","layoutManager","desktop","getThumbShape","getPortraitShape","fillItemsContainer","entry","elem","target","id","getAttribute","viewStyle","getCurrentViewStyle","limit","Fields","ImageTypeLimit","EnableImageTypes","Limit","GenreIds","ApiClient","getItems","getCurrentUserId","then","result","cardBuilder","buildCards","Items","itemsContainer","shape","preferThumb","showTitle","scalable","centerText","overlayMoreButton","allowBottomPadding","cardLayout","showYear","length","querySelector","classList","remove","promise","getViewStyles","split","setCurrentViewStyle","saveViewSetting","fullyReload","preRender","renderTab","enableViewSelection","getPromise","loading","show","getGenres","reloadItems","context","html","items","i","item","appRouter","getRouteUrl","parentId","Id","Name","scrollXClass","tv","globalize","translate","innerHTML","lazyLoader","lazyChildren","saveQueryValues","hide"],"mappings":"AAAAA,OAAO,CAAC,UAAW,gBAAiB,UAAW,iBAAkB,cAAe,aAAc,YAAa,YAAa,gBAAgB,SAAUC,SAAUC,eAAgBC,SAAUC,gBAAiBC,aAAcC,YAAaC,WAAYC,WAAYC,aACxP,aAcA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KAZvFG,OAAOC,eAAed,SAAU,aAAc,CAC5Ce,OAAO,IAETf,SAASY,QAKQ,SAAAI,SAAUC,KAAMC,OAAQC,YAAY,IAAAC,MAAAC,KAC/C,SAASC,cACL,IAAMC,IAAMC,mBACRC,SAAWC,KAAKH,KAiBpB,OAfKE,YACDA,SAAWC,KAAKH,KAAO,CACnBI,MAAO,CACHC,OAAQ,WACRC,UAAW,YACXC,iBAAkB,QAClBC,WAAW,EACXC,wBAAwB,GAE5Bf,KAAM,WAEDU,MAAMM,SAAWf,OAAOgB,YACjCC,gBAAAA,QAAeC,qBAAqBb,IAAKE,SAASE,QAG/CF,SAGX,SAASY,WACL,OAAOf,cAAcK,MAGzB,SAASH,mBACL,OAAOW,gBAAAA,QAAeX,iBAAiB,eAS3C,SAASc,gBACL,OAAQC,eAAAA,QAAcC,QAG1B,SAASC,gBACL,OAAOH,gBAAkB,mBAAqB,WAGlD,SAASI,mBACL,OAAOJ,gBAAkB,mBAAqB,WAGlD,IAAMK,mBAAqB,SAArBA,mBAAsBC,OACxB,IAAMC,KAAOD,MAAME,OACbC,GAAKF,KAAKG,aAAa,WACvBC,UAAY7B,MAAK8B,sBACnBC,MAAqB,SAAbF,WAAqC,aAAbA,UAA2B,EAAI,EAE/DX,kBACAa,MAAQ,IAGZ,IACMxB,MAAQ,CACVC,OAAQ,WACRC,UAAW,YACXC,iBAAkB,QAClBC,WAAW,EACXqB,OAAQ,yDACRC,eAAgB,EAChBC,iBARkC,SAAbL,WAAqC,aAAbA,UAA2B,yBAA2B,UASnGM,MAAOJ,MACPK,SAAUT,GACVf,wBAAwB,EACxBC,SAAUf,OAAOgB,aAErBuB,UAAUC,SAASD,UAAUE,mBAAoBhC,OAAOiC,MAAK,SAAUC,QAClD,SAAbZ,UACAa,aAAAA,QAAYC,WAAWF,OAAOG,MAAO,CACjCC,eAAgBpB,KAChBqB,MAAOzB,gBACP0B,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,YAAY,EACZC,mBAAmB,EACnBC,oBAAoB,IAEJ,aAAbvB,UACPa,aAAAA,QAAYC,WAAWF,OAAOG,MAAO,CACjCC,eAAgBpB,KAChBqB,MAAOzB,gBACP0B,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,YAAY,EACZG,YAAY,EACZC,UAAU,IAEM,cAAbzB,UACPa,aAAAA,QAAYC,WAAWF,OAAOG,MAAO,CACjCC,eAAgBpB,KAChBqB,MAAOxB,mBACP0B,WAAW,EACXC,UAAU,EACVC,YAAY,EACZG,YAAY,EACZC,UAAU,IAEM,UAAbzB,WACPa,aAAAA,QAAYC,WAAWF,OAAOG,MAAO,CACjCC,eAAgBpB,KAChBqB,MAAOxB,mBACP2B,UAAU,EACVE,mBAAmB,EACnBC,oBAAoB,EACpBJ,WAAW,EACXE,YAAY,EACZI,UAAU,IAGdb,OAAOG,MAAMW,QAAUhD,MAAM4B,OAC7BpC,WAAWyD,cAAc,oBAAsB7B,GAAK,oBAAoB8B,UAAUC,OAAO,YA2DrG,IAsBIC,QAjBErD,KAAO,GAEbL,KAAK2D,cAAgB,WACjB,MAAO,oCAAoCC,MAAM,MAGrD5D,KAAK6B,oBAAsB,WACvB,OAAO5B,cAAcL,MAGzBI,KAAK6D,oBAAsB,SAAUjC,WACjC3B,cAAcL,KAAOgC,UACrBd,gBAAAA,QAAegD,gBAAgB3D,mBAAoByB,WAjBnC,SAAdmC,cACFhE,MAAKiE,YACLjE,MAAKkE,YAgBLF,IAGJ/D,KAAKkE,qBAAsB,EAG3BlE,KAAKgE,UAAY,WACbN,QA5KJ,SAASS,aACLC,SAAAA,QAAQC,OACR,IAAM/D,MAAQU,WACd,OAAOoB,UAAUkC,UAAUlC,UAAUE,mBAAoBhC,OAyK/C6D,IAGdnE,KAAKiE,UAAY,YAlFjB,SAASM,YAAYC,QAASd,SAC1B,IAAMpD,MAAQU,WACd0C,QAAQnB,MAAK,SAAUC,QAKnB,IAJA,IAAMhB,KAAOgD,QAAQjB,cAAc,UAC/BkB,KAAO,GACLC,MAAQlC,OAAOG,MAEZgC,EAAI,EAAGrB,OAASoB,MAAMpB,OAAQqB,EAAIrB,OAAQqB,IAAK,CACpD,IAAMC,KAAOF,MAAMC,GAcnB,GAZAF,MAAQ,gCACRA,MAAQ,8EACRA,MAAQ,iCAAmCI,WAAAA,QAAUC,YAAYF,KAAM,CACnEJ,QAAS,SACTO,SAAUlF,OAAOgB,cAChB,qFAAuF+D,KAAKI,GAAK,KACtGP,MAAQ,+CACRA,MAAQG,KAAKK,KACbR,MAAQ,QACRA,MAAQ,0DACRA,MAAQ,OACRA,MAAQ,SACJxD,gBAAiB,CACjB,IAAIiE,aAAe,wBAEfhE,eAAAA,QAAciE,KACdD,cAAgB,gEAGpBT,MAAQ,uDAAyDS,aAAe,4CAA8CN,KAAKI,GAAK,UAExIP,MAAQ,6GAA+GG,KAAKI,GAAK,KAGrIP,MAAQ,SACRA,MAAQ,SAGPjC,OAAOG,MAAMW,SACdmB,KAAO,GAEPA,MAAQ,6CACRA,MAAQ,OAASW,WAAAA,QAAUC,UAAU,sBAAwB,QAC7DZ,MAAQ,MAAQW,WAAAA,QAAUC,UAAU,4BAA8B,OAClEZ,MAAQ,UAGZjD,KAAK8D,UAAYb,KACjBc,YAAAA,QAAWC,aAAahE,KAAMF,oBAC9BR,gBAAAA,QAAe2E,gBAAgBtF,mBAAoBG,OACnD8D,SAAAA,QAAQsB,UAiCZnB,CAAYzE,WAAY4D,WA1NpC9E,eAAAQ,uBAAAR,gBACAC,SAAAO,uBAAAP,UACAC,gBAAAM,uBAAAN,iBACAC,aAAAK,uBAAAL,cACAC,YAAAI,uBAAAJ,aACAC,WAAAG,uBAAAH,YACAC,WAAAE,uBAAAF","file":"moviegenres.js","sourcesContent":["import layoutManager from 'layoutManager';\nimport loading from 'loading';\nimport libraryBrowser from 'libraryBrowser';\nimport cardBuilder from 'cardBuilder';\nimport lazyLoader from 'lazyLoader';\nimport globalize from 'globalize';\nimport appRouter from 'appRouter';\nimport 'emby-button';\n\n/* eslint-disable indent */\n\n    export default function (view, params, tabContent) {\n        function getPageData() {\n            const key = getSavedQueryKey();\n            let pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'Movie',\n                        Recursive: true,\n                        EnableTotalRecordCount: false\n                    },\n                    view: 'Poster'\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery() {\n            return getPageData().query;\n        }\n\n        function getSavedQueryKey() {\n            return libraryBrowser.getSavedQueryKey('moviegenres');\n        }\n\n        function getPromise() {\n            loading.show();\n            const query = getQuery();\n            return ApiClient.getGenres(ApiClient.getCurrentUserId(), query);\n        }\n\n        function enableScrollX() {\n            return !layoutManager.desktop;\n        }\n\n        function getThumbShape() {\n            return enableScrollX() ? 'overflowBackdrop' : 'backdrop';\n        }\n\n        function getPortraitShape() {\n            return enableScrollX() ? 'overflowPortrait' : 'portrait';\n        }\n\n        const fillItemsContainer = (entry) => {\n            const elem = entry.target;\n            const id = elem.getAttribute('data-id');\n            const viewStyle = this.getCurrentViewStyle();\n            let limit = viewStyle == 'Thumb' || viewStyle == 'ThumbCard' ? 5 : 9;\n\n            if (enableScrollX()) {\n                limit = 10;\n            }\n\n            const enableImageTypes = viewStyle == 'Thumb' || viewStyle == 'ThumbCard' ? 'Primary,Backdrop,Thumb' : 'Primary';\n            const query = {\n                SortBy: 'SortName',\n                SortOrder: 'Ascending',\n                IncludeItemTypes: 'Movie',\n                Recursive: true,\n                Fields: 'PrimaryImageAspectRatio,MediaSourceCount,BasicSyncInfo',\n                ImageTypeLimit: 1,\n                EnableImageTypes: enableImageTypes,\n                Limit: limit,\n                GenreIds: id,\n                EnableTotalRecordCount: false,\n                ParentId: params.topParentId\n            };\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then(function (result) {\n                if (viewStyle == 'Thumb') {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getThumbShape(),\n                        preferThumb: true,\n                        showTitle: true,\n                        scalable: true,\n                        centerText: true,\n                        overlayMoreButton: true,\n                        allowBottomPadding: false\n                    });\n                } else if (viewStyle == 'ThumbCard') {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getThumbShape(),\n                        preferThumb: true,\n                        showTitle: true,\n                        scalable: true,\n                        centerText: false,\n                        cardLayout: true,\n                        showYear: true\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getPortraitShape(),\n                        showTitle: true,\n                        scalable: true,\n                        centerText: false,\n                        cardLayout: true,\n                        showYear: true\n                    });\n                } else if (viewStyle == 'Poster') {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getPortraitShape(),\n                        scalable: true,\n                        overlayMoreButton: true,\n                        allowBottomPadding: true,\n                        showTitle: true,\n                        centerText: true,\n                        showYear: true\n                    });\n                }\n                if (result.Items.length >= query.Limit) {\n                    tabContent.querySelector('.btnMoreFromGenre' + id + ' .material-icons').classList.remove('hide');\n                }\n            });\n        };\n\n        function reloadItems(context, promise) {\n            const query = getQuery();\n            promise.then(function (result) {\n                const elem = context.querySelector('#items');\n                let html = '';\n                const items = result.Items;\n\n                for (let i = 0, length = items.length; i < length; i++) {\n                    const item = items[i];\n\n                    html += '<div class=\"verticalSection\">';\n                    html += '<div class=\"sectionTitleContainer sectionTitleContainer-cards padded-left\">';\n                    html += '<a is=\"emby-linkbutton\" href=\"' + appRouter.getRouteUrl(item, {\n                        context: 'movies',\n                        parentId: params.topParentId\n                    }) + '\" class=\"more button-flat button-flat-mini sectionTitleTextButton btnMoreFromGenre' + item.Id + '\">';\n                    html += '<h2 class=\"sectionTitle sectionTitle-cards\">';\n                    html += item.Name;\n                    html += '</h2>';\n                    html += '<span class=\"material-icons hide chevron_right\"></span>';\n                    html += '</a>';\n                    html += '</div>';\n                    if (enableScrollX()) {\n                        let scrollXClass = 'scrollX hiddenScrollX';\n\n                        if (layoutManager.tv) {\n                            scrollXClass += 'smoothScrollX padded-top-focusscale padded-bottom-focusscale';\n                        }\n\n                        html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer ' + scrollXClass + ' lazy padded-left padded-right\" data-id=\"' + item.Id + '\">';\n                    } else {\n                        html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer vertical-wrap lazy padded-left padded-right\" data-id=\"' + item.Id + '\">';\n                    }\n\n                    html += '</div>';\n                    html += '</div>';\n                }\n\n                if (!result.Items.length) {\n                    html = '';\n\n                    html += '<div class=\"noItemsMessage centerMessage\">';\n                    html += '<h1>' + globalize.translate('MessageNothingHere') + '</h1>';\n                    html += '<p>' + globalize.translate('MessageNoGenresAvailable') + '</p>';\n                    html += '</div>';\n                }\n\n                elem.innerHTML = html;\n                lazyLoader.lazyChildren(elem, fillItemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(), query);\n                loading.hide();\n            });\n        }\n\n        const fullyReload = () => {\n            this.preRender();\n            this.renderTab();\n        };\n\n        const data = {};\n\n        this.getViewStyles = function () {\n            return 'Poster,PosterCard,Thumb,ThumbCard'.split(',');\n        };\n\n        this.getCurrentViewStyle = function () {\n            return getPageData().view;\n        };\n\n        this.setCurrentViewStyle = function (viewStyle) {\n            getPageData().view = viewStyle;\n            libraryBrowser.saveViewSetting(getSavedQueryKey(), viewStyle);\n            fullyReload();\n        };\n\n        this.enableViewSelection = true;\n        let promise;\n\n        this.preRender = function () {\n            promise = getPromise();\n        };\n\n        this.renderTab = function () {\n            reloadItems(tabContent, promise);\n        };\n    }\n\n/* eslint-enable indent */\n"]}