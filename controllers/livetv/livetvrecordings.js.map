{"version":3,"sources":["controllers/livetv/livetvrecordings.js"],"names":["define","_exports","_loading","_cardBuilder","_imageLoader","_livetvcomponents","_listViewStyle","_embyItemscontainer","_interopRequireDefault","obj","__esModule","default","renderRecordings","elem","recordings","cardOptions","scrollX","length","classList","remove","add","recordingItems","querySelector","innerHTML","cardBuilder","getCardsHtml","Object","assign","items","shape","defaultShape","showTitle","showParentTitle","coverImage","cardLayout","centerText","allowBottomPadding","preferThumb","overlayText","imageLoader","lazyChildren","onMoreClick","e","type","this","getAttribute","serverId","ApiClient","Dashboard","navigate","defineProperty","value","_default","view","params","tabContent","enableFullRender","Date","getTime","lastFullRender","foldersPromise","latestPromise","moreButtons","querySelectorAll","i","addEventListener","preRender","getLiveTvRecordings","UserId","getCurrentUserId","Limit","Fields","EnableTotalRecordCount","EnableImageTypes","getRecordingFolders","renderTab","loading","show","renderLatestRecordings","context","promise","then","result","Items","showYear","lines","hide","renderRecordingFolders"],"mappings":"AAAAA,OAAO,CAAC,UAAW,UAAW,cAAe,cAAe,2BAA4B,gBAAiB,wBAAwB,SAAUC,SAAUC,SAAUC,aAAcC,aAAcC,kBAAmBC,eAAgBC,qBAC5N,aAUA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KAJzF,SAASG,iBAAiBC,KAAMC,WAAYC,YAAaC,SACrD,GAAKH,KAAL,CAIIC,WAAWG,OACXJ,KAAKK,UAAUC,OAAO,QAEtBN,KAAKK,UAAUE,IAAI,QAGvB,IAAMC,eAAiBR,KAAKS,cAAc,mBAEtCN,SACAK,eAAeH,UAAUE,IAAI,WAC7BC,eAAeH,UAAUE,IAAI,iBAC7BC,eAAeH,UAAUC,OAAO,mBAEhCE,eAAeH,UAAUC,OAAO,WAChCE,eAAeH,UAAUC,OAAO,iBAChCE,eAAeH,UAAUE,IAAI,kBAGjCC,eAAeE,UAAYC,aAAAA,QAAYC,aAAaC,OAAOC,OAAO,CAC9DC,MAAOd,WACPe,MAAOb,QAAU,eAAiB,OAClCc,aAAcd,QAAU,mBAAqB,WAC7Ce,WAAW,EACXC,iBAAiB,EACjBC,YAAY,EACZC,YAAY,EACZC,YAAY,EACZC,oBAAqBpB,QACrBqB,YAAa,OACbC,aAAa,GACdvB,aAAe,KAClBwB,aAAAA,QAAYC,aAAanB,iBAsB7B,SAASoB,YAAYC,GACjB,IAAMC,KAAOC,KAAKC,aAAa,aACzBC,SAAWC,UAAUD,WAE3B,OAAQH,MACJ,IAAK,SACDK,UAAUC,SAAS,sCAAwCH,WApErEpB,OAAOwB,eAAejD,SAAU,aAAc,CAC5CkD,OAAO,IAETlD,SAASU,QAqEI,SAAAyC,SAAUC,KAAMC,OAAQC,YACnC,SAASC,mBACL,OAAO,IAAIC,MAAOC,UAAYC,eAAiB,IASnD,IANA,IAAIC,eACAC,cAEAF,eAAiB,EACfG,YAAcP,WAAWQ,iBAAiB,SAEvCC,EAAI,EAAG/C,OAAS6C,YAAY7C,OAAQ+C,EAAI/C,OAAQ+C,IACrDF,YAAYE,GAAGC,iBAAiB,QAASxB,aALhCG,KAQRsB,UAAY,WACTV,qBACAK,cAAgBd,UAAUoB,oBAAoB,CAC1CC,OAAQpB,UAAUqB,mBAClBC,MAAO,GACPC,OAAQ,kDACRC,wBAAwB,EACxBC,iBAAkB,2BAEtBb,eAAiBb,UAAU2B,oBAAoB1B,UAAUqB,sBAjBpDzB,KAqBR+B,UAAY,WACTnB,qBACAoB,SAAAA,QAAQC,OA3DpB,SAASC,uBAAuBC,QAASC,SACrCA,QAAQC,MAAK,SAAUC,QACnBtE,iBAAiBmE,QAAQzD,cAAc,qBAAsB4D,OAAOC,MAAO,CACvEC,UAAU,EACVC,MAAO,IACR,GACHT,SAAAA,QAAQU,UAsDJR,CAAuBvB,WAAYM,eAlD/C,SAAS0B,uBAAuBR,QAASC,SACrCA,QAAQC,MAAK,SAAUC,QACnBtE,iBAAiBmE,QAAQzD,cAAc,qBAAsB4D,OAAOC,MAAO,CACvEC,UAAU,EACVpD,iBAAiB,IAClB,MA8CCuD,CAAuBhC,WAAYK,gBACnCD,gBAAiB,IAAIF,MAAOC,aA5GxCxD,SAAAM,uBAAAN,UACAC,aAAAK,uBAAAL,cACAC,aAAAI,uBAAAJ","file":"livetvrecordings.js","sourcesContent":["import loading from 'loading';\nimport cardBuilder from 'cardBuilder';\nimport imageLoader from 'imageLoader';\nimport 'scripts/livetvcomponents';\nimport 'listViewStyle';\nimport 'emby-itemscontainer';\n\nfunction renderRecordings(elem, recordings, cardOptions, scrollX) {\n    if (!elem) {\n        return;\n    }\n\n    if (recordings.length) {\n        elem.classList.remove('hide');\n    } else {\n        elem.classList.add('hide');\n    }\n\n    const recordingItems = elem.querySelector('.recordingItems');\n\n    if (scrollX) {\n        recordingItems.classList.add('scrollX');\n        recordingItems.classList.add('hiddenScrollX');\n        recordingItems.classList.remove('vertical-wrap');\n    } else {\n        recordingItems.classList.remove('scrollX');\n        recordingItems.classList.remove('hiddenScrollX');\n        recordingItems.classList.add('vertical-wrap');\n    }\n\n    recordingItems.innerHTML = cardBuilder.getCardsHtml(Object.assign({\n        items: recordings,\n        shape: scrollX ? 'autooverflow' : 'auto',\n        defaultShape: scrollX ? 'overflowBackdrop' : 'backdrop',\n        showTitle: true,\n        showParentTitle: true,\n        coverImage: true,\n        cardLayout: false,\n        centerText: true,\n        allowBottomPadding: !scrollX,\n        preferThumb: 'auto',\n        overlayText: false\n    }, cardOptions || {}));\n    imageLoader.lazyChildren(recordingItems);\n}\n\nfunction renderLatestRecordings(context, promise) {\n    promise.then(function (result) {\n        renderRecordings(context.querySelector('#latestRecordings'), result.Items, {\n            showYear: true,\n            lines: 2\n        }, false);\n        loading.hide();\n    });\n}\n\nfunction renderRecordingFolders(context, promise) {\n    promise.then(function (result) {\n        renderRecordings(context.querySelector('#recordingFolders'), result.Items, {\n            showYear: false,\n            showParentTitle: false\n        }, false);\n    });\n}\n\nfunction onMoreClick(e) {\n    const type = this.getAttribute('data-type');\n    const serverId = ApiClient.serverId();\n\n    switch (type) {\n        case 'latest':\n            Dashboard.navigate('list.html?type=Recordings&serverId=' + serverId);\n    }\n}\n\nexport default function (view, params, tabContent) {\n    function enableFullRender() {\n        return new Date().getTime() - lastFullRender > 300000;\n    }\n\n    let foldersPromise;\n    let latestPromise;\n    const self = this;\n    let lastFullRender = 0;\n    const moreButtons = tabContent.querySelectorAll('.more');\n\n    for (let i = 0, length = moreButtons.length; i < length; i++) {\n        moreButtons[i].addEventListener('click', onMoreClick);\n    }\n\n    self.preRender = function () {\n        if (enableFullRender()) {\n            latestPromise = ApiClient.getLiveTvRecordings({\n                UserId: Dashboard.getCurrentUserId(),\n                Limit: 12,\n                Fields: 'CanDelete,PrimaryImageAspectRatio,BasicSyncInfo',\n                EnableTotalRecordCount: false,\n                EnableImageTypes: 'Primary,Thumb,Backdrop'\n            });\n            foldersPromise = ApiClient.getRecordingFolders(Dashboard.getCurrentUserId());\n        }\n    };\n\n    self.renderTab = function () {\n        if (enableFullRender()) {\n            loading.show();\n            renderLatestRecordings(tabContent, latestPromise);\n            renderRecordingFolders(tabContent, foldersPromise);\n            lastFullRender = new Date().getTime();\n        }\n    };\n}\n"]}