{"version":3,"sources":["controllers/livetv/livetvschedule.js"],"names":["define","_exports","_layoutManager","_cardBuilder","_imageLoader","_loading","_livetvcomponents","_embyButton","_embyItemscontainer","_interopRequireDefault","obj","__esModule","default","enableScrollX","layoutManager","desktop","Object","defineProperty","value","_default","view","params","tabContent","activeRecordingsPromise","upcomingRecordingsPromise","self","this","querySelector","addEventListener","preRender","renderTab","ApiClient","getLiveTvRecordings","UserId","Dashboard","getCurrentUserId","IsInProgress","Fields","EnableTotalRecordCount","EnableImageTypes","getLiveTvTimers","IsActive","IsScheduled","loading","show","renderActiveRecordings","context","promise","then","result","renderRecordings","elem","recordings","cardOptions","length","classList","remove","add","recordingItems","tv","innerHTML","cardBuilder","getCardsHtml","assign","items","shape","showTitle","showParentTitle","coverImage","cardLayout","centerText","allowBottomPadding","preferThumb","imageLoader","lazyChildren","Items","defaultShape","showParentTitleOrTitle","showAirTime","showAirEndTime","showChannelName","overlayText","overlayMoreButton","renderUpcomingRecordings","renderTimers","timers","options","LiveTvHelpers","getTimersHtml","html","hide"],"mappings":"AAAAA,OAAO,CAAC,UAAW,gBAAiB,cAAe,cAAe,UAAW,2BAA4B,cAAe,wBAAwB,SAAUC,SAAUC,eAAgBC,aAAcC,aAAcC,SAAUC,kBAAmBC,YAAaC,qBACxP,aAWA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KAJzF,SAASG,gBACL,OAAQC,eAAAA,QAAcC,QANxBC,OAAOC,eAAehB,SAAU,aAAc,CAC5CiB,OAAO,IAETjB,SAASW,QAyFI,SAAAO,SAAUC,KAAMC,OAAQC,YACnC,IAAIC,wBACAC,0BACEC,KAAOC,KACbJ,WAAWK,cAAc,uCAAuCC,iBAAiB,kBAAkB,WAC/FH,KAAKI,YACLJ,KAAKK,eAGTL,KAAKI,UAAY,WACbN,wBAA0BQ,UAAUC,oBAAoB,CACpDC,OAAQC,UAAUC,mBAClBC,cAAc,EACdC,OAAQ,kDACRC,wBAAwB,EACxBC,iBAAkB,2BAEtBf,0BAA4BO,UAAUS,gBAAgB,CAClDC,UAAU,EACVC,aAAa,KAIrBjB,KAAKK,UAAY,WACba,SAAAA,QAAQC,OAhEhB,SAASC,uBAAuBC,QAASC,SACrCA,QAAQC,MAAK,SAAUC,SA5C3B,SAASC,iBAAiBC,KAAMC,WAAYC,aACpCD,WAAWE,OACXH,KAAKI,UAAUC,OAAO,QAEtBL,KAAKI,UAAUE,IAAI,QAGvB,IAAMC,eAAiBP,KAAKxB,cAAc,mBAEtCd,iBACA6C,eAAeH,UAAUE,IAAI,WAEzB3C,eAAAA,QAAc6C,IACdD,eAAeH,UAAUE,IAAI,iBAGjCC,eAAeH,UAAUE,IAAI,iBAC7BC,eAAeH,UAAUC,OAAO,mBAEhCE,eAAeH,UAAUC,OAAO,WAChCE,eAAeH,UAAUC,OAAO,iBAChCE,eAAeH,UAAUC,OAAO,iBAChCE,eAAeH,UAAUE,IAAI,kBAGjCC,eAAeE,UAAYC,aAAAA,QAAYC,aAAa9C,OAAO+C,OAAO,CAC9DC,MAAOZ,WACPa,MAAOpD,gBAAkB,eAAiB,OAC1CqD,WAAW,EACXC,iBAAiB,EACjBC,YAAY,EACZC,YAAY,EACZC,YAAY,EACZC,oBAAqB1D,gBACrB2D,YAAa,QACdnB,aAAe,KAClBoB,aAAAA,QAAYC,aAAahB,gBASrBR,CAAiBJ,QAAQnB,cAAc,qBAAsBsB,OAAO0B,MAAO,CACvEV,MAAOpD,gBAAkB,eAAiB,OAC1C+D,aAPD/D,gBAAkB,mBAAqB,WAQtCsD,iBAAiB,EACjBU,wBAAwB,EACxBX,WAAW,EACXY,aAAa,EACbC,gBAAgB,EAChBC,iBAAiB,EACjBZ,YAAY,EACZa,aAAa,EACbC,mBAAmB,OAoDvBrC,CAAuBvB,WAAYC,yBAhC3C,SAAS4D,yBAAyBrC,QAASC,SACvCA,QAAQC,MAAK,SAAUC,SAhB3B,SAASmC,aAAatC,QAASuC,OAAQC,SACnCC,cAAcC,cAAcH,OAAQC,SAAStC,MAAK,SAAUyC,MACxD,IAAMtC,KAAOL,QAET2C,KACAtC,KAAKI,UAAUC,OAAO,QAEtBL,KAAKI,UAAUE,IAAI,QAGvBN,KAAKxB,cAAc,mBAAmBiC,UAAY6B,KAClDhB,aAAAA,QAAYC,aAAavB,SAMzBiC,CAAatC,QAAQnB,cAAc,uBAAwBsB,OAAO0B,OAClEhC,SAAAA,QAAQ+C,UA8BRP,CAAyB7D,WAAYE,6BAzH7CtB,eAAAO,uBAAAP,gBACAC,aAAAM,uBAAAN,cACAC,aAAAK,uBAAAL,cACAC,SAAAI,uBAAAJ","file":"livetvschedule.js","sourcesContent":["import layoutManager from 'layoutManager';\nimport cardBuilder from 'cardBuilder';\nimport imageLoader from 'imageLoader';\nimport loading from 'loading';\nimport 'scripts/livetvcomponents';\nimport 'emby-button';\nimport 'emby-itemscontainer';\n\nfunction enableScrollX() {\n    return !layoutManager.desktop;\n}\n\nfunction renderRecordings(elem, recordings, cardOptions) {\n    if (recordings.length) {\n        elem.classList.remove('hide');\n    } else {\n        elem.classList.add('hide');\n    }\n\n    const recordingItems = elem.querySelector('.recordingItems');\n\n    if (enableScrollX()) {\n        recordingItems.classList.add('scrollX');\n\n        if (layoutManager.tv) {\n            recordingItems.classList.add('smoothScrollX');\n        }\n\n        recordingItems.classList.add('hiddenScrollX');\n        recordingItems.classList.remove('vertical-wrap');\n    } else {\n        recordingItems.classList.remove('scrollX');\n        recordingItems.classList.remove('smoothScrollX');\n        recordingItems.classList.remove('hiddenScrollX');\n        recordingItems.classList.add('vertical-wrap');\n    }\n\n    recordingItems.innerHTML = cardBuilder.getCardsHtml(Object.assign({\n        items: recordings,\n        shape: enableScrollX() ? 'autooverflow' : 'auto',\n        showTitle: true,\n        showParentTitle: true,\n        coverImage: true,\n        cardLayout: false,\n        centerText: true,\n        allowBottomPadding: !enableScrollX(),\n        preferThumb: 'auto'\n    }, cardOptions || {}));\n    imageLoader.lazyChildren(recordingItems);\n}\n\nfunction getBackdropShape() {\n    return enableScrollX() ? 'overflowBackdrop' : 'backdrop';\n}\n\nfunction renderActiveRecordings(context, promise) {\n    promise.then(function (result) {\n        renderRecordings(context.querySelector('#activeRecordings'), result.Items, {\n            shape: enableScrollX() ? 'autooverflow' : 'auto',\n            defaultShape: getBackdropShape(),\n            showParentTitle: false,\n            showParentTitleOrTitle: true,\n            showTitle: false,\n            showAirTime: true,\n            showAirEndTime: true,\n            showChannelName: true,\n            coverImage: true,\n            overlayText: false,\n            overlayMoreButton: true\n        });\n    });\n}\n\nfunction renderTimers(context, timers, options) {\n    LiveTvHelpers.getTimersHtml(timers, options).then(function (html) {\n        const elem = context;\n\n        if (html) {\n            elem.classList.remove('hide');\n        } else {\n            elem.classList.add('hide');\n        }\n\n        elem.querySelector('.recordingItems').innerHTML = html;\n        imageLoader.lazyChildren(elem);\n    });\n}\n\nfunction renderUpcomingRecordings(context, promise) {\n    promise.then(function (result) {\n        renderTimers(context.querySelector('#upcomingRecordings'), result.Items);\n        loading.hide();\n    });\n}\n\nexport default function (view, params, tabContent) {\n    let activeRecordingsPromise;\n    let upcomingRecordingsPromise;\n    const self = this;\n    tabContent.querySelector('#upcomingRecordings .recordingItems').addEventListener('timercancelled', function () {\n        self.preRender();\n        self.renderTab();\n    });\n\n    self.preRender = function () {\n        activeRecordingsPromise = ApiClient.getLiveTvRecordings({\n            UserId: Dashboard.getCurrentUserId(),\n            IsInProgress: true,\n            Fields: 'CanDelete,PrimaryImageAspectRatio,BasicSyncInfo',\n            EnableTotalRecordCount: false,\n            EnableImageTypes: 'Primary,Thumb,Backdrop'\n        });\n        upcomingRecordingsPromise = ApiClient.getLiveTvTimers({\n            IsActive: false,\n            IsScheduled: true\n        });\n    };\n\n    self.renderTab = function () {\n        loading.show();\n        renderActiveRecordings(tabContent, activeRecordingsPromise);\n        renderUpcomingRecordings(tabContent, upcomingRecordingsPromise);\n    };\n}\n"]}