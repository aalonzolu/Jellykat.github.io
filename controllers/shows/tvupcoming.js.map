{"version":3,"sources":["controllers/shows/tvupcoming.js"],"names":["define","_exports","_layoutManager","_loading","_datetime","_cardBuilder","_imageLoader","_globalize","_scrollStyles","_embyItemscontainer","_interopRequireDefault","obj","__esModule","default","enableScrollX","layoutManager","desktop","Object","defineProperty","value","_default","view","params","tabContent","upcomingPromise","this","preRender","getUpcomingPromise","context","loading","show","query","Limit","Fields","UserId","ApiClient","getCurrentUserId","ImageTypeLimit","EnableImageTypes","EnableTotalRecordCount","ParentId","topParentId","getJSON","getUrl","renderTab","loadUpcoming","promise","then","result","items","Items","length","querySelector","style","display","renderUpcoming","elem","groups","currentGroupName","currentGroup","i","item","dateText","PremiereDate","premiereDate","datetime","parseISO8601Date","isRelativeDay","globalize","translate","toLocaleDateString","weekday","month","day","err","console","error","push","name","html","group","allowBottomPadding","scrollXClass","tv","cardBuilder","getCardsHtml","showLocationTypeIndicator","shape","showTitle","preferThumb","lazy","showDetailsMenu","centerText","showParentTitle","overlayText","cardLayout","overlayMoreButton","missingIndicator","innerHTML","imageLoader","lazyChildren","hide"],"mappings":"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","file":"tvupcoming.js","sourcesContent":["import layoutManager from 'layoutManager';\nimport loading from 'loading';\nimport datetime from 'datetime';\nimport cardBuilder from 'cardBuilder';\nimport imageLoader from 'imageLoader';\nimport globalize from 'globalize';\nimport 'scrollStyles';\nimport 'emby-itemscontainer';\n\n/* eslint-disable indent */\n\n    function getUpcomingPromise(context, params) {\n        loading.show();\n        const query = {\n            Limit: 48,\n            Fields: 'AirTime,UserData',\n            UserId: ApiClient.getCurrentUserId(),\n            ImageTypeLimit: 1,\n            EnableImageTypes: 'Primary,Backdrop,Banner,Thumb',\n            EnableTotalRecordCount: false\n        };\n        query.ParentId = params.topParentId;\n        return ApiClient.getJSON(ApiClient.getUrl('Shows/Upcoming', query));\n    }\n\n    function loadUpcoming(context, params, promise) {\n        promise.then(function (result) {\n            const items = result.Items;\n\n            if (items.length) {\n                context.querySelector('.noItemsMessage').style.display = 'none';\n            } else {\n                context.querySelector('.noItemsMessage').style.display = 'block';\n            }\n\n            renderUpcoming(context.querySelector('#upcomingItems'), items);\n            loading.hide();\n        });\n    }\n\n    function enableScrollX() {\n        return !layoutManager.desktop;\n    }\n\n    function getThumbShape() {\n        return enableScrollX() ? 'overflowBackdrop' : 'backdrop';\n    }\n\n    function renderUpcoming(elem, items) {\n        const groups = [];\n        let currentGroupName = '';\n        let currentGroup = [];\n\n        for (let i = 0, length = items.length; i < length; i++) {\n            const item = items[i];\n            let dateText = '';\n\n            if (item.PremiereDate) {\n                try {\n                    const premiereDate = datetime.parseISO8601Date(item.PremiereDate, true);\n                    dateText = datetime.isRelativeDay(premiereDate, -1) ? globalize.translate('Yesterday') : datetime.toLocaleDateString(premiereDate, {\n                        weekday: 'long',\n                        month: 'short',\n                        day: 'numeric'\n                    });\n                } catch (err) {\n                    console.error('error parsing timestamp for upcoming tv shows');\n                }\n            }\n\n            if (dateText != currentGroupName) {\n                if (currentGroup.length) {\n                    groups.push({\n                        name: currentGroupName,\n                        items: currentGroup\n                    });\n                }\n\n                currentGroupName = dateText;\n                currentGroup = [item];\n            } else {\n                currentGroup.push(item);\n            }\n        }\n\n        let html = '';\n\n        for (let i = 0, length = groups.length; i < length; i++) {\n            const group = groups[i];\n            html += '<div class=\"verticalSection\">';\n            html += '<h2 class=\"sectionTitle sectionTitle-cards padded-left\">' + group.name + '</h2>';\n            let allowBottomPadding = true;\n\n            if (enableScrollX()) {\n                allowBottomPadding = false;\n                let scrollXClass = 'scrollX hiddenScrollX';\n\n                if (layoutManager.tv) {\n                    scrollXClass += ' smoothScrollX';\n                }\n\n                html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer ' + scrollXClass + ' padded-left padded-right\">';\n            } else {\n                html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer vertical-wrap padded-left padded-right\">';\n            }\n\n            html += cardBuilder.getCardsHtml({\n                items: group.items,\n                showLocationTypeIndicator: false,\n                shape: getThumbShape(),\n                showTitle: true,\n                preferThumb: true,\n                lazy: true,\n                showDetailsMenu: true,\n                centerText: true,\n                showParentTitle: true,\n                overlayText: false,\n                allowBottomPadding: allowBottomPadding,\n                cardLayout: false,\n                overlayMoreButton: true,\n                missingIndicator: false\n            });\n            html += '</div>';\n            html += '</div>';\n        }\n\n        elem.innerHTML = html;\n        imageLoader.lazyChildren(elem);\n    }\n\n    export default function (view, params, tabContent) {\n        let upcomingPromise;\n        const self = this;\n\n        self.preRender = function () {\n            upcomingPromise = getUpcomingPromise(view, params);\n        };\n\n        self.renderTab = function () {\n            loadUpcoming(tabContent, params, upcomingPromise);\n        };\n    }\n\n/* eslint-enable indent */\n"]}