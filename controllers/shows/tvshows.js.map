{"version":3,"sources":["controllers/shows/tvshows.js"],"names":["define","_require","_exports","_loading","_events","_libraryBrowser","_imageLoader","_listView","_cardBuilder","_alphaPicker","userSettings","_globalize","_embyItemscontainer","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","value","_default","view","params","tabContent","getPageData","context","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","ImageTypeLimit","EnableImageTypes","StartIndex","libraryBrowser","getSavedView","libraryPageSize","ParentId","topParentId","loadSavedQueryValues","getQuery","savedQueryKey","onViewStyleChange","viewStyle","self","getCurrentViewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","page","loading","show","isLoading","ApiClient","getItems","getCurrentUserId","then","result","onNextPageClick","Limit","onPreviousPageClick","Math","max","html","window","scrollTo","updateFilterControls","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","cardBuilder","getCardsHtml","items","Items","shape","preferThumb","overlayMoreButton","showTitle","centerText","cardLayout","showYear","preferBanner","listView","getListViewHtml","sortBy","lazy","elems","querySelectorAll","i","length","addEventListener","imageLoader","lazyChildren","saveQueryValues","hide","Promise","_resolve","_reject","imported","_ref","autoFocus","alphaPicker","NameStartsWithOrGreater","this","showFilterMenu","_ref2","filterDialog","filterDialogFactory","mode","serverId","events","on","initPage","alphaPickerElement","e","newValue","detail","AlphaPicker","element","valueChangeEvent","showSortMenu","name","globalize","translate","id","callback","button","target","btnSelectView","showLayoutMenu","split","saveViewSetting","renderTab","destroy"],"mappings":"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","file":"tvshows.js","sourcesContent":["import loading from 'loading';\nimport events from 'events';\nimport libraryBrowser from 'libraryBrowser';\nimport imageLoader from 'imageLoader';\nimport listView from 'listView';\nimport cardBuilder from 'cardBuilder';\nimport AlphaPicker from 'alphaPicker';\nimport * as userSettings from 'userSettings';\nimport globalize from 'globalize';\nimport 'emby-itemscontainer';\n\n/* eslint-disable indent */\n\n    export default function (view, params, tabContent) {\n        function getPageData(context) {\n            const key = getSavedQueryKey(context);\n            let pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'Series',\n                        Recursive: true,\n                        Fields: 'PrimaryImageAspectRatio,BasicSyncInfo',\n                        ImageTypeLimit: 1,\n                        EnableImageTypes: 'Primary,Backdrop,Banner,Thumb',\n                        StartIndex: 0\n                    },\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n\n                if (userSettings.libraryPageSize() > 0) {\n                    pageData.query['Limit'] = userSettings.libraryPageSize();\n                }\n\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery(context) {\n            return getPageData(context).query;\n        }\n\n        function getSavedQueryKey(context) {\n            if (!context.savedQueryKey) {\n                context.savedQueryKey = libraryBrowser.getSavedQueryKey('series');\n            }\n\n            return context.savedQueryKey;\n        }\n\n        function onViewStyleChange() {\n            const viewStyle = self.getCurrentViewStyle();\n            const itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            if (viewStyle == 'List') {\n                itemsContainer.classList.add('vertical-list');\n                itemsContainer.classList.remove('vertical-wrap');\n            } else {\n                itemsContainer.classList.remove('vertical-list');\n                itemsContainer.classList.add('vertical-wrap');\n            }\n\n            itemsContainer.innerHTML = '';\n        }\n\n        function reloadItems(page) {\n            loading.show();\n            isLoading = true;\n            const query = getQuery(page);\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then(function (result) {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex += query.Limit;\n                    }\n                    reloadItems(tabContent);\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex = Math.max(0, query.StartIndex - query.Limit);\n                    }\n                    reloadItems(tabContent);\n                }\n\n                window.scrollTo(0, 0);\n                updateFilterControls(page);\n                let html;\n                const pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                const viewStyle = self.getCurrentViewStyle();\n                if (viewStyle == 'Thumb') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        preferThumb: true,\n                        context: 'tvshows',\n                        overlayMoreButton: true,\n                        showTitle: true,\n                        centerText: true\n                    });\n                } else if (viewStyle == 'ThumbCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        preferThumb: true,\n                        context: 'tvshows',\n                        cardLayout: true,\n                        showTitle: true,\n                        showYear: true,\n                        centerText: true\n                    });\n                } else if (viewStyle == 'Banner') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'banner',\n                        preferBanner: true,\n                        context: 'tvshows'\n                    });\n                } else if (viewStyle == 'List') {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        context: 'tvshows',\n                        sortBy: query.SortBy\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'portrait',\n                        context: 'tvshows',\n                        showTitle: true,\n                        showYear: true,\n                        centerText: true,\n                        cardLayout: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'portrait',\n                        context: 'tvshows',\n                        centerText: true,\n                        lazy: true,\n                        overlayMoreButton: true,\n                        showTitle: true,\n                        showYear: true\n                    });\n                }\n\n                let elems = tabContent.querySelectorAll('.paging');\n\n                for (let i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll('.btnNextPage');\n                for (let i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll('.btnPreviousPage');\n                for (let i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onPreviousPageClick);\n                }\n\n                const itemsContainer = tabContent.querySelector('.itemsContainer');\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(page), query);\n                loading.hide();\n                isLoading = false;\n\n                import('autoFocuser').then(({default: autoFocuser}) => {\n                    autoFocuser.autoFocus(page);\n                });\n            });\n        }\n\n        function updateFilterControls(tabContent) {\n            const query = getQuery(tabContent);\n            self.alphaPicker.value(query.NameStartsWithOrGreater);\n        }\n\n        const self = this;\n        const data = {};\n        let isLoading = false;\n\n        self.showFilterMenu = function () {\n            import('components/filterdialog/filterdialog').then(({default: filterDialogFactory}) => {\n                const filterDialog = new filterDialogFactory({\n                    query: getQuery(tabContent),\n                    mode: 'series',\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, 'filterchange', function () {\n                    getQuery(tabContent).StartIndex = 0;\n                    reloadItems(tabContent);\n                });\n                filterDialog.show();\n            });\n        };\n\n        self.getCurrentViewStyle = function () {\n            return getPageData(tabContent).view;\n        };\n\n        function initPage(tabContent) {\n            const alphaPickerElement = tabContent.querySelector('.alphaPicker');\n            const itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            alphaPickerElement.addEventListener('alphavaluechanged', function (e) {\n                const newValue = e.detail.value;\n                const query = getQuery(tabContent);\n                query.NameStartsWithOrGreater = newValue;\n                query.StartIndex = 0;\n                reloadItems(tabContent);\n            });\n            self.alphaPicker = new AlphaPicker({\n                element: alphaPickerElement,\n                valueChangeEvent: 'click'\n            });\n\n            tabContent.querySelector('.alphaPicker').classList.add('alphabetPicker-right');\n            alphaPickerElement.classList.add('alphaPicker-fixed-right');\n            itemsContainer.classList.add('padded-right-withalphapicker');\n\n            tabContent.querySelector('.btnFilter').addEventListener('click', function () {\n                self.showFilterMenu();\n            });\n            tabContent.querySelector('.btnSort').addEventListener('click', function (e) {\n                libraryBrowser.showSortMenu({\n                    items: [{\n                        name: globalize.translate('OptionNameSort'),\n                        id: 'SortName'\n                    }, {\n                        name: globalize.translate('OptionImdbRating'),\n                        id: 'CommunityRating,SortName'\n                    }, {\n                        name: globalize.translate('OptionDateAdded'),\n                        id: 'DateCreated,SortName'\n                    }, {\n                        name: globalize.translate('OptionDatePlayed'),\n                        id: 'DatePlayed,SortName'\n                    }, {\n                        name: globalize.translate('OptionParentalRating'),\n                        id: 'OfficialRating,SortName'\n                    }, {\n                        name: globalize.translate('OptionReleaseDate'),\n                        id: 'PremiereDate,SortName'\n                    }],\n                    callback: function () {\n                        getQuery(tabContent).StartIndex = 0;\n                        reloadItems(tabContent);\n                    },\n                    query: getQuery(tabContent),\n                    button: e.target\n                });\n            });\n            const btnSelectView = tabContent.querySelector('.btnSelectView');\n            btnSelectView.addEventListener('click', function (e) {\n                libraryBrowser.showLayoutMenu(e.target, self.getCurrentViewStyle(), 'Banner,List,Poster,PosterCard,Thumb,ThumbCard'.split(','));\n            });\n            btnSelectView.addEventListener('layoutchange', function (e) {\n                const viewStyle = e.detail.viewStyle;\n                getPageData(tabContent).view = viewStyle;\n                libraryBrowser.saveViewSetting(getSavedQueryKey(tabContent), viewStyle);\n                getQuery(tabContent).StartIndex = 0;\n                onViewStyleChange();\n                reloadItems(tabContent);\n            });\n        }\n\n        initPage(tabContent);\n        onViewStyleChange();\n\n        self.renderTab = function () {\n            reloadItems(tabContent);\n            updateFilterControls(tabContent);\n        };\n\n        self.destroy = function () {};\n    }\n\n/* eslint-enable indent */\n"]}