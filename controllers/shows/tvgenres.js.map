{"version":3,"sources":["controllers/shows/tvgenres.js"],"names":["define","_exports","_layoutManager","_loading","_libraryBrowser","_cardBuilder","_lazyLoader","_globalize","_appRouter","_embyButton","_interopRequireDefault","obj","__esModule","default","_arrayLikeToArray","arr","len","length","i","arr2","Array","Object","defineProperty","value","_default","view","params","tabContent","getPageData","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","EnableTotalRecordCount","ParentId","topParentId","libraryBrowser","loadSavedQueryValues","getQuery","enableScrollX","layoutManager","desktop","getThumbShape","getPortraitShape","fillItemsContainer","entry","elem","target","id","getAttribute","viewStyle","self","getCurrentViewStyle","limit","Fields","ImageTypeLimit","EnableImageTypes","Limit","GenreIds","ApiClient","getItems","getCurrentUserId","then","result","cardBuilder","buildCards","Items","itemsContainer","shape","preferThumb","showTitle","scalable","centerText","overlayMoreButton","allowBottomPadding","cardLayout","showYear","querySelector","classList","remove","reloadItems","context","promise","_step","html","_iterator","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","isArray","_unsupportedIterableToArray","minLen","n","prototype","toString","call","slice","constructor","name","from","test","F","s","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","item","appRouter","getRouteUrl","parentId","Id","Name","scrollXClass","tv","globalize","translate","innerHTML","lazyLoader","lazyChildren","saveQueryValues","loading","hide","this","getViewStyles","split","setCurrentViewStyle","saveViewSetting","fullyReload","preRender","renderTab","enableViewSelection","getPromise","show","getGenres"],"mappings":"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","file":"tvgenres.js","sourcesContent":["import layoutManager from 'layoutManager';\nimport loading from 'loading';\nimport libraryBrowser from 'libraryBrowser';\nimport cardBuilder from 'cardBuilder';\nimport lazyLoader from 'lazyLoader';\nimport globalize from 'globalize';\nimport appRouter from 'appRouter';\nimport 'emby-button';\n\n/* eslint-disable indent */\n\n    export default function (view, params, tabContent) {\n        function getPageData() {\n            const key = getSavedQueryKey();\n            let pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'Series',\n                        Recursive: true,\n                        EnableTotalRecordCount: false\n                    },\n                    view: 'Poster'\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery() {\n            return getPageData().query;\n        }\n\n        function getSavedQueryKey() {\n            return libraryBrowser.getSavedQueryKey('seriesgenres');\n        }\n\n        function getPromise() {\n            loading.show();\n            const query = getQuery();\n            return ApiClient.getGenres(ApiClient.getCurrentUserId(), query);\n        }\n\n        function enableScrollX() {\n            return !layoutManager.desktop;\n        }\n\n        function getThumbShape() {\n            return enableScrollX() ? 'overflowBackdrop' : 'backdrop';\n        }\n\n        function getPortraitShape() {\n            return enableScrollX() ? 'overflowPortrait' : 'portrait';\n        }\n\n        function fillItemsContainer(entry) {\n            const elem = entry.target;\n            const id = elem.getAttribute('data-id');\n            const viewStyle = self.getCurrentViewStyle();\n            let limit = viewStyle == 'Thumb' || viewStyle == 'ThumbCard' ? 5 : 9;\n\n            if (enableScrollX()) {\n                limit = 10;\n            }\n\n            const enableImageTypes = viewStyle == 'Thumb' || viewStyle == 'ThumbCard' ? 'Primary,Backdrop,Thumb' : 'Primary';\n            const query = {\n                SortBy: 'SortName',\n                SortOrder: 'Ascending',\n                IncludeItemTypes: 'Series',\n                Recursive: true,\n                Fields: 'PrimaryImageAspectRatio,MediaSourceCount,BasicSyncInfo',\n                ImageTypeLimit: 1,\n                EnableImageTypes: enableImageTypes,\n                Limit: limit,\n                GenreIds: id,\n                EnableTotalRecordCount: false,\n                ParentId: params.topParentId\n            };\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then(function (result) {\n                if (viewStyle == 'Thumb') {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getThumbShape(),\n                        preferThumb: true,\n                        showTitle: true,\n                        scalable: true,\n                        centerText: true,\n                        overlayMoreButton: true,\n                        allowBottomPadding: false\n                    });\n                } else if (viewStyle == 'ThumbCard') {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getThumbShape(),\n                        preferThumb: true,\n                        showTitle: true,\n                        scalable: true,\n                        centerText: false,\n                        cardLayout: true,\n                        showYear: true\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getPortraitShape(),\n                        showTitle: true,\n                        scalable: true,\n                        centerText: false,\n                        cardLayout: true,\n                        showYear: true\n                    });\n                } else if (viewStyle == 'Poster') {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getPortraitShape(),\n                        scalable: true,\n                        showTitle: true,\n                        centerText: true,\n                        showYear: true,\n                        overlayMoreButton: true,\n                        allowBottomPadding: false\n                    });\n                }\n                if (result.Items.length >= query.Limit) {\n                    tabContent.querySelector('.btnMoreFromGenre' + id + ' .material-icons').classList.remove('hide');\n                }\n            });\n        }\n\n        function reloadItems(context, promise) {\n            const query = getQuery();\n            promise.then(function (result) {\n                const elem = context.querySelector('#items');\n                let html = '';\n                const items = result.Items;\n\n                for (const item of items) {\n                    html += '<div class=\"verticalSection\">';\n                    html += '<div class=\"sectionTitleContainer sectionTitleContainer-cards padded-left\">';\n                    html += '<a is=\"emby-linkbutton\" href=\"' + appRouter.getRouteUrl(item, {\n                        context: 'tvshows',\n                        parentId: params.topParentId\n                    }) + '\" class=\"more button-flat button-flat-mini sectionTitleTextButton btnMoreFromGenre' + item.Id + '\">';\n                    html += '<h2 class=\"sectionTitle sectionTitle-cards\">';\n                    html += item.Name;\n                    html += '</h2>';\n                    html += '<span class=\"material-icons hide chevron_right\"></span>';\n                    html += '</a>';\n                    html += '</div>';\n                    if (enableScrollX()) {\n                        let scrollXClass = 'scrollX hiddenScrollX';\n                        if (layoutManager.tv) {\n                            scrollXClass += 'smoothScrollX padded-top-focusscale padded-bottom-focusscale';\n                        }\n                        html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer ' + scrollXClass + ' lazy padded-left padded-right\" data-id=\"' + item.Id + '\">';\n                    } else {\n                        html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer vertical-wrap lazy padded-left padded-right\" data-id=\"' + item.Id + '\">';\n                    }\n                    html += '</div>';\n                    html += '</div>';\n                }\n\n                if (!result.Items.length) {\n                    html = '';\n\n                    html += '<div class=\"noItemsMessage centerMessage\">';\n                    html += '<h1>' + globalize.translate('MessageNothingHere') + '</h1>';\n                    html += '<p>' + globalize.translate('MessageNoGenresAvailable') + '</p>';\n                    html += '</div>';\n                }\n\n                elem.innerHTML = html;\n                lazyLoader.lazyChildren(elem, fillItemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(), query);\n                loading.hide();\n            });\n        }\n\n        function fullyReload() {\n            self.preRender();\n            self.renderTab();\n        }\n\n        const self = this;\n        const data = {};\n\n        self.getViewStyles = function () {\n            return 'Poster,PosterCard,Thumb,ThumbCard'.split(',');\n        };\n\n        self.getCurrentViewStyle = function () {\n            return getPageData().view;\n        };\n\n        self.setCurrentViewStyle = function (viewStyle) {\n            getPageData().view = viewStyle;\n            libraryBrowser.saveViewSetting(getSavedQueryKey(), viewStyle);\n            fullyReload();\n        };\n\n        self.enableViewSelection = true;\n        let promise;\n\n        self.preRender = function () {\n            promise = getPromise();\n        };\n\n        self.renderTab = function () {\n            reloadItems(tabContent, promise);\n        };\n    }\n\n/* eslint-enable indent */\n"]}