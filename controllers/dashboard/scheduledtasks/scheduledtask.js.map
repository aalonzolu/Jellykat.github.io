{"version":3,"sources":["controllers/dashboard/scheduledtasks/scheduledtask.js"],"names":["define","_require","_exports","_jQuery","_loading","_datetime","_dom","_globalize","_embyInput","_embyButton","_embySelect","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","value","_default","view","params","querySelector","addEventListener","onSubmit","e","loading","show","id","getParameterByName","ApiClient","getScheduledTask","then","task","Triggers","push","ScheduledTaskPage","getTriggerToAdd","updateScheduledTaskTriggers","Id","addClass","refreshScheduledTask","preventDefault","fillTimeOfDay","select","options","i","name","getDisplayTime","innerHTML","map","o","join","parentNode","trigger","refreshTriggerFields","this","showAddTriggerPopup","btnDeleteTrigger","dom","parentWithClass","target","confirmDeleteTrigger","parseInt","getAttribute","Array","remove","from","to","rest","slice","length","apply","loadScheduledTask","html","Name","Description","Promise","_resolve","_reject","imported","loadTaskTriggers","hide","context","MaxRuntimeMs","getTriggerFriendlyName","hours","MaxRuntimeTicks","globalize","translate","Type","TimeOfDayTicks","DayOfWeek","SystemEvent","IntervalTicks","ticks","ms","now","Date","setHours","setTime","getTime","datetime","val","dispatchEvent","CustomEvent","removeClass","index","_ref","confirm","deleteTrigger","page","triggerType","attr","removeAttr","timeLimit","parseFloat"],"mappings":"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","file":"scheduledtask.js","sourcesContent":["import $ from 'jQuery';\nimport loading from 'loading';\nimport datetime from 'datetime';\nimport dom from 'dom';\nimport globalize from 'globalize';\nimport 'emby-input';\nimport 'emby-button';\nimport 'emby-select';\n\n/* eslint-disable indent */\n\n    function fillTimeOfDay(select) {\n        const options = [];\n\n        for (let i = 0; i < 86400000; i += 900000) {\n            options.push({\n                name: ScheduledTaskPage.getDisplayTime(i * 10000),\n                value: i * 10000\n            });\n        }\n\n        select.innerHTML = options.map(function (o) {\n            return '<option value=\"' + o.value + '\">' + o.name + '</option>';\n        }).join('');\n    }\n\n    Array.prototype.remove = function (from, to) {\n        const rest = this.slice((to || from) + 1 || this.length);\n        this.length = from < 0 ? this.length + from : from;\n        return this.push.apply(this, rest);\n    };\n\n    const ScheduledTaskPage = {\n        refreshScheduledTask: function (view) {\n            loading.show();\n            const id = getParameterByName('id');\n            ApiClient.getScheduledTask(id).then(function (task) {\n                ScheduledTaskPage.loadScheduledTask(view, task);\n            });\n        },\n        loadScheduledTask: function (view, task) {\n            $('.taskName', view).html(task.Name);\n            $('#pTaskDescription', view).html(task.Description);\n\n            import('listViewStyle').then(() => {\n                ScheduledTaskPage.loadTaskTriggers(view, task);\n            });\n\n            loading.hide();\n        },\n        loadTaskTriggers: function (context, task) {\n            let html = '';\n            html += '<div class=\"paperList\">';\n\n            for (let i = 0, length = task.Triggers.length; i < length; i++) {\n                const trigger = task.Triggers[i];\n\n                html += '<div class=\"listItem listItem-border\">';\n                html += '<span class=\"material-icons listItemIcon schedule\"></span>';\n                if (trigger.MaxRuntimeMs) {\n                    html += '<div class=\"listItemBody two-line\">';\n                } else {\n                    html += '<div class=\"listItemBody\">';\n                }\n                html += \"<div class='listItemBodyText'>\" + ScheduledTaskPage.getTriggerFriendlyName(trigger) + '</div>';\n                if (trigger.MaxRuntimeMs) {\n                    html += '<div class=\"listItemBodyText secondary\">';\n                    const hours = trigger.MaxRuntimeTicks / 36e9;\n                    if (hours == 1) {\n                        html += globalize.translate('ValueTimeLimitSingleHour');\n                    } else {\n                        html += globalize.translate('ValueTimeLimitMultiHour', hours);\n                    }\n                    html += '</div>';\n                }\n\n                html += '</div>';\n                html += '<button class=\"btnDeleteTrigger\" data-index=\"' + i + '\" type=\"button\" is=\"paper-icon-button-light\" title=\"' + globalize.translate('Delete') + '\"><span class=\"material-icons delete\"></span></button>';\n                html += '</div>';\n            }\n\n            html += '</div>';\n            context.querySelector('.taskTriggers').innerHTML = html;\n        },\n        // TODO: Replace this mess with date-fns and remove datetime completely\n        getTriggerFriendlyName: function (trigger) {\n            if (trigger.Type == 'DailyTrigger') {\n                return globalize.translate('DailyAt', ScheduledTaskPage.getDisplayTime(trigger.TimeOfDayTicks));\n            }\n\n            if (trigger.Type == 'WeeklyTrigger') {\n                // TODO: The day of week isn't localised as well\n                return globalize.translate('WeeklyAt', trigger.DayOfWeek, ScheduledTaskPage.getDisplayTime(trigger.TimeOfDayTicks));\n            }\n\n            if (trigger.Type == 'SystemEventTrigger' && trigger.SystemEvent == 'WakeFromSleep') {\n                return globalize.translate('OnWakeFromSleep');\n            }\n\n            if (trigger.Type == 'IntervalTrigger') {\n                const hours = trigger.IntervalTicks / 36e9;\n\n                if (hours == 0.25) {\n                    return globalize.translate('EveryXMinutes', '15');\n                }\n                if (hours == 0.5) {\n                    return globalize.translate('EveryXMinutes', '30');\n                }\n                if (hours == 0.75) {\n                    return globalize.translate('EveryXMinutes', '45');\n                }\n                if (hours == 1) {\n                    return globalize.translate('EveryHour');\n                }\n\n                return globalize.translate('EveryXHours', hours);\n            }\n\n            if (trigger.Type == 'StartupTrigger') {\n                return globalize.translate('OnApplicationStartup');\n            }\n\n            return trigger.Type;\n        },\n        getDisplayTime: function (ticks) {\n            const ms = ticks / 1e4;\n            const now = new Date();\n            now.setHours(0, 0, 0, 0);\n            now.setTime(now.getTime() + ms);\n            return datetime.getDisplayTime(now);\n        },\n        showAddTriggerPopup: function (view) {\n            $('#selectTriggerType', view).val('DailyTrigger');\n            view.querySelector('#selectTriggerType').dispatchEvent(new CustomEvent('change', {}));\n            $('#popupAddTrigger', view).removeClass('hide');\n        },\n        confirmDeleteTrigger: function (view, index) {\n            import('confirm').then(({default: confirm}) => {\n                confirm(globalize.translate('MessageDeleteTaskTrigger'), globalize.translate('HeaderDeleteTaskTrigger')).then(function () {\n                    ScheduledTaskPage.deleteTrigger(view, index);\n                });\n            });\n        },\n        deleteTrigger: function (view, index) {\n            loading.show();\n            const id = getParameterByName('id');\n            ApiClient.getScheduledTask(id).then(function (task) {\n                task.Triggers.remove(index);\n                ApiClient.updateScheduledTaskTriggers(task.Id, task.Triggers).then(function () {\n                    ScheduledTaskPage.refreshScheduledTask(view);\n                });\n            });\n        },\n        refreshTriggerFields: function (page, triggerType) {\n            if (triggerType == 'DailyTrigger') {\n                $('#fldTimeOfDay', page).show();\n                $('#fldDayOfWeek', page).hide();\n                $('#fldSelectSystemEvent', page).hide();\n                $('#fldSelectInterval', page).hide();\n                $('#selectTimeOfDay', page).attr('required', 'required');\n            } else if (triggerType == 'WeeklyTrigger') {\n                $('#fldTimeOfDay', page).show();\n                $('#fldDayOfWeek', page).show();\n                $('#fldSelectSystemEvent', page).hide();\n                $('#fldSelectInterval', page).hide();\n                $('#selectTimeOfDay', page).attr('required', 'required');\n            } else if (triggerType == 'SystemEventTrigger') {\n                $('#fldTimeOfDay', page).hide();\n                $('#fldDayOfWeek', page).hide();\n                $('#fldSelectSystemEvent', page).show();\n                $('#fldSelectInterval', page).hide();\n                $('#selectTimeOfDay', page).removeAttr('required');\n            } else if (triggerType == 'IntervalTrigger') {\n                $('#fldTimeOfDay', page).hide();\n                $('#fldDayOfWeek', page).hide();\n                $('#fldSelectSystemEvent', page).hide();\n                $('#fldSelectInterval', page).show();\n                $('#selectTimeOfDay', page).removeAttr('required');\n            } else if (triggerType == 'StartupTrigger') {\n                $('#fldTimeOfDay', page).hide();\n                $('#fldDayOfWeek', page).hide();\n                $('#fldSelectSystemEvent', page).hide();\n                $('#fldSelectInterval', page).hide();\n                $('#selectTimeOfDay', page).removeAttr('required');\n            }\n        },\n        getTriggerToAdd: function (page) {\n            const trigger = {\n                Type: $('#selectTriggerType', page).val()\n            };\n\n            if (trigger.Type == 'DailyTrigger') {\n                trigger.TimeOfDayTicks = $('#selectTimeOfDay', page).val();\n            } else if (trigger.Type == 'WeeklyTrigger') {\n                trigger.DayOfWeek = $('#selectDayOfWeek', page).val();\n                trigger.TimeOfDayTicks = $('#selectTimeOfDay', page).val();\n            } else if (trigger.Type == 'SystemEventTrigger') {\n                trigger.SystemEvent = $('#selectSystemEvent', page).val();\n            } else if (trigger.Type == 'IntervalTrigger') {\n                trigger.IntervalTicks = $('#selectInterval', page).val();\n            }\n\n            let timeLimit = $('#txtTimeLimit', page).val() || '0';\n            timeLimit = parseFloat(timeLimit) * 3600000;\n\n            trigger.MaxRuntimeMs = timeLimit || null;\n\n            return trigger;\n        }\n    };\n    export default function (view, params) {\n        function onSubmit(e) {\n            loading.show();\n            const id = getParameterByName('id');\n            ApiClient.getScheduledTask(id).then(function (task) {\n                task.Triggers.push(ScheduledTaskPage.getTriggerToAdd(view));\n                ApiClient.updateScheduledTaskTriggers(task.Id, task.Triggers).then(function () {\n                    $('#popupAddTrigger').addClass('hide');\n                    ScheduledTaskPage.refreshScheduledTask(view);\n                });\n            });\n            e.preventDefault();\n        }\n\n        view.querySelector('.addTriggerForm').addEventListener('submit', onSubmit);\n        fillTimeOfDay(view.querySelector('#selectTimeOfDay'));\n        $(view.querySelector('#popupAddTrigger').parentNode).trigger('create');\n        view.querySelector('.selectTriggerType').addEventListener('change', function () {\n            ScheduledTaskPage.refreshTriggerFields(view, this.value);\n        });\n        view.querySelector('.btnAddTrigger').addEventListener('click', function () {\n            ScheduledTaskPage.showAddTriggerPopup(view);\n        });\n        view.addEventListener('click', function (e) {\n            const btnDeleteTrigger = dom.parentWithClass(e.target, 'btnDeleteTrigger');\n\n            if (btnDeleteTrigger) {\n                ScheduledTaskPage.confirmDeleteTrigger(view, parseInt(btnDeleteTrigger.getAttribute('data-index')));\n            }\n        });\n        view.addEventListener('viewshow', function () {\n            ScheduledTaskPage.refreshScheduledTask(view);\n        });\n    }\n\n/* eslint-enable indent */\n"]}