{"version":3,"sources":["controllers/dashboard/scheduledtasks/scheduledtasks.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","define","_exports","_jQuery","_loading","_events","_globalize","_serverNotifications","datefns","_dfnshelper","_listViewStyle","_embyButton","_getRequireWildcardCache","WeakMap","cache","_interopRequireDefault","__esModule","default","reloadList","page","ApiClient","getScheduledTasks","isHidden","then","tasks","populateList","currentCategory","sort","a","b","Category","Name","html","i","length","task","globalize","translate","State","Id","getTaskProgressHtml","querySelector","innerHTML","loading","hide","LastExecutionResult","endtime","Date","parse","EndTimeUtc","starttime","StartTimeUtc","formatDistanceToNow","dfnshelper","localeWithSuffix","formatDistance","locale","getLocale","Status","progress","CurrentProgressPercentage","toFixed","setTaskButtonIcon","button","icon","inner","classList","remove","add","updateTaskButton","elem","state","title","parents","setAttribute","Object","defineProperty","value","_default","view","params","onPollIntervalFired","isMessageChannelOpen","onScheduledTasksUpdate","e","apiClient","info","serverId","updateTasks","pollInterval","on","this","id","getAttribute","startScheduledTask","stopScheduledTask","addEventListener","events","off","serverNotifications","stopInterval","sendMessage","clearInterval","show","startInterval","setInterval","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set"],"mappings":"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","file":"scheduledtasks.js","sourcesContent":["import $ from 'jQuery';\nimport loading from 'loading';\nimport events from 'events';\nimport globalize from 'globalize';\nimport serverNotifications from 'serverNotifications';\nimport * as datefns from 'date-fns';\nimport dfnshelper from 'dfnshelper';\nimport 'listViewStyle';\nimport 'emby-button';\n\n/* eslint-disable indent */\n\n    function reloadList(page) {\n        ApiClient.getScheduledTasks({\n            isHidden: false\n        }).then(function(tasks) {\n            populateList(page, tasks);\n            loading.hide();\n        });\n    }\n\n    function populateList(page, tasks) {\n        tasks = tasks.sort(function(a, b) {\n            a = a.Category + ' ' + a.Name;\n            b = b.Category + ' ' + b.Name;\n            return a == b ? 0 : a < b ? -1 : 1;\n        });\n\n        let currentCategory;\n        let html = '';\n        for (let i = 0; i < tasks.length; i++) {\n            const task = tasks[i];\n            if (task.Category != currentCategory) {\n                currentCategory = task.Category;\n                if (currentCategory) {\n                    html += '</div>';\n                    html += '</div>';\n                }\n                html += '<div class=\"verticalSection verticalSection-extrabottompadding\">';\n                html += '<div class=\"sectionTitleContainer\" style=\"margin-bottom:1em;\">';\n                html += '<h2 class=\"sectionTitle\">';\n                html += currentCategory;\n                html += '</h2>';\n                if (i === 0) {\n                    html += '<a is=\"emby-linkbutton\" class=\"raised button-alt headerHelpButton\" target=\"_blank\" href=\"https://docs.jellyfin.org/general/server/tasks.html\">' + globalize.translate('Help') + '</a>';\n                }\n                html += '</div>';\n                html += '<div class=\"paperList\">';\n            }\n            html += '<div class=\"listItem listItem-border scheduledTaskPaperIconItem\" data-status=\"' + task.State + '\">';\n            html += \"<a is='emby-linkbutton' style='margin:0;padding:0;' class='clearLink listItemIconContainer' href='scheduledtask.html?id=\" + task.Id + \"'>\";\n            html += '<span class=\"material-icons listItemIcon schedule\"></span>';\n            html += '</a>';\n            html += '<div class=\"listItemBody two-line\">';\n            html += \"<a class='clearLink' style='margin:0;padding:0;display:block;text-align:left;' is='emby-linkbutton' href='scheduledtask.html?id=\" + task.Id + \"'>\";\n            html += \"<h3 class='listItemBodyText'>\" + task.Name + '</h3>';\n            html += \"<div class='secondary listItemBodyText' id='taskProgress\" + task.Id + \"'>\" + getTaskProgressHtml(task) + '</div>';\n            html += '</a>';\n            html += '</div>';\n            if (task.State === 'Running') {\n                html += '<button type=\"button\" is=\"paper-icon-button-light\" id=\"btnTask' + task.Id + '\" class=\"btnStopTask\" data-taskid=\"' + task.Id + '\" title=\"' + globalize.translate('ButtonStop') + '\"><span class=\"material-icons stop\"></span></button>';\n            } else if (task.State === 'Idle') {\n                html += '<button type=\"button\" is=\"paper-icon-button-light\" id=\"btnTask' + task.Id + '\" class=\"btnStartTask\" data-taskid=\"' + task.Id + '\" title=\"' + globalize.translate('ButtonStart') + '\"><span class=\"material-icons play_arrow\"></span></button>';\n            }\n            html += '</div>';\n        }\n        if (tasks.length) {\n            html += '</div>';\n            html += '</div>';\n        }\n        page.querySelector('.divScheduledTasks').innerHTML = html;\n    }\n\n    function getTaskProgressHtml(task) {\n        let html = '';\n        if (task.State === 'Idle') {\n            if (task.LastExecutionResult) {\n                const endtime = Date.parse(task.LastExecutionResult.EndTimeUtc);\n                const starttime = Date.parse(task.LastExecutionResult.StartTimeUtc);\n                html += globalize.translate('LabelScheduledTaskLastRan', datefns.formatDistanceToNow(endtime, dfnshelper.localeWithSuffix),\n                    datefns.formatDistance(starttime, endtime, { locale: dfnshelper.getLocale() }));\n                if (task.LastExecutionResult.Status === 'Failed') {\n                    html += \" <span style='color:#FF0000;'>(\" + globalize.translate('LabelFailed') + ')</span>';\n                } else if (task.LastExecutionResult.Status === 'Cancelled') {\n                    html += \" <span style='color:#0026FF;'>(\" + globalize.translate('LabelCancelled') + ')</span>';\n                } else if (task.LastExecutionResult.Status === 'Aborted') {\n                    html += \" <span style='color:#FF0000;'>\" + globalize.translate('LabelAbortedByServerShutdown') + '</span>';\n                }\n            }\n        } else if (task.State === 'Running') {\n            const progress = (task.CurrentProgressPercentage || 0).toFixed(1);\n            html += '<div style=\"display:flex;align-items:center;\">';\n            html += '<div class=\"taskProgressOuter\" title=\"' + progress + '%\" style=\"flex-grow:1;\">';\n            html += '<div class=\"taskProgressInner\" style=\"width:' + progress + '%;\">';\n            html += '</div>';\n            html += '</div>';\n            html += \"<span style='color:#00a4dc;margin-left:5px;'>\" + progress + '%</span>';\n            html += '</div>';\n        } else {\n            html += \"<span style='color:#FF0000;'>\" + globalize.translate('LabelStopping') + '</span>';\n        }\n        return html;\n    }\n\n    function setTaskButtonIcon(button, icon) {\n        const inner = button.querySelector('.material-icons');\n        inner.classList.remove('stop', 'play_arrow');\n        inner.classList.add(icon);\n    }\n\n    function updateTaskButton(elem, state) {\n        if (state === 'Running') {\n            elem.classList.remove('btnStartTask');\n            elem.classList.add('btnStopTask');\n            setTaskButtonIcon(elem, 'stop');\n            elem.title = globalize.translate('ButtonStop');\n        } else if (state === 'Idle') {\n            elem.classList.add('btnStartTask');\n            elem.classList.remove('btnStopTask');\n            setTaskButtonIcon(elem, 'play_arrow');\n            elem.title = globalize.translate('ButtonStart');\n        }\n        $(elem).parents('.listItem')[0].setAttribute('data-status', state);\n    }\n\n    export default function(view, params) {\n        function updateTasks(tasks) {\n            for (let i = 0; i < tasks.length; i++) {\n                const task = tasks[i];\n                view.querySelector('#taskProgress' + task.Id).innerHTML = getTaskProgressHtml(task);\n                updateTaskButton(view.querySelector('#btnTask' + task.Id), task.State);\n            }\n        }\n\n        function onPollIntervalFired() {\n            if (!ApiClient.isMessageChannelOpen()) {\n                reloadList(view);\n            }\n        }\n\n        function onScheduledTasksUpdate(e, apiClient, info) {\n            if (apiClient.serverId() === serverId) {\n                updateTasks(info);\n            }\n        }\n\n        function startInterval() {\n            ApiClient.sendMessage('ScheduledTasksInfoStart', '1000,1000');\n            pollInterval && clearInterval(pollInterval);\n            pollInterval = setInterval(onPollIntervalFired, 1e4);\n        }\n\n        function stopInterval() {\n            ApiClient.sendMessage('ScheduledTasksInfoStop');\n            pollInterval && clearInterval(pollInterval);\n        }\n\n        let pollInterval;\n        const serverId = ApiClient.serverId();\n\n        $('.divScheduledTasks', view).on('click', '.btnStartTask', function() {\n            const button = this;\n            const id = button.getAttribute('data-taskid');\n            ApiClient.startScheduledTask(id).then(function() {\n                updateTaskButton(button, 'Running');\n                reloadList(view);\n            });\n        });\n\n        $('.divScheduledTasks', view).on('click', '.btnStopTask', function() {\n            const button = this;\n            const id = button.getAttribute('data-taskid');\n            ApiClient.stopScheduledTask(id).then(function() {\n                updateTaskButton(button, '');\n                reloadList(view);\n            });\n        });\n\n        view.addEventListener('viewbeforehide', function() {\n            events.off(serverNotifications, 'ScheduledTasksInfo', onScheduledTasksUpdate);\n            stopInterval();\n        });\n\n        view.addEventListener('viewshow', function() {\n            loading.show();\n            startInterval();\n            reloadList(view);\n            events.on(serverNotifications, 'ScheduledTasksInfo', onScheduledTasksUpdate);\n        });\n    }\n\n/* eslint-enable indent */\n"]}