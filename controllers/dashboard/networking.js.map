{"version":3,"sources":["controllers/dashboard/networking.js"],"names":["define","_require","_exports","_loading","_globalize","_embyCheckbox","_embySelect","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","onSubmit","e","form","this","localAddress","querySelector","value","enableUpnp","checked","confirmSelections","callback","showAlertText","title","globalize","translate","text","then","validationResult","getValidationAlert","validateHttps","certPath","Promise","reject","resolve","loading","show","ApiClient","getServerConfiguration","config","LocalNetworkSubnets","split","map","s","trim","filter","length","RemoteIPFilter","IsRemoteIPFilterBlacklist","PublicPort","PublicHttpsPort","HttpServerPortNumber","HttpsPortNumber","EnableHttps","RequireHttps","EnableUPnP","BaseUrl","EnableRemoteAccess","CertificatePath","CertificatePassword","LocalNetworkAddresses","updateServerConfiguration","Dashboard","processServerConfigurationUpdateResult","processErrorResponse","preventDefault","options","_resolve","_reject","imported","_ref","alert","_default","view","params","loadPage","page","join","triggerChange","select","evt","document","createEvent","initEvent","dispatchEvent","hide","addEventListener","classList","remove","add","_ref2","picker","directoryBrowser","includeFiles","includeDirectories","path","close","header"],"mappings":"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","file":"networking.js","sourcesContent":["import loading from 'loading';\nimport globalize from 'globalize';\nimport 'emby-checkbox';\nimport 'emby-select';\n\n/* eslint-disable indent */\n\n    function onSubmit(e) {\n        const form = this;\n        const localAddress = form.querySelector('#txtLocalAddress').value;\n        const enableUpnp = form.querySelector('#chkEnableUpnp').checked;\n        confirmSelections(localAddress, enableUpnp, function () {\n            const validationResult = getValidationAlert(form);\n\n            if (validationResult) {\n                showAlertText(validationResult);\n                return;\n            }\n\n            validateHttps(form).then(function () {\n                loading.show();\n                ApiClient.getServerConfiguration().then(function (config) {\n                    config.LocalNetworkSubnets = form.querySelector('#txtLanNetworks').value.split(',').map(function (s) {\n                        return s.trim();\n                    }).filter(function (s) {\n                        return s.length > 0;\n                    });\n                    config.RemoteIPFilter = form.querySelector('#txtExternalAddressFilter').value.split(',').map(function (s) {\n                        return s.trim();\n                    }).filter(function (s) {\n                        return s.length > 0;\n                    });\n                    config.IsRemoteIPFilterBlacklist = form.querySelector('#selectExternalAddressFilterMode').value === 'blacklist';\n                    config.PublicPort = form.querySelector('#txtPublicPort').value;\n                    config.PublicHttpsPort = form.querySelector('#txtPublicHttpsPort').value;\n                    config.HttpServerPortNumber = form.querySelector('#txtPortNumber').value;\n                    config.HttpsPortNumber = form.querySelector('#txtHttpsPort').value;\n                    config.EnableHttps = form.querySelector('#chkEnableHttps').checked;\n                    config.RequireHttps = form.querySelector('#chkRequireHttps').checked;\n                    config.EnableUPnP = enableUpnp;\n                    config.BaseUrl = form.querySelector('#txtBaseUrl').value;\n                    config.EnableRemoteAccess = form.querySelector('#chkRemoteAccess').checked;\n                    config.CertificatePath = form.querySelector('#txtCertificatePath').value || null;\n                    config.CertificatePassword = form.querySelector('#txtCertPassword').value || null;\n                    config.LocalNetworkAddresses = localAddress ? [localAddress] : [];\n                    ApiClient.updateServerConfiguration(config).then(Dashboard.processServerConfigurationUpdateResult, Dashboard.processErrorResponse);\n                });\n            });\n        });\n        e.preventDefault();\n    }\n\n    function triggerChange(select) {\n        const evt = document.createEvent('HTMLEvents');\n        evt.initEvent('change', false, true);\n        select.dispatchEvent(evt);\n    }\n\n    function getValidationAlert(form) {\n        if (form.querySelector('#txtPublicPort').value === form.querySelector('#txtPublicHttpsPort').value) {\n            return 'The public http and https ports must be different.';\n        }\n\n        if (form.querySelector('#txtPortNumber').value === form.querySelector('#txtHttpsPort').value) {\n            return 'The http and https ports must be different.';\n        }\n\n        return null;\n    }\n\n    function validateHttps(form) {\n        const certPath = form.querySelector('#txtCertificatePath').value || null;\n        const httpsEnabled = form.querySelector('#chkEnableHttps').checked;\n\n        if (httpsEnabled && !certPath) {\n            return showAlertText({\n                title: globalize.translate('TitleHostingSettings'),\n                text: globalize.translate('HttpsRequiresCert')\n            }).then(Promise.reject);\n        }\n\n        return Promise.resolve();\n    }\n\n    function showAlertText(options) {\n        return new Promise(function (resolve, reject) {\n            import('alert').then(({default: alert}) => {\n                alert(options).then(resolve, reject);\n            });\n        });\n    }\n\n    function confirmSelections(localAddress, enableUpnp, callback) {\n        if (localAddress || !enableUpnp) {\n            showAlertText({\n                title: globalize.translate('TitleHostingSettings'),\n                text: globalize.translate('SettingsWarning')\n            }).then(callback);\n        } else {\n            callback();\n        }\n    }\n\n    export default function (view, params) {\n        function loadPage(page, config) {\n            page.querySelector('#txtPortNumber').value = config.HttpServerPortNumber;\n            page.querySelector('#txtPublicPort').value = config.PublicPort;\n            page.querySelector('#txtPublicHttpsPort').value = config.PublicHttpsPort;\n            page.querySelector('#txtLocalAddress').value = config.LocalNetworkAddresses[0] || '';\n            page.querySelector('#txtLanNetworks').value = (config.LocalNetworkSubnets || []).join(', ');\n            page.querySelector('#txtExternalAddressFilter').value = (config.RemoteIPFilter || []).join(', ');\n            page.querySelector('#selectExternalAddressFilterMode').value = config.IsRemoteIPFilterBlacklist ? 'blacklist' : 'whitelist';\n            page.querySelector('#chkRemoteAccess').checked = config.EnableRemoteAccess == null || config.EnableRemoteAccess;\n            page.querySelector('#txtHttpsPort').value = config.HttpsPortNumber;\n            page.querySelector('#chkEnableHttps').checked = config.EnableHttps;\n            page.querySelector('#chkRequireHttps').checked = config.RequireHttps;\n            page.querySelector('#txtBaseUrl').value = config.BaseUrl || '';\n            const txtCertificatePath = page.querySelector('#txtCertificatePath');\n            txtCertificatePath.value = config.CertificatePath || '';\n            page.querySelector('#txtCertPassword').value = config.CertificatePassword || '';\n            page.querySelector('#chkEnableUpnp').checked = config.EnableUPnP;\n            triggerChange(page.querySelector('#chkRemoteAccess'));\n            loading.hide();\n        }\n\n        view.querySelector('#chkRemoteAccess').addEventListener('change', function () {\n            if (this.checked) {\n                view.querySelector('.fldExternalAddressFilter').classList.remove('hide');\n                view.querySelector('.fldExternalAddressFilterMode').classList.remove('hide');\n                view.querySelector('.fldPublicPort').classList.remove('hide');\n                view.querySelector('.fldPublicHttpsPort').classList.remove('hide');\n                view.querySelector('.fldEnableUpnp').classList.remove('hide');\n            } else {\n                view.querySelector('.fldExternalAddressFilter').classList.add('hide');\n                view.querySelector('.fldExternalAddressFilterMode').classList.add('hide');\n                view.querySelector('.fldPublicPort').classList.add('hide');\n                view.querySelector('.fldPublicHttpsPort').classList.add('hide');\n                view.querySelector('.fldEnableUpnp').classList.add('hide');\n            }\n        });\n        view.querySelector('#btnSelectCertPath').addEventListener('click', function () {\n            import('directorybrowser').then(({default: directoryBrowser}) => {\n                const picker = new directoryBrowser();\n                picker.show({\n                    includeFiles: true,\n                    includeDirectories: true,\n                    callback: function (path) {\n                        if (path) {\n                            view.querySelector('#txtCertificatePath').value = path;\n                        }\n\n                        picker.close();\n                    },\n                    header: globalize.translate('HeaderSelectCertificatePath')\n                });\n            });\n        });\n        view.querySelector('.dashboardHostingForm').addEventListener('submit', onSubmit);\n        view.addEventListener('viewshow', function (e) {\n            loading.show();\n            ApiClient.getServerConfiguration().then(function (config) {\n                loadPage(view, config);\n            });\n        });\n    }\n\n/* eslint-enable indent */\n"]}