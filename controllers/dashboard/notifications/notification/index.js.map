{"version":3,"sources":["controllers/dashboard/notifications/notification/index.js"],"names":["define","_jQuery","_embyCheckbox","fillItems","elem","items","cssClass","idPrefix","currentList","isEnabledList","html","map","u","checkedHtml","indexOf","Id","Name","join","trigger","onSubmit","save","page","type","getParameterByName","promise1","ApiClient","getNamedConfiguration","notificationsConfigurationKey","promise2","getJSON","getUrl","Promise","all","then","responses","notificationOptions","notificationConfig","Options","filter","n","Type","push","Enabled","default","is","SendToUserMode","val","DisabledMonitorUsers","get","c","checked","getAttribute","SendToUsers","DisabledServices","updateNamedConfiguration","r","Dashboard","processServerConfigurationUpdateResult","navigate","this","parents","_interopRequireDefault","obj","__esModule","document","on","value","show","hide","off","reload","getUsers","promise3","promise4","users","types","services","typeInfo","IsBasedOnUserEvent","prop"],"mappings":"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","file":"index.js","sourcesContent":["import $ from 'jQuery';\nimport 'emby-checkbox';\n\nfunction fillItems(elem, items, cssClass, idPrefix, currentList, isEnabledList) {\n    let html = '<div class=\"checkboxList paperList\" style=\"padding: .5em 1em;\">';\n    html += items.map(function (u) {\n        const isChecked = isEnabledList ? currentList.indexOf(u.Id) != -1 : currentList.indexOf(u.Id) == -1;\n        const checkedHtml = isChecked ? ' checked=\"checked\"' : '';\n        return '<label><input is=\"emby-checkbox\" class=\"' + cssClass + '\" type=\"checkbox\" data-itemid=\"' + u.Id + '\"' + checkedHtml + '/><span>' + u.Name + '</span></label>';\n    }).join('');\n    html += '</div>';\n    elem.html(html).trigger('create');\n}\n\nfunction reload(page) {\n    const type = getParameterByName('type');\n    const promise1 = ApiClient.getUsers();\n    const promise2 = ApiClient.getNamedConfiguration(notificationsConfigurationKey);\n    const promise3 = ApiClient.getJSON(ApiClient.getUrl('Notifications/Types'));\n    const promise4 = ApiClient.getJSON(ApiClient.getUrl('Notifications/Services'));\n    Promise.all([promise1, promise2, promise3, promise4]).then(function (responses) {\n        const users = responses[0];\n        const notificationOptions = responses[1];\n        const types = responses[2];\n        const services = responses[3];\n        let notificationConfig = notificationOptions.Options.filter(function (n) {\n            return n.Type == type;\n        })[0];\n        const typeInfo = types.filter(function (n) {\n            return n.Type == type;\n        })[0] || {};\n\n        if (typeInfo.IsBasedOnUserEvent) {\n            $('.monitorUsers', page).show();\n        } else {\n            $('.monitorUsers', page).hide();\n        }\n\n        $('.notificationType', page).html(typeInfo.Name || 'Unknown Notification');\n\n        if (!notificationConfig) {\n            notificationConfig = {\n                DisabledMonitorUsers: [],\n                SendToUsers: [],\n                DisabledServices: [],\n                SendToUserMode: 'Admins'\n            };\n        }\n\n        fillItems($('.monitorUsersList', page), users, 'chkMonitor', 'chkMonitor', notificationConfig.DisabledMonitorUsers);\n        fillItems($('.sendToUsersList', page), users, 'chkSendTo', 'chkSendTo', notificationConfig.SendToUsers, true);\n        fillItems($('.servicesList', page), services, 'chkService', 'chkService', notificationConfig.DisabledServices);\n        $('#chkEnabled', page).prop('checked', notificationConfig.Enabled || false);\n        $('#selectUsers', page).val(notificationConfig.SendToUserMode).trigger('change');\n    });\n}\n\nfunction save(page) {\n    const type = getParameterByName('type');\n    const promise1 = ApiClient.getNamedConfiguration(notificationsConfigurationKey);\n    // TODO: Check if this promise is really needed, as it's unused.\n    const promise2 = ApiClient.getJSON(ApiClient.getUrl('Notifications/Types'));\n    Promise.all([promise1, promise2]).then(function (responses) {\n        const notificationOptions = responses[0];\n        let notificationConfig = notificationOptions.Options.filter(function (n) {\n            return n.Type == type;\n        })[0];\n\n        if (!notificationConfig) {\n            notificationConfig = {\n                Type: type\n            };\n            notificationOptions.Options.push(notificationConfig);\n        }\n\n        notificationConfig.Enabled = $('#chkEnabled', page).is(':checked');\n        notificationConfig.SendToUserMode = $('#selectUsers', page).val();\n        notificationConfig.DisabledMonitorUsers = $('.chkMonitor', page).get().filter(function (c) {\n            return !c.checked;\n        }).map(function (c) {\n            return c.getAttribute('data-itemid');\n        });\n        notificationConfig.SendToUsers = $('.chkSendTo', page).get().filter(function (c) {\n            return c.checked;\n        }).map(function (c) {\n            return c.getAttribute('data-itemid');\n        });\n        notificationConfig.DisabledServices = $('.chkService', page).get().filter(function (c) {\n            return !c.checked;\n        }).map(function (c) {\n            return c.getAttribute('data-itemid');\n        });\n        ApiClient.updateNamedConfiguration(notificationsConfigurationKey, notificationOptions).then(function (r) {\n            Dashboard.processServerConfigurationUpdateResult();\n            Dashboard.navigate('notificationsettings.html');\n        });\n    });\n}\n\nfunction onSubmit() {\n    save($(this).parents('.page'));\n    return false;\n}\n\nconst notificationsConfigurationKey = 'notifications';\n$(document).on('pageinit', '#notificationSettingPage', function () {\n    const page = this;\n    $('#selectUsers', page).on('change', function () {\n        if (this.value == 'Custom') {\n            $('.selectCustomUsers', page).show();\n        } else {\n            $('.selectCustomUsers', page).hide();\n        }\n    });\n    $('.notificationSettingForm').off('submit', onSubmit).on('submit', onSubmit);\n}).on('pageshow', '#notificationSettingPage', function () {\n    reload(this);\n});\n"]}