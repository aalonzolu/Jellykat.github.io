{"version":3,"sources":["controllers/dashboard/dashboard.js"],"names":["define","_require","_exports","_datetime","_events","_itemHelper","_serverNotifications","_dom","_globalize","datefns","_dfnshelper","_loading","_connectionManager","_playMethodHelper","_cardBuilder","_imageLoader","_activitylog","_imagehelper","_indicators","_listViewStyle","_embyButton","_flexStyles","_embyItemscontainer","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","showPlaybackInfo","btn","session","Promise","_resolve","_reject","imported","then","_ref","title","alert","text","displayPlayMethod","playMethodHelper","getDisplayPlayMethod","globalize","translate","push","TranscodingInfo","TranscodeReasons","length","forEach","transcodeReason","join","showSendMessageForm","_ref2","prompt","label","confirmText","connectionManager","getApiClient","ServerId","sendMessageCommand","Id","Text","TimeoutMs","onActiveDevicesClick","evt","dom","parentWithClass","target","card","sessionId","id","DashboardPage","sessionsList","filter","dashboardSession","classList","contains","showOptionsMenu","_ref3","actionsheet","menuItems","DeviceId","deviceId","name","show","items","positionTo","sendPlayStateCommand","PlayState","reloadSystemInfo","view","apiClient","getSystemInfo","systemInfo","querySelector","innerHTML","ServerName","Version","OperatingSystem","SystemArchitecture","CachePath","LogPath","TranscodingTempPath","InternalMetadataPath","WebPath","renderInfo","sessions","forceUpdate","renderActiveConnections","html","parentElement","cardElem","add","i","rowId","elem","updateSession","nowPlayingItem","NowPlayingItem","imgUrl","getNowPlayingImageUrl","clientImage","getClientImage","DeviceName","getAppSecondaryText","nowPlayingName","getNowPlayingName","image","getSessionNowPlayingTime","RunTimeTicks","percent","PositionTicks","indicators","getProgressHtml","containerClass","CompletionPercentage","toFixed","btnCssClass","SupportsRemoteControl","playIcon","IsPaused","SupportedCommands","indexOf","getSessionNowPlayingStreamInfo","userImage","getUserImage","getUsersHtml","insertAdjacentHTML","deadSessionElem","parentNode","removeChild","filterSessions","list","minActiveDate","Date","getTime","UserId","datetime","parseISO8601Date","LastActivityDate","loading","hide","pollForInfo","getSessions","ActiveWithinSeconds","getScheduledTasks","tasks","renderRunningTasks","task","State","IsHidden","remove","Name","progress","CurrentProgressPercentage","value","_default","params","onRestartRequired","console","debug","onServerShuttingDown","onServerRestarting","onPackageInstalling","serverId","onPackageInstallationCompleted","onSessionsUpdate","info","onScheduledTasksUpdate","ApiClient","addEventListener","this","startInterval","events","on","serverNotifications","lastAppUpdateCheck","userActivityLog","ActivityLog","element","isMinServerVersion","serverActivityLog","refreshActiveRecordings","getLiveTvRecordings","Dashboard","getCurrentUserId","IsInProgress","Fields","EnableTotalRecordCount","EnableImageTypes","result","itemsContainer","Items","cardBuilder","getCardsHtml","shape","defaultShape","showTitle","showParentTitle","coverImage","cardLayout","centerText","preferThumb","overlayText","overlayMoreButton","action","centerPlayButton","imageLoader","lazyChildren","off","stopInterval","destroy","window","sendMessage","showTranscodingInfo","Framerate","line","Bitrate","Math","floor","Container","VideoCodec","AudioCodec","getDisplayRunningTime","Client","ApplicationVersion","formatDistanceToNow","parse","dfnshelper","localeWithSuffix","topText","itemHelper","getDisplayName","bottomText","Artists","SeriesName","Album","ProductionYear","ImageTags","Logo","getScaledImageUrl","tag","maxHeight","maxWidth","type","ParentLogoImageTag","ParentLogoItemId","UserName","AdditionalUsers","UserPrimaryImageTag","getUserImageUrl","row","btnSessionPlayPause","btnSessionPlayPauseIcon","nowPlayingInfoElem","getAttribute","setAttribute","playbackProgressElem","outerHTML","transcodingProgress","imgElem","style","backgroundImage","connection","imageHelper","getDeviceIcon","item","BackdropImageTags","round","getScreenWidth","ParentBackdropImageTags","ParentBackdropItemId","BackdropImageTag","BackdropItemId","imageTags","Thumb","ParentThumbImageTag","ParentThumbItemId","ThumbImageTag","ThumbItemId","Primary","PrimaryImageTag","PrimaryImageItemId","AlbumPrimaryImageTag","AlbumId","systemUpdateTaskKey","stopTask","page","stopScheduledTask","restart","_ref4","confirm","primary","disabled","restartServer","shutdown","_ref5","shutdownServer"],"mappings":"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","file":"dashboard.js","sourcesContent":["import datetime from 'datetime';\nimport events from 'events';\nimport itemHelper from 'itemHelper';\nimport serverNotifications from 'serverNotifications';\nimport dom from 'dom';\nimport globalize from 'globalize';\nimport * as datefns from 'date-fns';\nimport dfnshelper from 'dfnshelper';\nimport loading from 'loading';\nimport connectionManager from 'connectionManager';\nimport playMethodHelper from 'playMethodHelper';\nimport cardBuilder from 'cardBuilder';\nimport imageLoader from 'imageLoader';\nimport ActivityLog from 'components/activitylog';\nimport imageHelper from 'scripts/imagehelper';\nimport indicators from 'indicators';\nimport 'listViewStyle';\nimport 'emby-button';\nimport 'flexStyles';\nimport 'emby-itemscontainer';\n\n/* eslint-disable indent */\n\n    function showPlaybackInfo(btn, session) {\n        import('alert').then(({default: alert}) => {\n            let title;\n            const text = [];\n            const displayPlayMethod = playMethodHelper.getDisplayPlayMethod(session);\n\n            if (displayPlayMethod === 'DirectStream') {\n                title = globalize.translate('DirectStreaming');\n                text.push(globalize.translate('DirectStreamHelp1'));\n                text.push('<br/>');\n                text.push(globalize.translate('DirectStreamHelp2'));\n            } else if (displayPlayMethod === 'Transcode') {\n                title = globalize.translate('Transcoding');\n                text.push(globalize.translate('MediaIsBeingConverted'));\n\n                if (session.TranscodingInfo && session.TranscodingInfo.TranscodeReasons && session.TranscodingInfo.TranscodeReasons.length) {\n                    text.push('<br/>');\n                    text.push(globalize.translate('LabelReasonForTranscoding'));\n                    session.TranscodingInfo.TranscodeReasons.forEach(function (transcodeReason) {\n                        text.push(globalize.translate(transcodeReason));\n                    });\n                }\n            }\n\n            alert({\n                text: text.join('<br/>'),\n                title: title\n            });\n        });\n    }\n\n    function showSendMessageForm(btn, session) {\n        import('prompt').then(({default: prompt}) => {\n            prompt({\n                title: globalize.translate('HeaderSendMessage'),\n                label: globalize.translate('LabelMessageText'),\n                confirmText: globalize.translate('ButtonSend')\n            }).then(function (text) {\n                if (text) {\n                    connectionManager.getApiClient(session.ServerId).sendMessageCommand(session.Id, {\n                        Text: text,\n                        TimeoutMs: 5e3\n                    });\n                }\n            });\n        });\n    }\n\n    function showOptionsMenu(btn, session) {\n        import('actionsheet').then(({default: actionsheet}) => {\n            const menuItems = [];\n\n            if (session.ServerId && session.DeviceId !== connectionManager.deviceId()) {\n                menuItems.push({\n                    name: globalize.translate('SendMessage'),\n                    id: 'sendmessage'\n                });\n            }\n\n            if (session.TranscodingInfo && session.TranscodingInfo.TranscodeReasons && session.TranscodingInfo.TranscodeReasons.length) {\n                menuItems.push({\n                    name: globalize.translate('ViewPlaybackInfo'),\n                    id: 'transcodinginfo'\n                });\n            }\n\n            return actionsheet.show({\n                items: menuItems,\n                positionTo: btn\n            }).then(function (id) {\n                switch (id) {\n                    case 'sendmessage':\n                        showSendMessageForm(btn, session);\n                        break;\n\n                    case 'transcodinginfo':\n                        showPlaybackInfo(btn, session);\n                }\n            });\n        });\n    }\n\n    function onActiveDevicesClick(evt) {\n        const btn = dom.parentWithClass(evt.target, 'sessionCardButton');\n\n        if (btn) {\n            const card = dom.parentWithClass(btn, 'card');\n\n            if (card) {\n                const sessionId = card.id;\n                const session = (DashboardPage.sessionsList || []).filter(function (dashboardSession) {\n                    return 'session' + dashboardSession.Id === sessionId;\n                })[0];\n\n                if (session) {\n                    if (btn.classList.contains('btnCardOptions')) {\n                        showOptionsMenu(btn, session);\n                    } else if (btn.classList.contains('btnSessionInfo')) {\n                        showPlaybackInfo(btn, session);\n                    } else if (btn.classList.contains('btnSessionSendMessage')) {\n                        showSendMessageForm(btn, session);\n                    } else if (btn.classList.contains('btnSessionStop')) {\n                        connectionManager.getApiClient(session.ServerId).sendPlayStateCommand(session.Id, 'Stop');\n                    } else if (btn.classList.contains('btnSessionPlayPause') && session.PlayState) {\n                        connectionManager.getApiClient(session.ServerId).sendPlayStateCommand(session.Id, 'PlayPause');\n                    }\n                }\n            }\n        }\n    }\n\n    function filterSessions(sessions) {\n        const list = [];\n        const minActiveDate = new Date().getTime() - 9e5;\n\n        for (let i = 0, length = sessions.length; i < length; i++) {\n            const session = sessions[i];\n\n            if (!session.NowPlayingItem && !session.UserId) {\n                continue;\n            }\n\n            if (datetime.parseISO8601Date(session.LastActivityDate, true).getTime() >= minActiveDate) {\n                list.push(session);\n            }\n        }\n\n        return list;\n    }\n\n    function refreshActiveRecordings(view, apiClient) {\n        apiClient.getLiveTvRecordings({\n            UserId: Dashboard.getCurrentUserId(),\n            IsInProgress: true,\n            Fields: 'CanDelete,PrimaryImageAspectRatio',\n            EnableTotalRecordCount: false,\n            EnableImageTypes: 'Primary,Thumb,Backdrop'\n        }).then(function (result) {\n            const itemsContainer = view.querySelector('.activeRecordingItems');\n\n            if (!result.Items.length) {\n                view.querySelector('.activeRecordingsSection').classList.add('hide');\n                return void(itemsContainer.innerHTML = '');\n            }\n\n            view.querySelector('.activeRecordingsSection').classList.remove('hide');\n            itemsContainer.innerHTML = cardBuilder.getCardsHtml({\n                items: result.Items,\n                shape: 'auto',\n                defaultShape: 'backdrop',\n                showTitle: true,\n                showParentTitle: true,\n                coverImage: true,\n                cardLayout: false,\n                centerText: true,\n                preferThumb: 'auto',\n                overlayText: false,\n                overlayMoreButton: true,\n                action: 'none',\n                centerPlayButton: true\n            });\n            imageLoader.lazyChildren(itemsContainer);\n        });\n    }\n\n    function reloadSystemInfo(view, apiClient) {\n        apiClient.getSystemInfo().then(function (systemInfo) {\n            view.querySelector('#serverName').innerHTML = globalize.translate('DashboardServerName', systemInfo.ServerName);\n            view.querySelector('#versionNumber').innerHTML = globalize.translate('DashboardVersionNumber', systemInfo.Version);\n            view.querySelector('#operatingSystem').innerHTML = globalize.translate('DashboardOperatingSystem', systemInfo.OperatingSystem);\n            view.querySelector('#architecture').innerHTML = globalize.translate('DashboardArchitecture', systemInfo.SystemArchitecture);\n\n            view.querySelector('#cachePath').innerHTML = systemInfo.CachePath;\n            view.querySelector('#logPath').innerHTML = systemInfo.LogPath;\n            view.querySelector('#transcodePath').innerHTML = systemInfo.TranscodingTempPath;\n            view.querySelector('#metadataPath').innerHTML = systemInfo.InternalMetadataPath;\n            view.querySelector('#webPath').innerHTML = systemInfo.WebPath;\n        });\n    }\n\n    function renderInfo(view, sessions, forceUpdate) {\n        sessions = filterSessions(sessions);\n        renderActiveConnections(view, sessions);\n        loading.hide();\n    }\n\n    function pollForInfo(view, apiClient, forceUpdate) {\n        apiClient.getSessions({\n            ActiveWithinSeconds: 960\n        }).then(function (sessions) {\n            renderInfo(view, sessions, forceUpdate);\n        });\n        apiClient.getScheduledTasks().then(function (tasks) {\n            renderRunningTasks(view, tasks);\n        });\n    }\n\n    function renderActiveConnections(view, sessions) {\n        let html = '';\n        DashboardPage.sessionsList = sessions;\n        const parentElement = view.querySelector('.activeDevices');\n        const cardElem = parentElement.querySelector('.card');\n\n        if (cardElem) {\n            cardElem.classList.add('deadSession');\n        }\n\n        for (let i = 0, length = sessions.length; i < length; i++) {\n            const session = sessions[i];\n            const rowId = 'session' + session.Id;\n            const elem = view.querySelector('#' + rowId);\n\n            if (elem) {\n                DashboardPage.updateSession(elem, session);\n            } else {\n                const nowPlayingItem = session.NowPlayingItem;\n                const className = 'scalableCard card activeSession backdropCard backdropCard-scalable';\n                html += '<div class=\"' + className + '\" id=\"' + rowId + '\">';\n                html += '<div class=\"cardBox visualCardBox\">';\n                html += '<div class=\"cardScalable visualCardBox-cardScalable\">';\n                html += '<div class=\"cardPadder cardPadder-backdrop\"></div>';\n                html += '<div class=\"cardContent\">';\n                const imgUrl = DashboardPage.getNowPlayingImageUrl(nowPlayingItem);\n\n                if (imgUrl) {\n                    html += '<div class=\"sessionNowPlayingContent sessionNowPlayingContent-withbackground\"';\n                    html += ' data-src=\"' + imgUrl + '\" style=\"display:inline-block;background-image:url(\\'' + imgUrl + \"');\\\"></div>\";\n                } else {\n                    html += '<div class=\"sessionNowPlayingContent\"></div>';\n                }\n\n                html += '<div class=\"sessionNowPlayingInnerContent\">';\n                html += '<div class=\"sessionAppInfo\">';\n                const clientImage = DashboardPage.getClientImage(session);\n\n                if (clientImage) {\n                    html += clientImage;\n                }\n\n                html += '<div class=\"sessionAppName\" style=\"display:inline-block;\">';\n                html += '<div class=\"sessionDeviceName\">' + session.DeviceName + '</div>';\n                html += '<div class=\"sessionAppSecondaryText\">' + DashboardPage.getAppSecondaryText(session) + '</div>';\n                html += '</div>';\n                html += '</div>';\n\n                html += '<div class=\"sessionNowPlayingDetails\">';\n                const nowPlayingName = DashboardPage.getNowPlayingName(session);\n                html += '<div class=\"sessionNowPlayingInfo\" data-imgsrc=\"' + nowPlayingName.image + '\">';\n                html += nowPlayingName.html;\n                html += '</div>';\n                html += '<div class=\"sessionNowPlayingTime\">' + DashboardPage.getSessionNowPlayingTime(session) + '</div>';\n                html += '</div>';\n\n                if (nowPlayingItem && nowPlayingItem.RunTimeTicks) {\n                    const percent = 100 * (session.PlayState.PositionTicks || 0) / nowPlayingItem.RunTimeTicks;\n                    html += indicators.getProgressHtml(percent, {\n                        containerClass: 'playbackProgress'\n                    });\n                } else {\n                    // need to leave the element in just in case the device starts playback\n                    html += indicators.getProgressHtml(0, {\n                        containerClass: 'playbackProgress hide'\n                    });\n                }\n\n                if (session.TranscodingInfo && session.TranscodingInfo.CompletionPercentage) {\n                    const percent = session.TranscodingInfo.CompletionPercentage.toFixed(1);\n                    html += indicators.getProgressHtml(percent, {\n                        containerClass: 'transcodingProgress'\n                    });\n                } else {\n                    // same issue as playbackProgress element above\n                    html += indicators.getProgressHtml(0, {\n                        containerClass: 'transcodingProgress hide'\n                    });\n                }\n\n                html += '</div>';\n                html += '</div>';\n                html += '</div>';\n                html += '<div class=\"sessionCardFooter cardFooter\">';\n                html += '<div class=\"sessionCardButtons flex align-items-center justify-content-center\">';\n\n                let btnCssClass = session.ServerId && session.NowPlayingItem && session.SupportsRemoteControl ? '' : ' hide';\n                const playIcon = session.PlayState.IsPaused ? 'pause' : 'play_arrow';\n\n                html += '<button is=\"paper-icon-button-light\" class=\"sessionCardButton btnSessionPlayPause paper-icon-button-light ' + btnCssClass + '\"><span class=\"material-icons ' + playIcon + '\"></span></button>';\n                html += '<button is=\"paper-icon-button-light\" class=\"sessionCardButton btnSessionStop paper-icon-button-light ' + btnCssClass + '\"><span class=\"material-icons stop\"></span></button>';\n\n                btnCssClass = session.TranscodingInfo && session.TranscodingInfo.TranscodeReasons && session.TranscodingInfo.TranscodeReasons.length ? '' : ' hide';\n                html += '<button is=\"paper-icon-button-light\" class=\"sessionCardButton btnSessionInfo paper-icon-button-light ' + btnCssClass + '\" title=\"' + globalize.translate('ViewPlaybackInfo') + '\"><span class=\"material-icons info\"></span></button>';\n\n                btnCssClass = session.ServerId && session.SupportedCommands.indexOf('DisplayMessage') !== -1 && session.DeviceId !== connectionManager.deviceId() ? '' : ' hide';\n                html += '<button is=\"paper-icon-button-light\" class=\"sessionCardButton btnSessionSendMessage paper-icon-button-light ' + btnCssClass + '\" title=\"' + globalize.translate('SendMessage') + '\"><span class=\"material-icons message\"></span></button>';\n                html += '</div>';\n\n                html += '<div class=\"sessionNowPlayingStreamInfo\" style=\"padding:.5em 0 1em;\">';\n                html += DashboardPage.getSessionNowPlayingStreamInfo(session);\n                html += '</div>';\n\n                html += '<div class=\"flex align-items-center justify-content-center\">';\n                const userImage = DashboardPage.getUserImage(session);\n                html += userImage ? '<div class=\"activitylogUserPhoto\" style=\"background-image:url(\\'' + userImage + \"');\\\"></div>\" : '<div style=\"height:1.71em;\"></div>';\n                html += '<div class=\"sessionUserName\">';\n                html += DashboardPage.getUsersHtml(session);\n\n                html += '</div>';\n                html += '</div>';\n                html += '</div>';\n                html += '</div>';\n                html += '</div>';\n            }\n        }\n\n        parentElement.insertAdjacentHTML('beforeend', html);\n        const deadSessionElem = parentElement.querySelector('.deadSession');\n\n        if (deadSessionElem) {\n            deadSessionElem.parentNode.removeChild(deadSessionElem);\n        }\n    }\n\n    function renderRunningTasks(view, tasks) {\n        let html = '';\n        tasks = tasks.filter(function (task) {\n            if (task.State != 'Idle') {\n                return !task.IsHidden;\n            }\n\n            return false;\n        });\n\n        if (tasks.length) {\n            view.querySelector('.runningTasksContainer').classList.remove('hide');\n        } else {\n            view.querySelector('.runningTasksContainer').classList.add('hide');\n        }\n\n        for (let i = 0, length = tasks.length; i < length; i++) {\n            const task = tasks[i];\n            html += '<p>';\n            html += task.Name + '<br/>';\n\n            if (task.State === 'Running') {\n                const progress = (task.CurrentProgressPercentage || 0).toFixed(1);\n                html += '<progress max=\"100\" value=\"' + progress + '\" title=\"' + progress + '%\">';\n                html += progress + '%';\n                html += '</progress>';\n                html += \"<span style='color:#00a4dc;margin-left:5px;margin-right:5px;'>\" + progress + '%</span>';\n                html += '<button type=\"button\" is=\"paper-icon-button-light\" title=\"' + globalize.translate('ButtonStop') + '\" onclick=\"DashboardPage.stopTask(this, \\'' + task.Id + '\\');\" class=\"autoSize\"><span class=\"material-icons cancel\"></span></button>';\n            } else if (task.State === 'Cancelling') {\n                html += '<span style=\"color:#cc0000;\">' + globalize.translate('LabelStopping') + '</span>';\n            }\n\n            html += '</p>';\n        }\n\n        view.querySelector('#divRunningTasks').innerHTML = html;\n    }\n\n    window.DashboardPage = {\n        startInterval: function (apiClient) {\n            apiClient.sendMessage('SessionsStart', '0,1500');\n            apiClient.sendMessage('ScheduledTasksInfoStart', '0,1000');\n        },\n        stopInterval: function (apiClient) {\n            apiClient.sendMessage('SessionsStop');\n            apiClient.sendMessage('ScheduledTasksInfoStop');\n        },\n        getSessionNowPlayingStreamInfo: function (session) {\n            let html = '';\n            let showTranscodingInfo = false;\n            const displayPlayMethod = playMethodHelper.getDisplayPlayMethod(session);\n\n            if (displayPlayMethod === 'DirectStream') {\n                html += globalize.translate('DirectStreaming');\n            } else if (displayPlayMethod === 'Transcode') {\n                html += globalize.translate('Transcoding');\n\n                if (session.TranscodingInfo && session.TranscodingInfo.Framerate) {\n                    html += ' (' + session.TranscodingInfo.Framerate + ' fps)';\n                }\n\n                showTranscodingInfo = true;\n            } else if (displayPlayMethod === 'DirectPlay') {\n                html += globalize.translate('DirectPlaying');\n            }\n\n            if (showTranscodingInfo) {\n                const line = [];\n\n                if (session.TranscodingInfo) {\n                    if (session.TranscodingInfo.Bitrate) {\n                        if (session.TranscodingInfo.Bitrate > 1e6) {\n                            line.push((session.TranscodingInfo.Bitrate / 1e6).toFixed(1) + ' Mbps');\n                        } else {\n                            line.push(Math.floor(session.TranscodingInfo.Bitrate / 1e3) + ' Kbps');\n                        }\n                    }\n\n                    if (session.TranscodingInfo.Container) {\n                        line.push(session.TranscodingInfo.Container);\n                    }\n\n                    if (session.TranscodingInfo.VideoCodec) {\n                        line.push(session.TranscodingInfo.VideoCodec);\n                    }\n\n                    if (session.TranscodingInfo.AudioCodec && session.TranscodingInfo.AudioCodec != session.TranscodingInfo.Container) {\n                        line.push(session.TranscodingInfo.AudioCodec);\n                    }\n                }\n\n                if (line.length) {\n                    html += ' - ' + line.join(' ');\n                }\n            }\n\n            return html;\n        },\n        getSessionNowPlayingTime: function (session) {\n            const nowPlayingItem = session.NowPlayingItem;\n            let html = '';\n\n            if (nowPlayingItem) {\n                if (session.PlayState.PositionTicks) {\n                    html += datetime.getDisplayRunningTime(session.PlayState.PositionTicks);\n                } else {\n                    html += '0:00';\n                }\n\n                html += ' / ';\n\n                if (nowPlayingItem && nowPlayingItem.RunTimeTicks) {\n                    html += datetime.getDisplayRunningTime(nowPlayingItem.RunTimeTicks);\n                } else {\n                    html += '0:00';\n                }\n            }\n\n            return html;\n        },\n        getAppSecondaryText: function (session) {\n            return session.Client + ' ' + session.ApplicationVersion;\n        },\n        getNowPlayingName: function (session) {\n            let imgUrl = '';\n            const nowPlayingItem = session.NowPlayingItem;\n            // FIXME: It seems that, sometimes, server sends date in the future, so date-fns displays messages like 'in less than a minute'. We should fix\n            // how dates are returned by the server when the session is active and show something like 'Active now', instead of past/future sentences\n            if (!nowPlayingItem) {\n                return {\n                    html: globalize.translate('LastSeen', datefns.formatDistanceToNow(Date.parse(session.LastActivityDate), dfnshelper.localeWithSuffix)),\n                    image: imgUrl\n                };\n            }\n\n            let topText = itemHelper.getDisplayName(nowPlayingItem);\n            let bottomText = '';\n\n            if (nowPlayingItem.Artists && nowPlayingItem.Artists.length) {\n                bottomText = topText;\n                topText = nowPlayingItem.Artists[0];\n            } else {\n                if (nowPlayingItem.SeriesName || nowPlayingItem.Album) {\n                    bottomText = topText;\n                    topText = nowPlayingItem.SeriesName || nowPlayingItem.Album;\n                } else if (nowPlayingItem.ProductionYear) {\n                    bottomText = nowPlayingItem.ProductionYear;\n                }\n            }\n\n            if (nowPlayingItem.ImageTags && nowPlayingItem.ImageTags.Logo) {\n                imgUrl = ApiClient.getScaledImageUrl(nowPlayingItem.Id, {\n                    tag: nowPlayingItem.ImageTags.Logo,\n                    maxHeight: 24,\n                    maxWidth: 130,\n                    type: 'Logo'\n                });\n            } else if (nowPlayingItem.ParentLogoImageTag) {\n                imgUrl = ApiClient.getScaledImageUrl(nowPlayingItem.ParentLogoItemId, {\n                    tag: nowPlayingItem.ParentLogoImageTag,\n                    maxHeight: 24,\n                    maxWidth: 130,\n                    type: 'Logo'\n                });\n            }\n\n            if (imgUrl) {\n                topText = '<img src=\"' + imgUrl + '\" style=\"max-height:24px;max-width:130px;\" />';\n            }\n\n            return {\n                html: bottomText ? topText + '<br/>' + bottomText : topText,\n                image: imgUrl\n            };\n        },\n        getUsersHtml: function (session) {\n            const html = [];\n\n            if (session.UserId) {\n                html.push(session.UserName);\n            }\n\n            for (let i = 0, length = session.AdditionalUsers.length; i < length; i++) {\n                html.push(session.AdditionalUsers[i].UserName);\n            }\n\n            return html.join(', ');\n        },\n        getUserImage: function (session) {\n            if (session.UserId && session.UserPrimaryImageTag) {\n                return ApiClient.getUserImageUrl(session.UserId, {\n                    tag: session.UserPrimaryImageTag,\n                    type: 'Primary'\n                });\n            }\n\n            return null;\n        },\n        updateSession: function (row, session) {\n            row.classList.remove('deadSession');\n            const nowPlayingItem = session.NowPlayingItem;\n\n            if (nowPlayingItem) {\n                row.classList.add('playingSession');\n            } else {\n                row.classList.remove('playingSession');\n            }\n\n            if (session.ServerId && session.SupportedCommands.indexOf('DisplayMessage') !== -1 && session.DeviceId !== connectionManager.deviceId()) {\n                row.querySelector('.btnSessionSendMessage').classList.remove('hide');\n            } else {\n                row.querySelector('.btnSessionSendMessage').classList.add('hide');\n            }\n\n            if (session.TranscodingInfo && session.TranscodingInfo.TranscodeReasons && session.TranscodingInfo && session.TranscodingInfo.TranscodeReasons.length) {\n                row.querySelector('.btnSessionInfo').classList.remove('hide');\n            } else {\n                row.querySelector('.btnSessionInfo').classList.add('hide');\n            }\n\n            const btnSessionPlayPause = row.querySelector('.btnSessionPlayPause');\n\n            if (session.ServerId && nowPlayingItem && session.SupportsRemoteControl && session.DeviceId !== connectionManager.deviceId()) {\n                btnSessionPlayPause.classList.remove('hide');\n                row.querySelector('.btnSessionStop').classList.remove('hide');\n            } else {\n                btnSessionPlayPause.classList.add('hide');\n                row.querySelector('.btnSessionStop').classList.add('hide');\n            }\n\n            const btnSessionPlayPauseIcon = btnSessionPlayPause.querySelector('.material-icons');\n            btnSessionPlayPauseIcon.classList.remove('play_arrow', 'pause');\n            btnSessionPlayPauseIcon.classList.add(session.PlayState && session.PlayState.IsPaused ? 'play_arrow' : 'pause');\n\n            row.querySelector('.sessionNowPlayingStreamInfo').innerHTML = DashboardPage.getSessionNowPlayingStreamInfo(session);\n            row.querySelector('.sessionNowPlayingTime').innerHTML = DashboardPage.getSessionNowPlayingTime(session);\n            row.querySelector('.sessionUserName').innerHTML = DashboardPage.getUsersHtml(session);\n            row.querySelector('.sessionAppSecondaryText').innerHTML = DashboardPage.getAppSecondaryText(session);\n            const nowPlayingName = DashboardPage.getNowPlayingName(session);\n            const nowPlayingInfoElem = row.querySelector('.sessionNowPlayingInfo');\n\n            if (!(nowPlayingName.image && nowPlayingName.image == nowPlayingInfoElem.getAttribute('data-imgsrc'))) {\n                nowPlayingInfoElem.innerHTML = nowPlayingName.html;\n                nowPlayingInfoElem.setAttribute('data-imgsrc', nowPlayingName.image || '');\n            }\n\n            const playbackProgressElem = row.querySelector('.playbackProgress');\n\n            if (nowPlayingItem && nowPlayingItem.RunTimeTicks) {\n                const percent = 100 * (session.PlayState.PositionTicks || 0) / nowPlayingItem.RunTimeTicks;\n                playbackProgressElem.outerHTML = indicators.getProgressHtml(percent, {\n                    containerClass: 'playbackProgress'\n                });\n            } else {\n                playbackProgressElem.outerHTML = indicators.getProgressHtml(0, {\n                    containerClass: 'playbackProgress hide'\n                });\n            }\n\n            const transcodingProgress = row.querySelector('.transcodingProgress');\n\n            if (session.TranscodingInfo && session.TranscodingInfo.CompletionPercentage) {\n                const percent = session.TranscodingInfo.CompletionPercentage.toFixed(1);\n                transcodingProgress.outerHTML = indicators.getProgressHtml(percent, {\n                    containerClass: 'transcodingProgress'\n                });\n            } else {\n                transcodingProgress.outerHTML = indicators.getProgressHtml(0, {\n                    containerClass: 'transcodingProgress hide'\n                });\n            }\n\n            const imgUrl = DashboardPage.getNowPlayingImageUrl(nowPlayingItem) || '';\n            const imgElem = row.querySelector('.sessionNowPlayingContent');\n\n            if (imgUrl != imgElem.getAttribute('data-src')) {\n                imgElem.style.backgroundImage = imgUrl ? \"url('\" + imgUrl + \"')\" : '';\n                imgElem.setAttribute('data-src', imgUrl);\n\n                if (imgUrl) {\n                    imgElem.classList.add('sessionNowPlayingContent-withbackground');\n                } else {\n                    imgElem.classList.remove('sessionNowPlayingContent-withbackground');\n                }\n            }\n        },\n        getClientImage: function (connection) {\n            const iconUrl = imageHelper.getDeviceIcon(connection);\n            return \"<img src='\" + iconUrl + \"' />\";\n        },\n        getNowPlayingImageUrl: function (item) {\n            /* Screen width is multiplied by 0.2, as the there is currently no way to get the width of\n            elements that aren't created yet. */\n            if (item && item.BackdropImageTags && item.BackdropImageTags.length) {\n                return ApiClient.getScaledImageUrl(item.Id, {\n                    maxWidth: Math.round(dom.getScreenWidth() * 0.20),\n                    type: 'Backdrop',\n                    tag: item.BackdropImageTags[0]\n                });\n            }\n\n            if (item && item.ParentBackdropImageTags && item.ParentBackdropImageTags.length) {\n                return ApiClient.getScaledImageUrl(item.ParentBackdropItemId, {\n                    maxWidth: Math.round(dom.getScreenWidth() * 0.20),\n                    type: 'Backdrop',\n                    tag: item.ParentBackdropImageTags[0]\n                });\n            }\n\n            if (item && item.BackdropImageTag) {\n                return ApiClient.getScaledImageUrl(item.BackdropItemId, {\n                    maxWidth: Math.round(dom.getScreenWidth() * 0.20),\n                    type: 'Backdrop',\n                    tag: item.BackdropImageTag\n                });\n            }\n\n            const imageTags = (item || {}).ImageTags || {};\n\n            if (item && imageTags.Thumb) {\n                return ApiClient.getScaledImageUrl(item.Id, {\n                    maxWidth: Math.round(dom.getScreenWidth() * 0.20),\n                    type: 'Thumb',\n                    tag: imageTags.Thumb\n                });\n            }\n\n            if (item && item.ParentThumbImageTag) {\n                return ApiClient.getScaledImageUrl(item.ParentThumbItemId, {\n                    maxWidth: Math.round(dom.getScreenWidth() * 0.20),\n                    type: 'Thumb',\n                    tag: item.ParentThumbImageTag\n                });\n            }\n\n            if (item && item.ThumbImageTag) {\n                return ApiClient.getScaledImageUrl(item.ThumbItemId, {\n                    maxWidth: Math.round(dom.getScreenWidth() * 0.20),\n                    type: 'Thumb',\n                    tag: item.ThumbImageTag\n                });\n            }\n\n            if (item && imageTags.Primary) {\n                return ApiClient.getScaledImageUrl(item.Id, {\n                    maxWidth: Math.round(dom.getScreenWidth() * 0.20),\n                    type: 'Primary',\n                    tag: imageTags.Primary\n                });\n            }\n\n            if (item && item.PrimaryImageTag) {\n                return ApiClient.getScaledImageUrl(item.PrimaryImageItemId, {\n                    maxWidth: Math.round(dom.getScreenWidth() * 0.20),\n                    type: 'Primary',\n                    tag: item.PrimaryImageTag\n                });\n            }\n\n            if (item && item.AlbumPrimaryImageTag) {\n                return ApiClient.getScaledImageUrl(item.AlbumId, {\n                    maxWidth: Math.round(dom.getScreenWidth() * 0.20),\n                    type: 'Primary',\n                    tag: item.AlbumPrimaryImageTag\n                });\n            }\n\n            return null;\n        },\n        systemUpdateTaskKey: 'SystemUpdateTask',\n        stopTask: function (btn, id) {\n            const page = dom.parentWithClass(btn, 'page');\n            ApiClient.stopScheduledTask(id).then(function () {\n                pollForInfo(page, ApiClient);\n            });\n        },\n        restart: function (btn) {\n            import('confirm').then(({default: confirm}) => {\n                confirm({\n                    title: globalize.translate('HeaderRestart'),\n                    text: globalize.translate('MessageConfirmRestart'),\n                    confirmText: globalize.translate('ButtonRestart'),\n                    primary: 'delete'\n                }).then(function () {\n                    const page = dom.parentWithClass(btn, 'page');\n                    page.querySelector('#btnRestartServer').disabled = true;\n                    page.querySelector('#btnShutdown').disabled = true;\n                    ApiClient.restartServer();\n                });\n            });\n        },\n        shutdown: function (btn) {\n            import('confirm').then(({default: confirm}) => {\n                confirm({\n                    title: globalize.translate('ButtonShutdown'),\n                    text: globalize.translate('MessageConfirmShutdown'),\n                    confirmText: globalize.translate('ButtonShutdown'),\n                    primary: 'delete'\n                }).then(function () {\n                    const page = dom.parentWithClass(btn, 'page');\n                    page.querySelector('#btnRestartServer').disabled = true;\n                    page.querySelector('#btnShutdown').disabled = true;\n                    ApiClient.shutdownServer();\n                });\n            });\n        }\n    };\n    export default function (view, params) {\n        function onRestartRequired(evt, apiClient) {\n            console.debug('onRestartRequired not implemented', evt, apiClient);\n        }\n\n        function onServerShuttingDown(evt, apiClient) {\n            console.debug('onServerShuttingDown not implemented', evt, apiClient);\n        }\n\n        function onServerRestarting(evt, apiClient) {\n            console.debug('onServerRestarting not implemented', evt, apiClient);\n        }\n\n        function onPackageInstalling(evt, apiClient) {\n            if (apiClient.serverId() === serverId) {\n                pollForInfo(view, apiClient, true);\n                reloadSystemInfo(view, apiClient);\n            }\n        }\n\n        function onPackageInstallationCompleted(evt, apiClient) {\n            if (apiClient.serverId() === serverId) {\n                pollForInfo(view, apiClient, true);\n                reloadSystemInfo(view, apiClient);\n            }\n        }\n\n        function onSessionsUpdate(evt, apiClient, info) {\n            if (apiClient.serverId() === serverId) {\n                renderInfo(view, info);\n            }\n        }\n\n        function onScheduledTasksUpdate(evt, apiClient, info) {\n            if (apiClient.serverId() === serverId) {\n                renderRunningTasks(view, info);\n            }\n        }\n\n        const serverId = ApiClient.serverId();\n        view.querySelector('.activeDevices').addEventListener('click', onActiveDevicesClick);\n        view.addEventListener('viewshow', function () {\n            const page = this;\n            const apiClient = ApiClient;\n\n            if (apiClient) {\n                loading.show();\n                pollForInfo(page, apiClient);\n                DashboardPage.startInterval(apiClient);\n                events.on(serverNotifications, 'RestartRequired', onRestartRequired);\n                events.on(serverNotifications, 'ServerShuttingDown', onServerShuttingDown);\n                events.on(serverNotifications, 'ServerRestarting', onServerRestarting);\n                events.on(serverNotifications, 'PackageInstalling', onPackageInstalling);\n                events.on(serverNotifications, 'PackageInstallationCompleted', onPackageInstallationCompleted);\n                events.on(serverNotifications, 'Sessions', onSessionsUpdate);\n                events.on(serverNotifications, 'ScheduledTasksInfo', onScheduledTasksUpdate);\n                DashboardPage.lastAppUpdateCheck = null;\n                reloadSystemInfo(page, ApiClient);\n\n                if (!page.userActivityLog) {\n                    page.userActivityLog = new ActivityLog({\n                        serverId: ApiClient.serverId(),\n                        element: page.querySelector('.userActivityItems')\n                    });\n                }\n\n                if (ApiClient.isMinServerVersion('3.4.1.25')) {\n                    if (!page.serverActivityLog) {\n                        page.serverActivityLog = new ActivityLog({\n                            serverId: ApiClient.serverId(),\n                            element: page.querySelector('.serverActivityItems')\n                        });\n                    }\n                }\n\n                refreshActiveRecordings(view, apiClient);\n                loading.hide();\n            }\n        });\n        view.addEventListener('viewbeforehide', function () {\n            const apiClient = ApiClient;\n            events.off(serverNotifications, 'RestartRequired', onRestartRequired);\n            events.off(serverNotifications, 'ServerShuttingDown', onServerShuttingDown);\n            events.off(serverNotifications, 'ServerRestarting', onServerRestarting);\n            events.off(serverNotifications, 'PackageInstalling', onPackageInstalling);\n            events.off(serverNotifications, 'PackageInstallationCompleted', onPackageInstallationCompleted);\n            events.off(serverNotifications, 'Sessions', onSessionsUpdate);\n            events.off(serverNotifications, 'ScheduledTasksInfo', onScheduledTasksUpdate);\n\n            if (apiClient) {\n                DashboardPage.stopInterval(apiClient);\n            }\n        });\n        view.addEventListener('viewdestroy', function () {\n            const page = this;\n            const userActivityLog = page.userActivityLog;\n\n            if (userActivityLog) {\n                userActivityLog.destroy();\n            }\n\n            const serverActivityLog = page.serverActivityLog;\n\n            if (serverActivityLog) {\n                serverActivityLog.destroy();\n            }\n        });\n    }\n\n/* eslint-enable indent */\n"]}