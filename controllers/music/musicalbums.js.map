{"version":3,"sources":["controllers/music/musicalbums.js"],"names":["define","_require","_exports","_playbackManager","_loading","_events","_libraryBrowser","_imageLoader","_alphaPicker","_listView","_cardBuilder","userSettings","_globalize","_embyItemscontainer","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","value","_default","view","params","tabContent","_this","this","playAll","ApiClient","getItem","getCurrentUserId","topParentId","then","item","playbackManager","play","items","shuffle","getQuery","getPageData","getSavedQueryKey","pageData","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","ImageTypeLimit","EnableImageTypes","StartIndex","libraryBrowser","getSavedView","libraryPageSize","ParentId","loadSavedQueryValues","savedQueryKey","onViewStyleChange","viewStyle","getCurrentViewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","page","loading","show","isLoading","getItems","result","onNextPageClick","Limit","onPreviousPageClick","Math","max","html","window","scrollTo","updateFilterControls","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","listView","getListViewHtml","Items","context","sortBy","addToListButton","cardBuilder","getCardsHtml","shape","showTitle","coverImage","showParentTitle","lazy","cardLayout","centerText","overlayPlayButton","elems","querySelectorAll","i","length","addEventListener","imageLoader","lazyChildren","saveQueryValues","hide","Promise","_resolve","_reject","imported","_ref","autoFocus","alphaPicker","NameStartsWithOrGreater","showFilterMenu","_ref2","filterDialog","filterDialogFactory","mode","serverId","events","on","initPage","alphaPickerElement","e","newValue","detail","AlphaPicker","element","valueChangeEvent","showSortMenu","name","globalize","translate","id","callback","button","target","btnSelectView","showLayoutMenu","split","saveViewSetting","renderTab","destroy"],"mappings":"AAAAA,OAAO,CAAC,UAAW,UAAW,kBAAmB,UAAW,SAAU,iBAAkB,cAAe,cAAe,WAAY,cAAe,eAAgB,YAAa,wBAAwB,SAAUC,SAAUC,SAAUC,iBAAkBC,SAAUC,QAASC,gBAAiBC,aAAcC,aAAcC,UAAWC,aAAcC,aAAcC,WAAYC,qBACvW,aAiBA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KAEvF,SAASG,QAAQH,KAAmV,OAAtOG,QAArD,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAmC,SAASF,QAAQH,KAAO,cAAcA,KAA2B,SAASG,QAAQH,KAAO,OAAOA,KAAyB,mBAAXI,QAAyBJ,IAAIM,cAAgBF,QAAUJ,MAAQI,OAAOG,UAAY,gBAAkBP,MAAyBA,KAEnX,SAASQ,2BAA6B,GAAuB,mBAAZC,QAAwB,OAAO,KAAM,IAAIC,MAAQ,IAAID,QAA6F,OAAlFD,yBAA2B,SAASA,2BAA6B,OAAOE,OAAiBA,MAE1M,SAASC,wBAAwBX,KAAO,GAAIA,KAAOA,IAAIC,WAAc,OAAOD,IAAO,GAAY,OAARA,KAAiC,WAAjBG,QAAQH,MAAoC,mBAARA,IAAsB,MAAO,CAAEE,QAASF,KAAS,IAAIU,MAAQF,2BAA4B,GAAIE,OAASA,MAAME,IAAIZ,KAAQ,OAAOU,MAAMG,IAAIb,KAAQ,IAAIc,OAAS,GAAQC,sBAAwBC,OAAOC,gBAAkBD,OAAOE,yBAA0B,IAAK,IAAIC,OAAOnB,IAAO,GAAIgB,OAAOT,UAAUa,eAAeC,KAAKrB,IAAKmB,KAAM,CAAE,IAAIG,KAAOP,sBAAwBC,OAAOE,yBAAyBlB,IAAKmB,KAAO,KAAUG,OAASA,KAAKT,KAAOS,KAAKC,KAAQP,OAAOC,eAAeH,OAAQK,IAAKG,MAAgBR,OAAOK,KAAOnB,IAAImB,KAAyE,OAA7DL,OAAOZ,QAAUF,IAASU,OAASA,MAAMa,IAAIvB,IAAKc,QAAkBA,OArBhuBE,OAAOC,eAAe9B,SAAU,aAAc,CAC5CqC,OAAO,IAETrC,SAASe,QAQQ,SAAAuB,SAAUC,KAAMC,OAAQC,YAAY,IAAAC,MAAAC,KAC/C,SAASC,UACLC,UAAUC,QAAQD,UAAUE,mBAAoBP,OAAOQ,aAAaC,MAAK,SAAUC,MAC/EC,iBAAAA,QAAgBC,KAAK,CACjBC,MAAO,CAACH,WAKpB,SAASI,UACLT,UAAUC,QAAQD,UAAUE,mBAAoBP,OAAOQ,aAAaC,MAAK,SAAUC,MAC/EK,WACAJ,iBAAAA,QAAgBG,QAAQJ,KAAM,SAItC,SAASM,cACL,IAAMxB,IAAMyB,mBAyBZ,OAvBKC,WACDA,SAAW,CACPC,MAAO,CACHC,OAAQ,WACRC,UAAW,YACXC,iBAAkB,aAClBC,WAAW,EACXC,OAAQ,iDACRC,eAAgB,EAChBC,iBAAkB,gCAClBC,WAAY,GAEhB5B,KAAM6B,gBAAAA,QAAeC,aAAarC,MAAQ,UAG1CvB,aAAa6D,kBAAoB,IACjCZ,SAASC,MAAT,MAA0BlD,aAAa6D,mBAG3CZ,SAASC,MAAMY,SAAW/B,OAAOQ,YACjCoB,gBAAAA,QAAeI,qBAAqBxC,IAAK0B,SAASC,QAG/CD,SAGX,SAASH,WACL,OAAOC,cAAcG,MAGzB,SAASF,mBAKL,OAJKgB,gBACDA,cAAgBL,gBAAAA,QAAeX,iBAAiB,gBAG7CgB,cAGX,IAwHIA,cACAf,SAzHEgB,kBAAoB,SAApBA,oBACF,IAAMC,UAAYjC,MAAKkC,sBACjBC,eAAiBpC,WAAWqC,cAAc,mBAE/B,QAAbH,WACAE,eAAeE,UAAUC,IAAI,iBAC7BH,eAAeE,UAAUE,OAAO,mBAEhCJ,eAAeE,UAAUE,OAAO,iBAChCJ,eAAeE,UAAUC,IAAI,kBAGjCH,eAAeK,UAAY,IAGzBC,YAAc,SAAdA,YAAeC,MACjBC,SAAAA,QAAQC,OACRC,WAAY,EACZ,IAAM5B,MAAQJ,WACdV,UAAU2C,SAAS3C,UAAUE,mBAAoBY,OAAOV,MAAK,SAACwC,QAC1D,SAASC,kBACDH,YAIA9E,aAAa6D,kBAAoB,IACjCX,MAAMQ,YAAcR,MAAMgC,OAE9BR,YAAY1C,aAGhB,SAASmD,sBACDL,YAIA9E,aAAa6D,kBAAoB,IACjCX,MAAMQ,WAAa0B,KAAKC,IAAI,EAAGnC,MAAMQ,WAAaR,MAAMgC,QAE5DR,YAAY1C,aAKhB,IAAIsD,KAFJC,OAAOC,SAAS,EAAG,GACnBC,qBAAqBd,MAErB,IAAMe,WAAa/B,gBAAAA,QAAegC,mBAAmB,CACjDC,WAAY1C,MAAMQ,WAClBmC,MAAO3C,MAAMgC,MACbY,iBAAkBd,OAAOe,iBACzBC,WAAW,EACXC,uBAAuB,EACvBC,iBAAiB,EACjBC,YAAY,EACZC,cAAc,IAEZlC,UAAYjC,MAAKkC,sBAEnBmB,KADa,QAAbpB,UACOmC,UAAAA,QAASC,gBAAgB,CAC5B1D,MAAOoC,OAAOuB,MACdC,QAAS,QACTC,OAAQvD,MAAMC,OACduD,iBAAiB,IAED,cAAbxC,UACAyC,aAAAA,QAAYC,aAAa,CAC5BhE,MAAOoC,OAAOuB,MACdM,MAAO,SACPL,QAAS,QACTM,WAAW,EACXC,YAAY,EACZC,iBAAiB,EACjBC,MAAM,EACNC,YAAY,IAGTP,aAAAA,QAAYC,aAAa,CAC5BhE,MAAOoC,OAAOuB,MACdM,MAAO,SACPL,QAAS,QACTM,WAAW,EACXE,iBAAiB,EACjBC,MAAM,EACNE,YAAY,EACZC,mBAAmB,IAK3B,IAFA,IAAIC,MAAQrF,WAAWsF,iBAAiB,WAE/BC,EAAI,EAAGC,OAASH,MAAMG,OAAQD,EAAIC,OAAQD,IAC/CF,MAAME,GAAG9C,UAAYiB,WAIzB,IAAK,IAAI6B,GAAI,EAAGC,SADhBH,MAAQrF,WAAWsF,iBAAiB,iBACLE,OAAQD,GAAIC,QAAQD,KAC/CF,MAAME,IAAGE,iBAAiB,QAASxC,iBAIvC,IAAK,IAAIsC,IAAI,EAAGC,UADhBH,MAAQrF,WAAWsF,iBAAiB,qBACLE,OAAQD,IAAIC,SAAQD,MAC/CF,MAAME,KAAGE,iBAAiB,QAAStC,qBAGvC,IAAMf,eAAiBpC,WAAWqC,cAAc,mBAChDD,eAAeK,UAAYa,KAC3BoC,aAAAA,QAAYC,aAAavD,gBACzBT,gBAAAA,QAAeiE,gBAAgB5E,mBAAoBE,OACnD0B,SAAAA,QAAQiD,OACR/C,WAAY,EAEZ,IAAAgD,SAAA,SAAAC,SAAAC,SAAA,OAAA1I,SAAA,CAAO,gBAAP,SAAA2I,UAAA,OAAAF,SAAAhH,wBAAAkH,aAAAD,YAAsBxF,MAAK,SAAA0F,MAA4BA,KAA1B5H,QACb6H,UAAUnG,mBAK5ByD,qBAAuB,SAAvBA,qBAAwBzD,YAC1B,IAAMkB,MAAQJ,WACdb,MAAKmG,YAAYxG,MAAMsB,MAAMmF,0BAK7BvD,WAAY,EAEhB5C,KAAKoG,eAAiB,WAClB,IAAAR,SAAA,SAAAC,SAAAC,SAAA,OAAA1I,SAAA,CAAO,yCAAP,SAAA2I,UAAA,OAAAF,SAAAhH,wBAAAkH,aAAAD,YAA+CxF,MAAK,SAAA+F,OAAoC,IAC9EC,aAAe,IAAIC,EAD2DF,MAAlCjI,SACL,CACzC4C,MAAOJ,WACP4F,KAAM,SACNC,SAAUvG,UAAUuG,aAExBC,QAAAA,QAAOC,GAAGL,aAAc,gBAAgB,WACpC1F,WAAWY,WAAa,EACxBgB,YAAY1C,eAEhBwG,aAAa3D,WAIrB3C,KAAKiC,oBAAsB,WACvB,OAAOpB,cAAcjB,MAGR,SAAXgH,SAAY9G,YACd,IAAM+G,mBAAqB/G,WAAWqC,cAAc,gBAC9CD,eAAiBpC,WAAWqC,cAAc,mBAEhD0E,mBAAmBtB,iBAAiB,qBAAqB,SAAUuB,GAC/D,IAAMC,SAAWD,EAAEE,OAAOtH,MACpBsB,MAAQJ,WACdI,MAAMmF,wBAA0BY,SAChC/F,MAAMQ,WAAa,EACnBgB,YAAY1C,eAEhBC,MAAKmG,YAAc,IAAIe,aAAAA,QAAY,CAC/BC,QAASL,mBACTM,iBAAkB,UAGtBrH,WAAWqC,cAAc,gBAAgBC,UAAUC,IAAI,wBACvDwE,mBAAmBzE,UAAUC,IAAI,2BACjCH,eAAeE,UAAUC,IAAI,gCAE7BvC,WAAWqC,cAAc,cAAcoD,iBAAiB,SAAS,WAC7DxF,MAAKqG,oBAETtG,WAAWqC,cAAc,YAAYoD,iBAAiB,SAAS,SAACuB,GAC5DrF,gBAAAA,QAAe2F,aAAa,CACxB1G,MAAO,CAAC,CACJ2G,KAAMC,WAAAA,QAAUC,UAAU,kBAC1BC,GAAI,YACL,CACCH,KAAMC,WAAAA,QAAUC,UAAU,qBAC1BC,GAAI,wBACL,CACCH,KAAMC,WAAAA,QAAUC,UAAU,yBAC1BC,GAAI,4BACL,CACCH,KAAMC,WAAAA,QAAUC,UAAU,sBAC1BC,GAAI,yBACL,CACCH,KAAMC,WAAAA,QAAUC,UAAU,mBAC1BC,GAAI,wBACL,CACCH,KAAMC,WAAAA,QAAUC,UAAU,qBAC1BC,GAAI,wCACL,CACCH,KAAMC,WAAAA,QAAUC,UAAU,gBAC1BC,GAAI,oBAERC,SAAU,SAAAA,WACN7G,WAAWY,WAAa,EACxBgB,YAAY1C,aAEhBkB,MAAOJ,WACP8G,OAAQZ,EAAEa,YAGlB,IAAMC,cAAgB9H,WAAWqC,cAAc,kBAC/CyF,cAAcrC,iBAAiB,SAAS,SAACuB,GACrCrF,gBAAAA,QAAeoG,eAAef,EAAEa,OAAQ5H,MAAKkC,sBAAuB,yBAAyB6F,MAAM,SAEvGF,cAAcrC,iBAAiB,gBAAgB,SAAUuB,GACrD,IAAM9E,UAAY8E,EAAEE,OAAOhF,UAC3BnB,cAAcjB,KAAOoC,UACrBP,gBAAAA,QAAesG,gBAAgBjH,mBAAoBkB,WACnDpB,WAAWY,WAAa,EACxBO,oBACAS,YAAY1C,eAEhBA,WAAWqC,cAAc,eAAeoD,iBAAiB,QAAStF,SAClEH,WAAWqC,cAAc,eAAeoD,iBAAiB,QAAS5E,SAGtEiG,CAAS9G,YACTiC,oBAEA/B,KAAKgI,UAAY,WACbxF,YAAY1C,YACZyD,qBAAqBzD,aAGzBE,KAAKiI,QAAU,cArSvB3K,iBAAAW,uBAAAX,kBACAC,SAAAU,uBAAAV,UACAC,QAAAS,uBAAAT,SACAC,gBAAAQ,uBAAAR,iBACAC,aAAAO,uBAAAP,cACAC,aAAAM,uBAAAN,cACAC,UAAAK,uBAAAL,WACAC,aAAAI,uBAAAJ,cACAC,aAAAe,wBAAAf,cACAC,WAAAE,uBAAAF","file":"musicalbums.js","sourcesContent":["import playbackManager from 'playbackManager';\nimport loading from 'loading';\nimport events from 'events';\nimport libraryBrowser from 'libraryBrowser';\nimport imageLoader from 'imageLoader';\nimport AlphaPicker from 'alphaPicker';\nimport listView from 'listView';\nimport cardBuilder from 'cardBuilder';\nimport * as userSettings from 'userSettings';\nimport globalize from 'globalize';\nimport 'emby-itemscontainer';\n\n/* eslint-disable indent */\n\n    export default function (view, params, tabContent) {\n        function playAll() {\n            ApiClient.getItem(ApiClient.getCurrentUserId(), params.topParentId).then(function (item) {\n                playbackManager.play({\n                    items: [item]\n                });\n            });\n        }\n\n        function shuffle() {\n            ApiClient.getItem(ApiClient.getCurrentUserId(), params.topParentId).then(function (item) {\n                getQuery();\n                playbackManager.shuffle(item, null);\n            });\n        }\n\n        function getPageData() {\n            const key = getSavedQueryKey();\n\n            if (!pageData) {\n                pageData = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'MusicAlbum',\n                        Recursive: true,\n                        Fields: 'PrimaryImageAspectRatio,SortName,BasicSyncInfo',\n                        ImageTypeLimit: 1,\n                        EnableImageTypes: 'Primary,Backdrop,Banner,Thumb',\n                        StartIndex: 0\n                    },\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n\n                if (userSettings.libraryPageSize() > 0) {\n                    pageData.query['Limit'] = userSettings.libraryPageSize();\n                }\n\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery() {\n            return getPageData().query;\n        }\n\n        function getSavedQueryKey() {\n            if (!savedQueryKey) {\n                savedQueryKey = libraryBrowser.getSavedQueryKey('musicalbums');\n            }\n\n            return savedQueryKey;\n        }\n\n        const onViewStyleChange = () => {\n            const viewStyle = this.getCurrentViewStyle();\n            const itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            if (viewStyle == 'List') {\n                itemsContainer.classList.add('vertical-list');\n                itemsContainer.classList.remove('vertical-wrap');\n            } else {\n                itemsContainer.classList.remove('vertical-list');\n                itemsContainer.classList.add('vertical-wrap');\n            }\n\n            itemsContainer.innerHTML = '';\n        };\n\n        const reloadItems = (page) => {\n            loading.show();\n            isLoading = true;\n            const query = getQuery();\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then((result) => {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex += query.Limit;\n                    }\n                    reloadItems(tabContent);\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex = Math.max(0, query.StartIndex - query.Limit);\n                    }\n                    reloadItems(tabContent);\n                }\n\n                window.scrollTo(0, 0);\n                updateFilterControls(page);\n                let html;\n                const pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                const viewStyle = this.getCurrentViewStyle();\n                if (viewStyle == 'List') {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        context: 'music',\n                        sortBy: query.SortBy,\n                        addToListButton: true\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'square',\n                        context: 'music',\n                        showTitle: true,\n                        coverImage: true,\n                        showParentTitle: true,\n                        lazy: true,\n                        cardLayout: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'square',\n                        context: 'music',\n                        showTitle: true,\n                        showParentTitle: true,\n                        lazy: true,\n                        centerText: true,\n                        overlayPlayButton: true\n                    });\n                }\n                let elems = tabContent.querySelectorAll('.paging');\n\n                for (let i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll('.btnNextPage');\n                for (let i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll('.btnPreviousPage');\n                for (let i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onPreviousPageClick);\n                }\n\n                const itemsContainer = tabContent.querySelector('.itemsContainer');\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(), query);\n                loading.hide();\n                isLoading = false;\n\n                import('autoFocuser').then(({default: autoFocuser}) => {\n                    autoFocuser.autoFocus(tabContent);\n                });\n            });\n        };\n\n        const updateFilterControls = (tabContent) => {\n            const query = getQuery();\n            this.alphaPicker.value(query.NameStartsWithOrGreater);\n        };\n\n        let savedQueryKey;\n        let pageData;\n        let isLoading = false;\n\n        this.showFilterMenu = function () {\n            import('components/filterdialog/filterdialog').then(({default: filterDialogFactory}) => {\n                const filterDialog = new filterDialogFactory({\n                    query: getQuery(),\n                    mode: 'albums',\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, 'filterchange', function () {\n                    getQuery().StartIndex = 0;\n                    reloadItems(tabContent);\n                });\n                filterDialog.show();\n            });\n        };\n\n        this.getCurrentViewStyle = function () {\n            return getPageData().view;\n        };\n\n        const initPage = (tabContent) => {\n            const alphaPickerElement = tabContent.querySelector('.alphaPicker');\n            const itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            alphaPickerElement.addEventListener('alphavaluechanged', function (e) {\n                const newValue = e.detail.value;\n                const query = getQuery();\n                query.NameStartsWithOrGreater = newValue;\n                query.StartIndex = 0;\n                reloadItems(tabContent);\n            });\n            this.alphaPicker = new AlphaPicker({\n                element: alphaPickerElement,\n                valueChangeEvent: 'click'\n            });\n\n            tabContent.querySelector('.alphaPicker').classList.add('alphabetPicker-right');\n            alphaPickerElement.classList.add('alphaPicker-fixed-right');\n            itemsContainer.classList.add('padded-right-withalphapicker');\n\n            tabContent.querySelector('.btnFilter').addEventListener('click', () => {\n                this.showFilterMenu();\n            });\n            tabContent.querySelector('.btnSort').addEventListener('click', (e) => {\n                libraryBrowser.showSortMenu({\n                    items: [{\n                        name: globalize.translate('OptionNameSort'),\n                        id: 'SortName'\n                    }, {\n                        name: globalize.translate('OptionAlbumArtist'),\n                        id: 'AlbumArtist,SortName'\n                    }, {\n                        name: globalize.translate('OptionCommunityRating'),\n                        id: 'CommunityRating,SortName'\n                    }, {\n                        name: globalize.translate('OptionCriticRating'),\n                        id: 'CriticRating,SortName'\n                    }, {\n                        name: globalize.translate('OptionDateAdded'),\n                        id: 'DateCreated,SortName'\n                    }, {\n                        name: globalize.translate('OptionReleaseDate'),\n                        id: 'ProductionYear,PremiereDate,SortName'\n                    }, {\n                        name: globalize.translate('OptionRandom'),\n                        id: 'Random,SortName'\n                    }],\n                    callback: function () {\n                        getQuery().StartIndex = 0;\n                        reloadItems(tabContent);\n                    },\n                    query: getQuery(),\n                    button: e.target\n                });\n            });\n            const btnSelectView = tabContent.querySelector('.btnSelectView');\n            btnSelectView.addEventListener('click', (e) => {\n                libraryBrowser.showLayoutMenu(e.target, this.getCurrentViewStyle(), 'List,Poster,PosterCard'.split(','));\n            });\n            btnSelectView.addEventListener('layoutchange', function (e) {\n                const viewStyle = e.detail.viewStyle;\n                getPageData().view = viewStyle;\n                libraryBrowser.saveViewSetting(getSavedQueryKey(), viewStyle);\n                getQuery().StartIndex = 0;\n                onViewStyleChange();\n                reloadItems(tabContent);\n            });\n            tabContent.querySelector('.btnPlayAll').addEventListener('click', playAll);\n            tabContent.querySelector('.btnShuffle').addEventListener('click', shuffle);\n        };\n\n        initPage(tabContent);\n        onViewStyleChange();\n\n        this.renderTab = function () {\n            reloadItems(tabContent);\n            updateFilterControls(tabContent);\n        };\n\n        this.destroy = function () {};\n    }\n\n/* eslint-enable indent */\n"]}