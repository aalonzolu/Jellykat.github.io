{"version":3,"sources":["controllers/music/musicgenres.js"],"names":["define","_require","_exports","_libraryBrowser","_cardBuilder","_imageLoader","_loading","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","Object","defineProperty","value","_default","view","params","tabContent","_this","this","getPageData","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","Recursive","Fields","StartIndex","libraryBrowser","getSavedView","ParentId","topParentId","loadSavedQueryValues","getQuery","reloadItems","context","promise","then","result","html","viewStyle","getCurrentViewStyle","cardBuilder","getCardsHtml","items","Items","shape","preferThumb","centerText","overlayMoreButton","showTitle","cardLayout","elem","querySelector","innerHTML","imageLoader","lazyChildren","saveQueryValues","loading","hide","Promise","_resolve","_reject","imported","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","call","desc","set","_ref","autoFocus","getViewStyles","split","setCurrentViewStyle","saveViewSetting","fullyReload","preRender","renderTab","enableViewSelection","getPromise","show","ApiClient","getGenres","getCurrentUserId"],"mappings":"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","file":"musicgenres.js","sourcesContent":["import libraryBrowser from 'libraryBrowser';\nimport cardBuilder from 'cardBuilder';\nimport imageLoader from 'imageLoader';\nimport loading from 'loading';\n\n/* eslint-disable indent */\n\n    export default function (view, params, tabContent) {\n        function getPageData() {\n            const key = getSavedQueryKey();\n            let pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        Recursive: true,\n                        Fields: 'PrimaryImageAspectRatio,ItemCounts',\n                        StartIndex: 0\n                    },\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery() {\n            return getPageData().query;\n        }\n\n        function getSavedQueryKey() {\n            return libraryBrowser.getSavedQueryKey('genres');\n        }\n\n        function getPromise() {\n            loading.show();\n            const query = getQuery();\n            return ApiClient.getGenres(ApiClient.getCurrentUserId(), query);\n        }\n\n        const reloadItems = (context, promise) => {\n            const query = getQuery();\n            promise.then((result) => {\n                let html = '';\n                const viewStyle = this.getCurrentViewStyle();\n\n                if (viewStyle == 'Thumb') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        preferThumb: true,\n                        context: 'music',\n                        centerText: true,\n                        overlayMoreButton: true,\n                        showTitle: true\n                    });\n                } else if (viewStyle == 'ThumbCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        preferThumb: true,\n                        context: 'music',\n                        cardLayout: true,\n                        showTitle: true\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'auto',\n                        context: 'music',\n                        cardLayout: true,\n                        showTitle: true\n                    });\n                } else if (viewStyle == 'Poster') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'auto',\n                        context: 'music',\n                        centerText: true,\n                        overlayMoreButton: true,\n                        showTitle: true\n                    });\n                }\n\n                const elem = context.querySelector('#items');\n                elem.innerHTML = html;\n                imageLoader.lazyChildren(elem);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(), query);\n                loading.hide();\n\n                import('autoFocuser').then(({default: autoFocuser}) => {\n                    autoFocuser.autoFocus(context);\n                });\n            });\n        };\n\n        function fullyReload() {\n            this.preRender();\n            this.renderTab();\n        }\n\n        const data = {};\n\n        this.getViewStyles = function () {\n            return 'Poster,PosterCard,Thumb,ThumbCard'.split(',');\n        };\n\n        this.getCurrentViewStyle = function () {\n            return getPageData().view;\n        };\n\n        this.setCurrentViewStyle = function (viewStyle) {\n            getPageData().view = viewStyle;\n            libraryBrowser.saveViewSetting(getSavedQueryKey(), viewStyle);\n            fullyReload();\n        };\n\n        this.enableViewSelection = true;\n        let promise;\n\n        this.preRender = function () {\n            promise = getPromise();\n        };\n\n        this.renderTab = function () {\n            reloadItems(tabContent, promise);\n        };\n    }\n\n/* eslint-enable indent */\n"]}