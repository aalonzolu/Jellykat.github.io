{"version":3,"sources":["controllers/music/musicplaylists.js"],"names":["define","_require","_exports","_libraryBrowser","_cardBuilder","_imageLoader","_loading","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","Object","defineProperty","value","_default","view","params","tabContent","getPageData","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","StartIndex","libraryBrowser","getSavedView","ParentId","topParentId","loadSavedQueryValues","getQuery","reloadItems","context","promise","then","result","html","cardBuilder","getCardsHtml","items","Items","shape","showTitle","coverImage","centerText","overlayPlayButton","allowBottomPadding","cardLayout","elem","querySelector","innerHTML","imageLoader","lazyChildren","saveQueryValues","loading","hide","Promise","_resolve","_reject","imported","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","call","desc","set","_ref","autoFocus","this","getCurrentViewStyle","preRender","getPromise","show","ApiClient","getItems","getCurrentUserId","renderTab"],"mappings":"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","file":"musicplaylists.js","sourcesContent":["import libraryBrowser from 'libraryBrowser';\nimport cardBuilder from 'cardBuilder';\nimport imageLoader from 'imageLoader';\nimport loading from 'loading';\n\n/* eslint-disable indent */\n\n    export default function (view, params, tabContent) {\n        function getPageData() {\n            const key = getSavedQueryKey();\n            let pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'Playlist',\n                        Recursive: true,\n                        Fields: 'PrimaryImageAspectRatio,SortName,CanDelete',\n                        StartIndex: 0\n                    },\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery() {\n            return getPageData().query;\n        }\n\n        function getSavedQueryKey() {\n            return libraryBrowser.getSavedQueryKey('genres');\n        }\n\n        function getPromise() {\n            loading.show();\n            const query = getQuery();\n            return ApiClient.getItems(ApiClient.getCurrentUserId(), query);\n        }\n\n        function reloadItems(context, promise) {\n            const query = getQuery();\n            promise.then(function (result) {\n                let html = '';\n                html = cardBuilder.getCardsHtml({\n                    items: result.Items,\n                    shape: 'square',\n                    showTitle: true,\n                    coverImage: true,\n                    centerText: true,\n                    overlayPlayButton: true,\n                    allowBottomPadding: true,\n                    cardLayout: false\n                });\n                const elem = context.querySelector('#items');\n                elem.innerHTML = html;\n                imageLoader.lazyChildren(elem);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(), query);\n                loading.hide();\n\n                import('autoFocuser').then(({default: autoFocuser}) => {\n                    autoFocuser.autoFocus(context);\n                });\n            });\n        }\n\n        const data = {};\n\n        this.getCurrentViewStyle = function () {\n            return getPageData().view;\n        };\n\n        let promise;\n\n        this.preRender = function () {\n            promise = getPromise();\n        };\n\n        this.renderTab = function () {\n            reloadItems(tabContent, promise);\n        };\n    }\n\n/* eslint-enable indent */\n"]}