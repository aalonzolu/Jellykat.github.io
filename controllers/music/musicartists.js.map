{"version":3,"sources":["controllers/music/musicartists.js"],"names":["define","_require","_exports","_loading","_events","_libraryBrowser","_imageLoader","_alphaPicker","_listView","_cardBuilder","userSettings","_embyItemscontainer","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","value","_default","view","params","tabContent","_this","this","getPageData","context","getSavedQueryKey","pageData","data","queryValues","SortBy","SortOrder","Recursive","Fields","StartIndex","ImageTypeLimit","EnableImageTypes","libraryPageSize","query","libraryBrowser","getSavedView","ParentId","topParentId","loadSavedQueryValues","getQuery","savedQueryKey","mode","onViewStyleChange","viewStyle","getCurrentViewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","page","loading","show","isLoading","ApiClient","getAlbumArtists","getCurrentUserId","getArtists","then","result","onNextPageClick","Limit","onPreviousPageClick","Math","max","html","window","scrollTo","updateFilterControls","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","listView","getListViewHtml","items","Items","sortBy","cardBuilder","getCardsHtml","shape","showTitle","coverImage","cardLayout","lazy","centerText","overlayPlayButton","elems","querySelectorAll","i","length","addEventListener","imageLoader","lazyChildren","saveQueryValues","hide","Promise","_resolve","_reject","imported","_ref","autoFocus","alphaPicker","NameStartsWithOrGreater","showFilterMenu","_this2","_ref2","filterDialog","filterDialogFactory","serverId","events","on","initPage","alphaPickerElement","e","newValue","detail","AlphaPicker","element","valueChangeEvent","btnSelectView","showLayoutMenu","target","split","saveViewSetting","renderTab","destroy"],"mappings":"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","file":"musicartists.js","sourcesContent":["import loading from 'loading';\nimport events from 'events';\nimport libraryBrowser from 'libraryBrowser';\nimport imageLoader from 'imageLoader';\nimport AlphaPicker from 'alphaPicker';\nimport listView from 'listView';\nimport cardBuilder from 'cardBuilder';\nimport * as userSettings from 'userSettings';\nimport 'emby-itemscontainer';\n\n/* eslint-disable indent */\n\n    export default function (view, params, tabContent) {\n        function getPageData(context) {\n            const key = getSavedQueryKey(context);\n            let pageData = data[key];\n\n            if (!pageData) {\n                const queryValues = {\n                    SortBy: 'SortName',\n                    SortOrder: 'Ascending',\n                    Recursive: true,\n                    Fields: 'PrimaryImageAspectRatio,SortName,BasicSyncInfo',\n                    StartIndex: 0,\n                    ImageTypeLimit: 1,\n                    EnableImageTypes: 'Primary,Backdrop,Banner,Thumb'\n                };\n\n                if (userSettings.libraryPageSize() > 0) {\n                    queryValues['Limit'] = userSettings.libraryPageSize();\n                }\n\n                pageData = data[key] = {\n                    query: queryValues,\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery(context) {\n            return getPageData(context).query;\n        }\n\n        const getSavedQueryKey = (context) => {\n            if (!context.savedQueryKey) {\n                context.savedQueryKey = libraryBrowser.getSavedQueryKey(this.mode);\n            }\n\n            return context.savedQueryKey;\n        };\n\n        const onViewStyleChange = () => {\n            const viewStyle = this.getCurrentViewStyle();\n            const itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            if (viewStyle == 'List') {\n                itemsContainer.classList.add('vertical-list');\n                itemsContainer.classList.remove('vertical-wrap');\n            } else {\n                itemsContainer.classList.remove('vertical-list');\n                itemsContainer.classList.add('vertical-wrap');\n            }\n\n            itemsContainer.innerHTML = '';\n        };\n\n        const reloadItems = (page) => {\n            loading.show();\n            isLoading = true;\n            const query = getQuery(page);\n            const promise = this.mode == 'albumartists' ?\n                ApiClient.getAlbumArtists(ApiClient.getCurrentUserId(), query) :\n                ApiClient.getArtists(ApiClient.getCurrentUserId(), query);\n            promise.then((result) => {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex += query.Limit;\n                    }\n                    reloadItems(tabContent);\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex = Math.max(0, query.StartIndex - query.Limit);\n                    }\n                    reloadItems(tabContent);\n                }\n\n                window.scrollTo(0, 0);\n                updateFilterControls(page);\n                let html;\n                const pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                const viewStyle = this.getCurrentViewStyle();\n                if (viewStyle == 'List') {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        sortBy: query.SortBy\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'square',\n                        context: 'music',\n                        showTitle: true,\n                        coverImage: true,\n                        cardLayout: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'square',\n                        context: 'music',\n                        showTitle: true,\n                        coverImage: true,\n                        lazy: true,\n                        centerText: true,\n                        overlayPlayButton: true\n                    });\n                }\n                let elems = tabContent.querySelectorAll('.paging');\n\n                for (let i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll('.btnNextPage');\n                for (let i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll('.btnPreviousPage');\n                for (let i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onPreviousPageClick);\n                }\n\n                const itemsContainer = tabContent.querySelector('.itemsContainer');\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(page), query);\n                loading.hide();\n                isLoading = false;\n\n                import('autoFocuser').then(({default: autoFocuser}) => {\n                    autoFocuser.autoFocus(tabContent);\n                });\n            });\n        };\n\n        const updateFilterControls = (tabContent) => {\n            const query = getQuery(tabContent);\n            this.alphaPicker.value(query.NameStartsWithOrGreater);\n        };\n\n        const data = {};\n        let isLoading = false;\n\n        this.showFilterMenu = function () {\n            import('components/filterdialog/filterdialog').then(({default: filterDialogFactory}) => {\n                const filterDialog = new filterDialogFactory({\n                    query: getQuery(tabContent),\n                    mode: this.mode,\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, 'filterchange', function () {\n                    getQuery(tabContent).StartIndex = 0;\n                    reloadItems(tabContent);\n                });\n                filterDialog.show();\n            });\n        };\n\n        this.getCurrentViewStyle = function () {\n            return getPageData(tabContent).view;\n        };\n\n        const initPage = (tabContent) => {\n            const alphaPickerElement = tabContent.querySelector('.alphaPicker');\n            const itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            alphaPickerElement.addEventListener('alphavaluechanged', function (e) {\n                const newValue = e.detail.value;\n                const query = getQuery(tabContent);\n                query.NameStartsWithOrGreater = newValue;\n                query.StartIndex = 0;\n                reloadItems(tabContent);\n            });\n            this.alphaPicker = new AlphaPicker({\n                element: alphaPickerElement,\n                valueChangeEvent: 'click'\n            });\n\n            tabContent.querySelector('.alphaPicker').classList.add('alphabetPicker-right');\n            alphaPickerElement.classList.add('alphaPicker-fixed-right');\n            itemsContainer.classList.add('padded-right-withalphapicker');\n\n            tabContent.querySelector('.btnFilter').addEventListener('click', () => {\n                this.showFilterMenu();\n            });\n            const btnSelectView = tabContent.querySelector('.btnSelectView');\n            btnSelectView.addEventListener('click', function (e) {\n                libraryBrowser.showLayoutMenu(e.target, this.getCurrentViewStyle(), 'List,Poster,PosterCard'.split(','));\n            });\n            btnSelectView.addEventListener('layoutchange', function (e) {\n                const viewStyle = e.detail.viewStyle;\n                getPageData(tabContent).view = viewStyle;\n                libraryBrowser.saveViewSetting(getSavedQueryKey(tabContent), viewStyle);\n                getQuery(tabContent).StartIndex = 0;\n                onViewStyleChange();\n                reloadItems(tabContent);\n            });\n        };\n\n        initPage(tabContent);\n        onViewStyleChange();\n\n        this.renderTab = function () {\n            reloadItems(tabContent);\n            updateFilterControls(tabContent);\n        };\n\n        this.destroy = function () {};\n    }\n\n/* eslint-enable indent */\n"]}