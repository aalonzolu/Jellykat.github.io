{"version":3,"sources":["controllers/user/playback/index.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","define","_exports","_playbackSettings","userSettings","_autoFocuser","_listViewStyle","_getRequireWildcardCache","WeakMap","cache","_interopRequireDefault","__esModule","default","Object","defineProperty","value","_default","view","params","onBeforeUnload","e","hasChanges","returnValue","settingsInstance","userId","ApiClient","getCurrentUserId","currentSettings","UserSettings","addEventListener","window","loadData","PlaybackSettings","serverId","element","querySelector","enableSaveButton","enableSaveConfirmation","autoFocus","autoFocuser","isEnabled","destroy","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set"],"mappings":"AAAA,SAASA,QAAQC,KAAmV,OAAtOD,QAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAASH,QAAQC,KAAO,cAAcA,KAA2B,SAASD,QAAQC,KAAO,OAAOA,KAAyB,mBAAXC,QAAyBD,IAAIG,cAAgBF,QAAUD,MAAQC,OAAOG,UAAY,gBAAkBJ,MAAyBA,KAEnXK,OAAO,CAAC,UAAW,mBAAoB,eAAgB,cAAe,kBAAkB,SAAUC,SAAUC,kBAAmBC,aAAcC,aAAcC,gBACzJ,aAUA,SAASC,2BAA6B,GAAuB,mBAAZC,QAAwB,OAAO,KAAM,IAAIC,MAAQ,IAAID,QAA6F,OAAlFD,yBAA2B,SAASA,2BAA6B,OAAOE,OAAiBA,MAI1M,SAASC,uBAAuBd,KAAO,OAAOA,KAAOA,IAAIe,WAAaf,IAAM,CAAEgB,QAAShB,KAZvFiB,OAAOC,eAAeZ,SAAU,aAAc,CAC5Ca,OAAO,IAETb,SAASU,QAEQ,SAAAI,SAAUC,KAAMC,QAC3B,SAASC,eAAeC,GAChBC,aACAD,EAAEE,YAAc,uEAIxB,IAAIC,iBACAF,WACEG,OAASN,OAAOM,QAAUC,UAAUC,mBACpCC,gBAAkBH,SAAWC,UAAUC,mBAAqBtB,aAAe,IAAIwB,aACrFX,KAAKY,iBAAiB,YAAY,WAC9BC,OAAOD,iBAAiB,eAAgBV,gBAEpCI,iBACAA,iBAAiBQ,WAEjBR,iBAAmB,IAAIS,kBAAAA,QAAiB,CACpCC,SAAUR,UAAUQ,WACpBT,OAAQA,OACRU,QAASjB,KAAKkB,cAAc,sBAC5B/B,aAAcuB,gBACdS,kBAAkB,EAClBC,wBAAwB,EACxBC,UAAWC,aAAAA,QAAYC,iBAKnCvB,KAAKY,iBAAiB,UAAU,WAC5BR,YAAa,KAGjBJ,KAAKY,iBAAiB,eAAe,WAC7BN,mBACAA,iBAAiBkB,UACjBlB,iBAAmB,UA9CnCpB,kBAAAO,uBAAAP,mBACAC,aAcE,SAASsC,wBAAwB9C,KAAO,GAAIA,KAAOA,IAAIe,WAAc,OAAOf,IAAO,GAAY,OAARA,KAAiC,WAAjBD,QAAQC,MAAoC,mBAARA,IAAsB,MAAO,CAAEgB,QAAShB,KAAS,IAAIa,MAAQF,2BAA4B,GAAIE,OAASA,MAAMkC,IAAI/C,KAAQ,OAAOa,MAAMmC,IAAIhD,KAAQ,IAAIiD,OAAS,GAAQC,sBAAwBjC,OAAOC,gBAAkBD,OAAOkC,yBAA0B,IAAK,IAAIC,OAAOpD,IAAO,GAAIiB,OAAOb,UAAUiD,eAAeC,KAAKtD,IAAKoD,KAAM,CAAE,IAAIG,KAAOL,sBAAwBjC,OAAOkC,yBAAyBnD,IAAKoD,KAAO,KAAUG,OAASA,KAAKP,KAAOO,KAAKC,KAAQvC,OAAOC,eAAe+B,OAAQG,IAAKG,MAAgBN,OAAOG,KAAOpD,IAAIoD,KAAYH,OAAOjC,QAAUhB,IAASa,OAASA,MAAM2C,IAAIxD,IAAKiD,QAAW,OAAOA,OAdluBH,CAAAtC,cACAC,aAAAK,uBAAAL,cAMI,IAAMuB,aAAexB,aAAawB","file":"index.js","sourcesContent":["import PlaybackSettings from 'playbackSettings';\nimport * as userSettings from 'userSettings';\nimport autoFocuser from 'autoFocuser';\nimport 'listViewStyle';\n\n/* eslint-disable indent */\n\n    // Shortcuts\n    const UserSettings = userSettings.UserSettings;\n\n    export default function (view, params) {\n        function onBeforeUnload(e) {\n            if (hasChanges) {\n                e.returnValue = 'You currently have unsaved changes. Are you sure you wish to leave?';\n            }\n        }\n\n        let settingsInstance;\n        let hasChanges;\n        const userId = params.userId || ApiClient.getCurrentUserId();\n        const currentSettings = userId === ApiClient.getCurrentUserId() ? userSettings : new UserSettings();\n        view.addEventListener('viewshow', function () {\n            window.addEventListener('beforeunload', onBeforeUnload);\n\n            if (settingsInstance) {\n                settingsInstance.loadData();\n            } else {\n                settingsInstance = new PlaybackSettings({\n                    serverId: ApiClient.serverId(),\n                    userId: userId,\n                    element: view.querySelector('.settingsContainer'),\n                    userSettings: currentSettings,\n                    enableSaveButton: true,\n                    enableSaveConfirmation: true,\n                    autoFocus: autoFocuser.isEnabled()\n                });\n            }\n        });\n\n        view.addEventListener('change', function () {\n            hasChanges = true;\n        });\n\n        view.addEventListener('viewdestroy', function () {\n            if (settingsInstance) {\n                settingsInstance.destroy();\n                settingsInstance = null;\n            }\n        });\n    }\n\n/* eslint-enable indent */\n"]}