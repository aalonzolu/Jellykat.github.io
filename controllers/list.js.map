{"version":3,"sources":["controllers/list.js"],"names":["define","_require","_exports","_globalize","_listView","_layoutManager","userSettings","_focusManager","_cardBuilder","_loading","_connectionManager","_alphaNumericShortcuts","_playbackManager","_alphaPicker","_embyItemscontainer","_embyScroller","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","call","desc","set","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","minLen","_arrayLikeToArray","n","toString","slice","name","from","test","F","s","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","arr","len","arr2","getInitialLiveTvQuery","instance","params","query","UserId","connectionManager","getApiClient","serverId","getCurrentUserId","StartIndex","Fields","Limit","type","IsInProgress","HasAired","genreId","GenreIds","IsMovie","IsSeries","IsNews","IsSports","IsKids","IsAiring","modifyQueryWithFilters","hasFilters","sortValues","getSortValues","SortBy","sortBy","SortOrder","sortOrder","ImageTypeLimit","queryFilters","filters","getFilters","IsPlayed","push","IsUnplayed","IsFavorite","IsResumable","VideoTypes","Is4K","IsHD","IsSD","Is3D","HasSubtitles","HasTrailer","HasSpecialFeature","HasThemeSong","HasThemeVideo","Filters","join","setFilterStatus","alphaPicker","NameStartsWithOrGreater","updateSortText","btnSortText","_step","options","getSortMenuOptions","values","_iterator","option","innerHTML","globalize","translate","btnSortIcon","setSortButtonIcon","icon","classList","remove","add","updateItemsContainerForViewType","getViewSettings","imageType","itemsContainer","updateAlphaPickerState","numItems","alphaPickerElement","parentNode","getItems","item","startIndex","limit","apiClient","queryRecursive","getLiveTvRecordings","getLiveTvRecommendedPrograms","getLiveTvPrograms","getNextUpEpisodes","EnableImageTypes","EnableTotalRecordCount","method","IncludeItemTypes","Recursive","ArtistIds","artistId","Type","parentId","StudioIds","Id","PersonIds","CollectionType","ParentId","showViewSettingsMenu","this","Promise","_resolve","_reject","imported","then","_ref","ViewSettings","show","settingsKey","getSettingsKey","settings","visibleSettings","getVisibleViewSettings","refreshItems","showFilterMenu","_ref2","FilterMenu","getVisibleFilters","onChange","bind","itemTypes","getItemTypes","filterMenuOptions","getFilterMenuOptions","showSortMenu","_ref3","SortMenu","sortOptions","onNewItemClick","_ref4","playlistEditor","items","hideOrShowAll","elems","hide","_step2","_iterator2","elem","bindAll","eventName","fn","_step3","_iterator3","addEventListener","_default","ItemsView","view","onAlphaPickerValueChanged","self","setTitle","Emby","Page","getTitle","Name","querySelectorAll","play","currentItem","playbackManager","result","Items","queue","shuffle","_classCallCheck","Constructor","querySelector","setAttribute","_step4","_iterator4","filterButtons","_step5","hasVisibleFilters","_iterator5","btnFilter","sortButtons","_step6","_iterator6","sortButton","fetchData","totalItemCount","getItemsHtml","shape","preferThumb","preferDisc","preferLogo","defaultShape","listView","getListViewHtml","lines","showTitle","posterOptions","showYear","centerText","coverImage","overlayPlayButton","overlayMoreButton","overlayText","action","showParentTitle","showAirTime","assign","inheritThumb","context","showAirDateTime","cardBuilder","getCardsHtml","isRestored","detail","loading","getItem","resolve","itemId","musicGenreId","studioId","personId","refresh","resume","focusManager","autoFocus","initAlphaPicker","scroller","AlphaPicker","element","layoutManager","tv","itemClass","valueChangeEvent","on","itemType","canQueue","alphaNumericShortcuts","AlphaNumericShortcuts","pause","destroy","listController","off","_createClass","protoProps","staticProps","basekey","getFilter","SeriesStatus","getDefaultSortBy","sortNameOption","getNameSortOption","getCommunityRatingSortOption","getCriticRatingSortOption","getDatePlayedSortOption","getPlayCountSortOption","_step7","_iterator7","bubble","insertAdjacentHTML","fields","viewType"],"mappings":"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","file":"list.js","sourcesContent":["import globalize from 'globalize';\nimport listView from 'listView';\nimport layoutManager from 'layoutManager';\nimport * as userSettings from 'userSettings';\nimport focusManager from 'focusManager';\nimport cardBuilder from 'cardBuilder';\nimport loading from 'loading';\nimport connectionManager from 'connectionManager';\nimport AlphaNumericShortcuts from 'alphaNumericShortcuts';\nimport playbackManager from 'playbackManager';\nimport AlphaPicker from 'alphaPicker';\nimport 'emby-itemscontainer';\nimport 'emby-scroller';\n\n/* eslint-disable indent */\n\n    function getInitialLiveTvQuery(instance, params) {\n        const query = {\n            UserId: connectionManager.getApiClient(params.serverId).getCurrentUserId(),\n            StartIndex: 0,\n            Fields: 'ChannelInfo,PrimaryImageAspectRatio',\n            Limit: 300\n        };\n\n        if (params.type === 'Recordings') {\n            query.IsInProgress = false;\n        } else {\n            query.HasAired = false;\n        }\n\n        if (params.genreId) {\n            query.GenreIds = params.genreId;\n        }\n\n        if (params.IsMovie === 'true') {\n            query.IsMovie = true;\n        } else if (params.IsMovie === 'false') {\n            query.IsMovie = false;\n        }\n\n        if (params.IsSeries === 'true') {\n            query.IsSeries = true;\n        } else if (params.IsSeries === 'false') {\n            query.IsSeries = false;\n        }\n\n        if (params.IsNews === 'true') {\n            query.IsNews = true;\n        } else if (params.IsNews === 'false') {\n            query.IsNews = false;\n        }\n\n        if (params.IsSports === 'true') {\n            query.IsSports = true;\n        } else if (params.IsSports === 'false') {\n            query.IsSports = false;\n        }\n\n        if (params.IsKids === 'true') {\n            query.IsKids = true;\n        } else if (params.IsKids === 'false') {\n            query.IsKids = false;\n        }\n\n        if (params.IsAiring === 'true') {\n            query.IsAiring = true;\n        } else if (params.IsAiring === 'false') {\n            query.IsAiring = false;\n        }\n\n        return modifyQueryWithFilters(instance, query);\n    }\n\n    function modifyQueryWithFilters(instance, query) {\n        const sortValues = instance.getSortValues();\n\n        if (!query.SortBy) {\n            query.SortBy = sortValues.sortBy;\n            query.SortOrder = sortValues.sortOrder;\n        }\n\n        query.Fields = query.Fields ? query.Fields + ',PrimaryImageAspectRatio' : 'PrimaryImageAspectRatio';\n        query.ImageTypeLimit = 1;\n        let hasFilters;\n        const queryFilters = [];\n        const filters = instance.getFilters();\n\n        if (filters.IsPlayed) {\n            queryFilters.push('IsPlayed');\n            hasFilters = true;\n        }\n\n        if (filters.IsUnplayed) {\n            queryFilters.push('IsUnplayed');\n            hasFilters = true;\n        }\n\n        if (filters.IsFavorite) {\n            queryFilters.push('IsFavorite');\n            hasFilters = true;\n        }\n\n        if (filters.IsResumable) {\n            queryFilters.push('IsResumable');\n            hasFilters = true;\n        }\n\n        if (filters.VideoTypes) {\n            hasFilters = true;\n            query.VideoTypes = filters.VideoTypes;\n        }\n\n        if (filters.GenreIds) {\n            hasFilters = true;\n            query.GenreIds = filters.GenreIds;\n        }\n\n        if (filters.Is4K) {\n            query.Is4K = true;\n            hasFilters = true;\n        }\n\n        if (filters.IsHD) {\n            query.IsHD = true;\n            hasFilters = true;\n        }\n\n        if (filters.IsSD) {\n            query.IsHD = false;\n            hasFilters = true;\n        }\n\n        if (filters.Is3D) {\n            query.Is3D = true;\n            hasFilters = true;\n        }\n\n        if (filters.HasSubtitles) {\n            query.HasSubtitles = true;\n            hasFilters = true;\n        }\n\n        if (filters.HasTrailer) {\n            query.HasTrailer = true;\n            hasFilters = true;\n        }\n\n        if (filters.HasSpecialFeature) {\n            query.HasSpecialFeature = true;\n            hasFilters = true;\n        }\n\n        if (filters.HasThemeSong) {\n            query.HasThemeSong = true;\n            hasFilters = true;\n        }\n\n        if (filters.HasThemeVideo) {\n            query.HasThemeVideo = true;\n            hasFilters = true;\n        }\n\n        query.Filters = queryFilters.length ? queryFilters.join(',') : null;\n        instance.setFilterStatus(hasFilters);\n\n        if (instance.alphaPicker) {\n            query.NameStartsWithOrGreater = instance.alphaPicker.value();\n        }\n\n        return query;\n    }\n\n    function setSortButtonIcon(btnSortIcon, icon) {\n        btnSortIcon.classList.remove('arrow_downward');\n        btnSortIcon.classList.remove('arrow_upward');\n        btnSortIcon.classList.add(icon);\n    }\n\n    function updateSortText(instance) {\n        const btnSortText = instance.btnSortText;\n\n        if (btnSortText) {\n            const options = instance.getSortMenuOptions();\n            const values = instance.getSortValues();\n            const sortBy = values.sortBy;\n\n            for (const option of options) {\n                if (sortBy === option.value) {\n                    btnSortText.innerHTML = globalize.translate('SortByValue', option.name);\n                    break;\n                }\n            }\n\n            const btnSortIcon = instance.btnSortIcon;\n\n            if (btnSortIcon) {\n                setSortButtonIcon(btnSortIcon, values.sortOrder === 'Descending' ? 'arrow_downward' : 'arrow_upward');\n            }\n        }\n    }\n\n    function updateItemsContainerForViewType(instance) {\n        if (instance.getViewSettings().imageType === 'list') {\n            instance.itemsContainer.classList.remove('vertical-wrap');\n            instance.itemsContainer.classList.add('vertical-list');\n        } else {\n            instance.itemsContainer.classList.add('vertical-wrap');\n            instance.itemsContainer.classList.remove('vertical-list');\n        }\n    }\n\n    function updateAlphaPickerState(instance, numItems) {\n        if (instance.alphaPicker) {\n            const alphaPicker = instance.alphaPickerElement;\n\n            if (alphaPicker) {\n                const values = instance.getSortValues();\n\n                if (numItems == null) {\n                    numItems = 100;\n                }\n\n                if (values.sortBy === 'SortName' && values.sortOrder === 'Ascending' && numItems > 40) {\n                    alphaPicker.classList.remove('hide');\n                    instance.itemsContainer.parentNode.classList.add('padded-right-withalphapicker');\n                } else {\n                    alphaPicker.classList.add('hide');\n                    instance.itemsContainer.parentNode.classList.remove('padded-right-withalphapicker');\n                }\n            }\n        }\n    }\n\n    function getItems(instance, params, item, sortBy, startIndex, limit) {\n        const apiClient = connectionManager.getApiClient(params.serverId);\n\n        instance.queryRecursive = false;\n        if (params.type === 'Recordings') {\n            return apiClient.getLiveTvRecordings(getInitialLiveTvQuery(instance, params));\n        }\n\n        if (params.type === 'Programs') {\n            if (params.IsAiring === 'true') {\n                return apiClient.getLiveTvRecommendedPrograms(getInitialLiveTvQuery(instance, params));\n            }\n\n            return apiClient.getLiveTvPrograms(getInitialLiveTvQuery(instance, params));\n        }\n\n        if (params.type === 'nextup') {\n            return apiClient.getNextUpEpisodes(modifyQueryWithFilters(instance, {\n                Limit: limit,\n                Fields: 'PrimaryImageAspectRatio,SeriesInfo,DateCreated,BasicSyncInfo',\n                UserId: apiClient.getCurrentUserId(),\n                ImageTypeLimit: 1,\n                EnableImageTypes: 'Primary,Backdrop,Thumb',\n                EnableTotalRecordCount: false,\n                SortBy: sortBy\n            }));\n        }\n\n        if (!item) {\n            instance.queryRecursive = true;\n            let method = 'getItems';\n\n            if (params.type === 'MusicArtist') {\n                method = 'getArtists';\n            } else if (params.type === 'Person') {\n                method = 'getPeople';\n            }\n\n            return apiClient[method](apiClient.getCurrentUserId(), modifyQueryWithFilters(instance, {\n                StartIndex: startIndex,\n                Limit: limit,\n                Fields: 'PrimaryImageAspectRatio,SortName',\n                ImageTypeLimit: 1,\n                IncludeItemTypes: params.type === 'MusicArtist' || params.type === 'Person' ? null : params.type,\n                Recursive: true,\n                IsFavorite: params.IsFavorite === 'true' || null,\n                ArtistIds: params.artistId || null,\n                SortBy: sortBy\n            }));\n        }\n\n        if (item.Type === 'Genre' || item.Type === 'MusicGenre' || item.Type === 'Studio' || item.Type === 'Person') {\n            instance.queryRecursive = true;\n            const query = {\n                StartIndex: startIndex,\n                Limit: limit,\n                Fields: 'PrimaryImageAspectRatio,SortName',\n                Recursive: true,\n                parentId: params.parentId,\n                SortBy: sortBy\n            };\n\n            if (item.Type === 'Studio') {\n                query.StudioIds = item.Id;\n            } else if (item.Type === 'Genre' || item.Type === 'MusicGenre') {\n                query.GenreIds = item.Id;\n            } else if (item.Type === 'Person') {\n                query.PersonIds = item.Id;\n            }\n\n            if (item.Type === 'MusicGenre') {\n                query.IncludeItemTypes = 'MusicAlbum';\n            } else if (item.Type === 'GameGenre') {\n                query.IncludeItemTypes = 'Game';\n            } else if (item.CollectionType === 'movies') {\n                query.IncludeItemTypes = 'Movie';\n            } else if (item.CollectionType === 'tvshows') {\n                query.IncludeItemTypes = 'Series';\n            } else if (item.Type === 'Genre') {\n                query.IncludeItemTypes = 'Movie,Series,Video';\n            } else if (item.Type === 'Person') {\n                query.IncludeItemTypes = params.type;\n            }\n\n            return apiClient.getItems(apiClient.getCurrentUserId(), modifyQueryWithFilters(instance, query));\n        }\n\n        return apiClient.getItems(apiClient.getCurrentUserId(), modifyQueryWithFilters(instance, {\n            StartIndex: startIndex,\n            Limit: limit,\n            Fields: 'PrimaryImageAspectRatio,SortName,Path',\n            ImageTypeLimit: 1,\n            ParentId: item.Id,\n            SortBy: sortBy\n        }));\n    }\n\n    function getItem(params) {\n        if (params.type === 'Recordings' || params.type === 'Programs' || params.type === 'nextup') {\n            return Promise.resolve(null);\n        }\n\n        const apiClient = connectionManager.getApiClient(params.serverId);\n        const itemId = params.genreId || params.musicGenreId || params.studioId || params.personId || params.parentId;\n\n        if (itemId) {\n            return apiClient.getItem(apiClient.getCurrentUserId(), itemId);\n        }\n\n        return Promise.resolve(null);\n    }\n\n    function showViewSettingsMenu() {\n        const instance = this;\n\n        import('viewSettings').then(({default: ViewSettings}) => {\n            new ViewSettings().show({\n                settingsKey: instance.getSettingsKey(),\n                settings: instance.getViewSettings(),\n                visibleSettings: instance.getVisibleViewSettings()\n            }).then(function () {\n                updateItemsContainerForViewType(instance);\n                instance.itemsContainer.refreshItems();\n            });\n        });\n    }\n\n    function showFilterMenu() {\n        const instance = this;\n\n        import('filterMenu').then(({default: FilterMenu}) => {\n            new FilterMenu().show({\n                settingsKey: instance.getSettingsKey(),\n                settings: instance.getFilters(),\n                visibleSettings: instance.getVisibleFilters(),\n                onChange: instance.itemsContainer.refreshItems.bind(instance.itemsContainer),\n                parentId: instance.params.parentId,\n                itemTypes: instance.getItemTypes(),\n                serverId: instance.params.serverId,\n                filterMenuOptions: instance.getFilterMenuOptions()\n            }).then(function () {\n                instance.itemsContainer.refreshItems();\n            });\n        });\n    }\n\n    function showSortMenu() {\n        const instance = this;\n\n        import('sortMenu').then(({default: SortMenu}) => {\n            new SortMenu().show({\n                settingsKey: instance.getSettingsKey(),\n                settings: instance.getSortValues(),\n                onChange: instance.itemsContainer.refreshItems.bind(instance.itemsContainer),\n                serverId: instance.params.serverId,\n                sortOptions: instance.getSortMenuOptions()\n            }).then(function () {\n                updateSortText(instance);\n                updateAlphaPickerState(instance);\n                instance.itemsContainer.refreshItems();\n            });\n        });\n    }\n\n    function onNewItemClick() {\n        const instance = this;\n\n        import('playlistEditor').then(({default: playlistEditor}) => {\n            new playlistEditor({\n                items: [],\n                serverId: instance.params.serverId\n            });\n        });\n    }\n\n    function hideOrShowAll(elems, hide) {\n        for (const elem of elems) {\n            if (hide) {\n                elem.classList.add('hide');\n            } else {\n                elem.classList.remove('hide');\n            }\n        }\n    }\n\n    function bindAll(elems, eventName, fn) {\n        for (const elem of elems) {\n            elem.addEventListener(eventName, fn);\n        }\n    }\n\nclass ItemsView {\n    constructor(view, params) {\n        function fetchData() {\n            return getItems(self, params, self.currentItem).then(function (result) {\n                if (self.totalItemCount == null) {\n                    self.totalItemCount = result.Items ? result.Items.length : result.length;\n                }\n\n                updateAlphaPickerState(self, self.totalItemCount);\n                return result;\n            });\n        }\n\n        function getItemsHtml(items) {\n            const settings = self.getViewSettings();\n\n            if (settings.imageType === 'list') {\n                return listView.getListViewHtml({\n                    items: items\n                });\n            }\n\n            let shape;\n            let preferThumb;\n            let preferDisc;\n            let preferLogo;\n            let defaultShape;\n            const item = self.currentItem;\n            let lines = settings.showTitle ? 2 : 0;\n\n            if (settings.imageType === 'banner') {\n                shape = 'banner';\n            } else if (settings.imageType === 'disc') {\n                shape = 'square';\n                preferDisc = true;\n            } else if (settings.imageType === 'logo') {\n                shape = 'backdrop';\n                preferLogo = true;\n            } else if (settings.imageType === 'thumb') {\n                shape = 'backdrop';\n                preferThumb = true;\n            } else if (params.type === 'nextup') {\n                shape = 'backdrop';\n                preferThumb = settings.imageType === 'thumb';\n            } else if (params.type === 'Programs' || params.type === 'Recordings') {\n                shape = params.IsMovie === 'true' ? 'portrait' : 'autoVertical';\n                preferThumb = params.IsMovie !== 'true' ? 'auto' : false;\n                defaultShape = params.IsMovie === 'true' ? 'portrait' : 'backdrop';\n            } else {\n                shape = 'autoVertical';\n            }\n\n            let posterOptions = {\n                shape: shape,\n                showTitle: settings.showTitle,\n                showYear: settings.showTitle,\n                centerText: true,\n                coverImage: true,\n                preferThumb: preferThumb,\n                preferDisc: preferDisc,\n                preferLogo: preferLogo,\n                overlayPlayButton: false,\n                overlayMoreButton: true,\n                overlayText: !settings.showTitle,\n                defaultShape: defaultShape,\n                action: params.type === 'Audio' ? 'playallfromhere' : null\n            };\n\n            if (params.type === 'nextup') {\n                posterOptions.showParentTitle = settings.showTitle;\n            } else if (params.type === 'Person') {\n                posterOptions.showYear = false;\n                posterOptions.showParentTitle = false;\n                lines = 1;\n            } else if (params.type === 'Audio') {\n                posterOptions.showParentTitle = settings.showTitle;\n            } else if (params.type === 'MusicAlbum') {\n                posterOptions.showParentTitle = settings.showTitle;\n            } else if (params.type === 'Episode') {\n                posterOptions.showParentTitle = settings.showTitle;\n            } else if (params.type === 'MusicArtist') {\n                posterOptions.showYear = false;\n                lines = 1;\n            } else if (params.type === 'Programs') {\n                lines = settings.showTitle ? 1 : 0;\n                const showParentTitle = settings.showTitle && params.IsMovie !== 'true';\n\n                if (showParentTitle) {\n                    lines++;\n                }\n\n                const showAirTime = settings.showTitle && params.type !== 'Recordings';\n\n                if (showAirTime) {\n                    lines++;\n                }\n\n                const showYear = settings.showTitle && params.IsMovie === 'true' && params.type === 'Recordings';\n\n                if (showYear) {\n                    lines++;\n                }\n\n                posterOptions = Object.assign(posterOptions, {\n                    inheritThumb: params.type === 'Recordings',\n                    context: 'livetv',\n                    showParentTitle: showParentTitle,\n                    showAirTime: showAirTime,\n                    showAirDateTime: showAirTime,\n                    overlayPlayButton: false,\n                    overlayMoreButton: true,\n                    showYear: showYear,\n                    coverImage: true\n                });\n            } else {\n                posterOptions.showParentTitle = settings.showTitle;\n            }\n\n            posterOptions.lines = lines;\n            posterOptions.items = items;\n\n            if (item && item.CollectionType === 'folders') {\n                posterOptions.context = 'folders';\n            }\n\n            return cardBuilder.getCardsHtml(posterOptions);\n        }\n\n        function initAlphaPicker() {\n            self.scroller = view.querySelector('.scrollFrameY');\n            const alphaPickerElement = self.alphaPickerElement;\n\n            alphaPickerElement.classList.add('alphaPicker-fixed-right');\n            alphaPickerElement.classList.add('focuscontainer-right');\n            self.itemsContainer.parentNode.classList.add('padded-right-withalphapicker');\n\n            self.alphaPicker = new AlphaPicker({\n                element: alphaPickerElement,\n                itemsContainer: layoutManager.tv ? self.itemsContainer : null,\n                itemClass: 'card',\n                valueChangeEvent: layoutManager.tv ? null : 'click'\n            });\n            self.alphaPicker.on('alphavaluechanged', onAlphaPickerValueChanged);\n        }\n\n        function onAlphaPickerValueChanged() {\n            self.alphaPicker.value();\n            self.itemsContainer.refreshItems();\n        }\n\n        function setTitle(item) {\n            Emby.Page.setTitle(getTitle(item) || '');\n\n            if (item && item.CollectionType === 'playlists') {\n                hideOrShowAll(view.querySelectorAll('.btnNewItem'), false);\n            } else {\n                hideOrShowAll(view.querySelectorAll('.btnNewItem'), true);\n            }\n        }\n\n        function getTitle(item) {\n            if (params.type === 'Recordings') {\n                return globalize.translate('Recordings');\n            }\n\n            if (params.type === 'Programs') {\n                if (params.IsMovie === 'true') {\n                    return globalize.translate('Movies');\n                }\n\n                if (params.IsSports === 'true') {\n                    return globalize.translate('Sports');\n                }\n\n                if (params.IsKids === 'true') {\n                    return globalize.translate('HeaderForKids');\n                }\n\n                if (params.IsAiring === 'true') {\n                    return globalize.translate('HeaderOnNow');\n                }\n\n                if (params.IsSeries === 'true') {\n                    return globalize.translate('Shows');\n                }\n\n                if (params.IsNews === 'true') {\n                    return globalize.translate('News');\n                }\n\n                return globalize.translate('Programs');\n            }\n\n            if (params.type === 'nextup') {\n                return globalize.translate('NextUp');\n            }\n\n            if (params.type === 'favoritemovies') {\n                return globalize.translate('FavoriteMovies');\n            }\n\n            if (item) {\n                return item.Name;\n            }\n\n            if (params.type === 'Movie') {\n                return globalize.translate('Movies');\n            }\n\n            if (params.type === 'Series') {\n                return globalize.translate('Shows');\n            }\n\n            if (params.type === 'Season') {\n                return globalize.translate('Seasons');\n            }\n\n            if (params.type === 'Episode') {\n                return globalize.translate('Episodes');\n            }\n\n            if (params.type === 'MusicArtist') {\n                return globalize.translate('Artists');\n            }\n\n            if (params.type === 'MusicAlbum') {\n                return globalize.translate('Albums');\n            }\n\n            if (params.type === 'Audio') {\n                return globalize.translate('Songs');\n            }\n\n            if (params.type === 'Video') {\n                return globalize.translate('Videos');\n            }\n\n            return void 0;\n        }\n\n        function play() {\n            const currentItem = self.currentItem;\n\n            if (currentItem && !self.hasFilters) {\n                playbackManager.play({\n                    items: [currentItem]\n                });\n            } else {\n                getItems(self, self.params, currentItem, null, null, 300).then(function (result) {\n                    playbackManager.play({\n                        items: result.Items\n                    });\n                });\n            }\n        }\n\n        function queue() {\n            const currentItem = self.currentItem;\n\n            if (currentItem && !self.hasFilters) {\n                playbackManager.queue({\n                    items: [currentItem]\n                });\n            } else {\n                getItems(self, self.params, currentItem, null, null, 300).then(function (result) {\n                    playbackManager.queue({\n                        items: result.Items\n                    });\n                });\n            }\n        }\n\n        function shuffle() {\n            const currentItem = self.currentItem;\n\n            if (currentItem && !self.hasFilters) {\n                playbackManager.shuffle(currentItem);\n            } else {\n                getItems(self, self.params, currentItem, 'Random', null, 300).then(function (result) {\n                    playbackManager.play({\n                        items: result.Items\n                    });\n                });\n            }\n        }\n\n        const self = this;\n        self.params = params;\n        this.itemsContainer = view.querySelector('.itemsContainer');\n\n        if (params.parentId) {\n            this.itemsContainer.setAttribute('data-parentid', params.parentId);\n        } else if (params.type === 'nextup') {\n            this.itemsContainer.setAttribute('data-monitor', 'videoplayback');\n        } else if (params.type === 'favoritemovies') {\n            this.itemsContainer.setAttribute('data-monitor', 'markfavorite');\n        } else if (params.type === 'Programs') {\n            this.itemsContainer.setAttribute('data-refreshinterval', '300000');\n        }\n\n        const btnViewSettings = view.querySelectorAll('.btnViewSettings');\n\n        for (const btnViewSetting of btnViewSettings) {\n            btnViewSetting.addEventListener('click', showViewSettingsMenu.bind(this));\n        }\n\n        const filterButtons = view.querySelectorAll('.btnFilter');\n        this.filterButtons = filterButtons;\n        const hasVisibleFilters = this.getVisibleFilters().length;\n\n        for (const btnFilter of filterButtons) {\n            btnFilter.addEventListener('click', showFilterMenu.bind(this));\n\n            if (hasVisibleFilters) {\n                btnFilter.classList.remove('hide');\n            } else {\n                btnFilter.classList.add('hide');\n            }\n        }\n\n        const sortButtons = view.querySelectorAll('.btnSort');\n\n        this.sortButtons = sortButtons;\n        for (const sortButton of sortButtons) {\n            sortButton.addEventListener('click', showSortMenu.bind(this));\n\n            if (params.type !== 'nextup') {\n                sortButton.classList.remove('hide');\n            }\n        }\n\n        this.btnSortText = view.querySelector('.btnSortText');\n        this.btnSortIcon = view.querySelector('.btnSortIcon');\n        bindAll(view.querySelectorAll('.btnNewItem'), 'click', onNewItemClick.bind(this));\n        this.alphaPickerElement = view.querySelector('.alphaPicker');\n        self.itemsContainer.fetchData = fetchData;\n        self.itemsContainer.getItemsHtml = getItemsHtml;\n        view.addEventListener('viewshow', function (e) {\n            const isRestored = e.detail.isRestored;\n\n            if (!isRestored) {\n                loading.show();\n                updateSortText(self);\n                updateItemsContainerForViewType(self);\n            }\n\n            setTitle(null);\n            getItem(params).then(function (item) {\n                setTitle(item);\n                self.currentItem = item;\n                const refresh = !isRestored;\n                self.itemsContainer.resume({\n                    refresh: refresh\n                }).then(function () {\n                    loading.hide();\n\n                    if (refresh) {\n                        focusManager.autoFocus(self.itemsContainer);\n                    }\n                });\n\n                if (!isRestored && item && item.Type !== 'PhotoAlbum') {\n                    initAlphaPicker();\n                }\n\n                const itemType = item ? item.Type : null;\n\n                if (itemType === 'MusicGenre' || params.type !== 'Programs' && itemType !== 'Channel') {\n                    hideOrShowAll(view.querySelectorAll('.btnPlay'), false);\n                } else {\n                    hideOrShowAll(view.querySelectorAll('.btnPlay'), true);\n                }\n\n                if (itemType === 'MusicGenre' || params.type !== 'Programs' && params.type !== 'nextup' && itemType !== 'Channel') {\n                    hideOrShowAll(view.querySelectorAll('.btnShuffle'), false);\n                } else {\n                    hideOrShowAll(view.querySelectorAll('.btnShuffle'), true);\n                }\n\n                if (item && playbackManager.canQueue(item)) {\n                    hideOrShowAll(view.querySelectorAll('.btnQueue'), false);\n                } else {\n                    hideOrShowAll(view.querySelectorAll('.btnQueue'), true);\n                }\n            });\n\n            if (!isRestored) {\n                bindAll(view.querySelectorAll('.btnPlay'), 'click', play);\n                bindAll(view.querySelectorAll('.btnQueue'), 'click', queue);\n                bindAll(view.querySelectorAll('.btnShuffle'), 'click', shuffle);\n            }\n\n            self.alphaNumericShortcuts = new AlphaNumericShortcuts({\n                itemsContainer: self.itemsContainer\n            });\n        });\n        view.addEventListener('viewhide', function (e) {\n            const itemsContainer = self.itemsContainer;\n\n            if (itemsContainer) {\n                itemsContainer.pause();\n            }\n\n            const alphaNumericShortcuts = self.alphaNumericShortcuts;\n\n            if (alphaNumericShortcuts) {\n                alphaNumericShortcuts.destroy();\n                self.alphaNumericShortcuts = null;\n            }\n        });\n        view.addEventListener('viewdestroy', function () {\n            if (self.listController) {\n                self.listController.destroy();\n            }\n\n            if (self.alphaPicker) {\n                self.alphaPicker.off('alphavaluechanged', onAlphaPickerValueChanged);\n                self.alphaPicker.destroy();\n            }\n\n            self.currentItem = null;\n            self.scroller = null;\n            self.itemsContainer = null;\n            self.filterButtons = null;\n            self.sortButtons = null;\n            self.btnSortText = null;\n            self.btnSortIcon = null;\n            self.alphaPickerElement = null;\n        });\n    }\n\n    getFilters() {\n        const basekey = this.getSettingsKey();\n        return {\n            IsPlayed: userSettings.getFilter(basekey + '-filter-IsPlayed') === 'true',\n            IsUnplayed: userSettings.getFilter(basekey + '-filter-IsUnplayed') === 'true',\n            IsFavorite: userSettings.getFilter(basekey + '-filter-IsFavorite') === 'true',\n            IsResumable: userSettings.getFilter(basekey + '-filter-IsResumable') === 'true',\n            Is4K: userSettings.getFilter(basekey + '-filter-Is4K') === 'true',\n            IsHD: userSettings.getFilter(basekey + '-filter-IsHD') === 'true',\n            IsSD: userSettings.getFilter(basekey + '-filter-IsSD') === 'true',\n            Is3D: userSettings.getFilter(basekey + '-filter-Is3D') === 'true',\n            VideoTypes: userSettings.getFilter(basekey + '-filter-VideoTypes'),\n            SeriesStatus: userSettings.getFilter(basekey + '-filter-SeriesStatus'),\n            HasSubtitles: userSettings.getFilter(basekey + '-filter-HasSubtitles'),\n            HasTrailer: userSettings.getFilter(basekey + '-filter-HasTrailer'),\n            HasSpecialFeature: userSettings.getFilter(basekey + '-filter-HasSpecialFeature'),\n            HasThemeSong: userSettings.getFilter(basekey + '-filter-HasThemeSong'),\n            HasThemeVideo: userSettings.getFilter(basekey + '-filter-HasThemeVideo'),\n            GenreIds: userSettings.getFilter(basekey + '-filter-GenreIds')\n        };\n    }\n\n    getSortValues() {\n        const basekey = this.getSettingsKey();\n        return {\n            sortBy: userSettings.getFilter(basekey + '-sortby') || this.getDefaultSortBy(),\n            sortOrder: userSettings.getFilter(basekey + '-sortorder') === 'Descending' ? 'Descending' : 'Ascending'\n        };\n    }\n\n    getDefaultSortBy() {\n        const sortNameOption = this.getNameSortOption(this.params);\n\n        if (this.params.type) {\n            return sortNameOption.value;\n        }\n\n        return 'IsFolder,' + sortNameOption.value;\n    }\n\n    getSortMenuOptions() {\n        const sortBy = [];\n\n        if (this.params.type === 'Programs') {\n            sortBy.push({\n                name: globalize.translate('AirDate'),\n                value: 'StartDate,SortName'\n            });\n        }\n\n        let option = this.getNameSortOption(this.params);\n\n        if (option) {\n            sortBy.push(option);\n        }\n\n        option = this.getCommunityRatingSortOption();\n\n        if (option) {\n            sortBy.push(option);\n        }\n\n        option = this.getCriticRatingSortOption();\n\n        if (option) {\n            sortBy.push(option);\n        }\n\n        if (this.params.type !== 'Programs') {\n            sortBy.push({\n                name: globalize.translate('DateAdded'),\n                value: 'DateCreated,SortName'\n            });\n        }\n\n        option = this.getDatePlayedSortOption();\n\n        if (option) {\n            sortBy.push(option);\n        }\n\n        if (!this.params.type) {\n            option = this.getNameSortOption(this.params);\n            sortBy.push({\n                name: globalize.translate('Folders'),\n                value: 'IsFolder,' + option.value\n            });\n        }\n\n        sortBy.push({\n            name: globalize.translate('ParentalRating'),\n            value: 'OfficialRating,SortName'\n        });\n        option = this.getPlayCountSortOption();\n\n        if (option) {\n            sortBy.push(option);\n        }\n\n        sortBy.push({\n            name: globalize.translate('ReleaseDate'),\n            value: 'ProductionYear,PremiereDate,SortName'\n        });\n        sortBy.push({\n            name: globalize.translate('Runtime'),\n            value: 'Runtime,SortName'\n        });\n        return sortBy;\n    }\n\n    getNameSortOption(params) {\n        if (params.type === 'Episode') {\n            return {\n                name: globalize.translate('Name'),\n                value: 'SeriesName,SortName'\n            };\n        }\n\n        return {\n            name: globalize.translate('Name'),\n            value: 'SortName'\n        };\n    }\n\n    getPlayCountSortOption() {\n        if (this.params.type === 'Programs') {\n            return null;\n        }\n\n        return {\n            name: globalize.translate('PlayCount'),\n            value: 'PlayCount,SortName'\n        };\n    }\n\n    getDatePlayedSortOption() {\n        if (this.params.type === 'Programs') {\n            return null;\n        }\n\n        return {\n            name: globalize.translate('DatePlayed'),\n            value: 'DatePlayed,SortName'\n        };\n    }\n\n    getCriticRatingSortOption() {\n        if (this.params.type === 'Programs') {\n            return null;\n        }\n\n        return {\n            name: globalize.translate('CriticRating'),\n            value: 'CriticRating,SortName'\n        };\n    }\n\n    getCommunityRatingSortOption() {\n        return {\n            name: globalize.translate('CommunityRating'),\n            value: 'CommunityRating,SortName'\n        };\n    }\n\n    getVisibleFilters() {\n        const filters = [];\n        const params = this.params;\n\n        if (!(params.type === 'nextup')) {\n            if (params.type === 'Programs') {\n                filters.push('Genres');\n            } else {\n                filters.push('IsUnplayed');\n                filters.push('IsPlayed');\n\n                if (!params.IsFavorite) {\n                    filters.push('IsFavorite');\n                }\n\n                filters.push('IsResumable');\n                filters.push('VideoType');\n                filters.push('HasSubtitles');\n                filters.push('HasTrailer');\n                filters.push('HasSpecialFeature');\n                filters.push('HasThemeSong');\n                filters.push('HasThemeVideo');\n            }\n        }\n\n        return filters;\n    }\n\n    setFilterStatus(hasFilters) {\n        this.hasFilters = hasFilters;\n        const filterButtons = this.filterButtons;\n\n        if (filterButtons.length) {\n            for (const btnFilter of filterButtons) {\n                let bubble = btnFilter.querySelector('.filterButtonBubble');\n\n                if (!bubble) {\n                    if (!hasFilters) {\n                        continue;\n                    }\n\n                    btnFilter.insertAdjacentHTML('afterbegin', '<div class=\"filterButtonBubble\">!</div>');\n                    btnFilter.classList.add('btnFilterWithBubble');\n                    bubble = btnFilter.querySelector('.filterButtonBubble');\n                }\n\n                if (hasFilters) {\n                    bubble.classList.remove('hide');\n                } else {\n                    bubble.classList.add('hide');\n                }\n            }\n        }\n    }\n\n    getFilterMenuOptions() {\n        const params = this.params;\n        return {\n            IsAiring: params.IsAiring,\n            IsMovie: params.IsMovie,\n            IsSports: params.IsSports,\n            IsKids: params.IsKids,\n            IsNews: params.IsNews,\n            IsSeries: params.IsSeries,\n            Recursive: this.queryRecursive\n        };\n    }\n\n    getVisibleViewSettings() {\n        const item = (this.params, this.currentItem);\n        const fields = ['showTitle'];\n\n        if (!item || item.Type !== 'PhotoAlbum' && item.Type !== 'ChannelFolderItem') {\n            fields.push('imageType');\n        }\n\n        fields.push('viewType');\n        return fields;\n    }\n\n    getViewSettings() {\n        const basekey = this.getSettingsKey();\n        const params = this.params;\n        const item = this.currentItem;\n        let showTitle = userSettings.get(basekey + '-showTitle');\n\n        if (showTitle === 'true') {\n            showTitle = true;\n        } else if (showTitle === 'false') {\n            showTitle = false;\n        } else if (params.type === 'Programs' || params.type === 'Recordings' || params.type === 'Person' || params.type === 'nextup' || params.type === 'Audio' || params.type === 'MusicAlbum' || params.type === 'MusicArtist') {\n            showTitle = true;\n        } else if (item && item.Type !== 'PhotoAlbum') {\n            showTitle = true;\n        }\n\n        let imageType = userSettings.get(basekey + '-imageType');\n\n        if (!imageType && params.type === 'nextup') {\n            imageType = 'thumb';\n        }\n\n        return {\n            showTitle: showTitle,\n            showYear: userSettings.get(basekey + '-showYear') !== 'false',\n            imageType: imageType || 'primary',\n            viewType: userSettings.get(basekey + '-viewType') || 'images'\n        };\n    }\n\n    getItemTypes() {\n        const params = this.params;\n\n        if (params.type === 'nextup') {\n            return ['Episode'];\n        }\n\n        if (params.type === 'Programs') {\n            return ['Program'];\n        }\n\n        return [];\n    }\n\n    getSettingsKey() {\n        const values = [];\n        values.push('items');\n        const params = this.params;\n\n        if (params.type) {\n            values.push(params.type);\n        } else if (params.parentId) {\n            values.push(params.parentId);\n        }\n\n        if (params.IsAiring) {\n            values.push('IsAiring');\n        }\n\n        if (params.IsMovie) {\n            values.push('IsMovie');\n        }\n\n        if (params.IsKids) {\n            values.push('IsKids');\n        }\n\n        if (params.IsSports) {\n            values.push('IsSports');\n        }\n\n        if (params.IsNews) {\n            values.push('IsNews');\n        }\n\n        if (params.IsSeries) {\n            values.push('IsSeries');\n        }\n\n        if (params.IsFavorite) {\n            values.push('IsFavorite');\n        }\n\n        if (params.genreId) {\n            values.push('Genre');\n        }\n\n        if (params.musicGenreId) {\n            values.push('MusicGenre');\n        }\n\n        if (params.studioId) {\n            values.push('Studio');\n        }\n\n        if (params.personId) {\n            values.push('Person');\n        }\n\n        if (params.parentId) {\n            values.push('Folder');\n        }\n\n        return values.join('-');\n    }\n}\n\nexport default ItemsView;\n\n/* eslint-enable indent */\n"]}