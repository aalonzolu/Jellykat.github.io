{"version":3,"sources":["controllers/session/selectServer/index.js"],"names":["define","_require","_exports","_loading","_appRouter","_layoutManager","_libraryMenu","_appSettings","_focusManager","_connectionManager","_globalize","_actionsheet","_dom","_browser","_materialIcons","_flexStyles","_embyScroller","_embyItemscontainer","_cardStyle","_embyButton","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","Object","defineProperty","value","_default","view","params","connectToServer","server","loading","show","connectionManager","enableAutoLogin","appSettings","then","result","hide","apiClient","ApiClient","State","Dashboard","onServerChanged","getCurrentUserId","accessToken","navigate","Servers","Id","alertTextWithOptions","text","globalize","translate","html","showServerConnectionFailure","alertText","onServerClick","menuItems","push","name","id","actionSheet","items","title","Name","deleteServer","loadServers","onServersRetrieved","servers","renderSelectServerItems","map","showIcon","icon","cardType","item","cardImageContainer","cardImageStyle","cssClass","layoutManager","tv","enableFocusTransform","cardContainer","url","join","itemsContainer","querySelector","length","innerHTML","focusManager","autoFocus","getAvailableServers","updatePageStyle","showuser","classList","add","remove","addEventListener","e","isRestored","detail","appRouter","setTitle","libraryMenu","setTransparentMenu","card","dom","parentWithClass","target","getAttribute","filter","s","browser","slow","edge","options","Promise","_resolve","_reject","imported","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","_ref","alert"],"mappings":"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","file":"index.js","sourcesContent":["import loading from 'loading';\nimport appRouter from 'appRouter';\nimport layoutManager from 'layoutManager';\nimport libraryMenu from 'libraryMenu';\nimport appSettings from 'appSettings';\nimport focusManager from 'focusManager';\nimport connectionManager from 'connectionManager';\nimport globalize from 'globalize';\nimport actionSheet from 'actionsheet';\nimport dom from 'dom';\nimport browser from 'browser';\nimport 'material-icons';\nimport 'flexStyles';\nimport 'emby-scroller';\nimport 'emby-itemscontainer';\nimport 'cardStyle';\nimport 'emby-button';\n\n/* eslint-disable indent */\n\n    const enableFocusTransform = !browser.slow && !browser.edge;\n\n    function renderSelectServerItems(view, servers) {\n        const items = servers.map(function (server) {\n            return {\n                name: server.Name,\n                showIcon: true,\n                icon: 'cast',\n                cardType: '',\n                id: server.Id,\n                server: server\n            };\n        });\n        let html = items.map(function (item) {\n            let cardImageContainer;\n\n            if (item.showIcon) {\n                cardImageContainer = '<span class=\"cardImageIcon material-icons ' + item.icon + '\"></span>';\n            } else {\n                cardImageContainer = '<div class=\"cardImage\" style=\"' + item.cardImageStyle + '\"></div>';\n            }\n\n            // TODO move card creation code to Card component\n\n            let cssClass = 'card overflowSquareCard loginSquareCard scalableCard overflowSquareCard-scalable';\n\n            if (layoutManager.tv) {\n                cssClass += ' show-focus';\n\n                if (enableFocusTransform) {\n                    cssClass += ' show-animation';\n                }\n            }\n\n            const cardBoxCssClass = 'cardBox';\n\n            const innerOpening = '<div class=\"' + cardBoxCssClass + '\">';\n            let cardContainer = '';\n            cardContainer += '<button raised class=\"' + cssClass + '\" style=\"display:inline-block;\" data-id=\"' + item.id + '\" data-url=\"' + (item.url || '') + '\" data-cardtype=\"' + item.cardType + '\">';\n            cardContainer += innerOpening;\n            cardContainer += '<div class=\"cardScalable\">';\n            cardContainer += '<div class=\"cardPadder cardPadder-square\">';\n            cardContainer += '</div>';\n            cardContainer += '<div class=\"cardContent\">';\n            cardContainer += '<div class=\"cardImageContainer coveredImage\" style=\"background:#0288D1;border-radius:.15em;\">';\n            cardContainer += cardImageContainer;\n            cardContainer += '</div>';\n            cardContainer += '</div>';\n            cardContainer += '</div>';\n            cardContainer += '<div class=\"cardFooter\">';\n            cardContainer += '<div class=\"cardText cardTextCentered\">' + item.name + '</div>';\n            cardContainer += '</div></div></button>';\n            return cardContainer;\n        }).join('');\n        const itemsContainer = view.querySelector('.servers');\n\n        if (!items.length) {\n            html = '<p>' + globalize.translate('MessageNoServersAvailable') + '</p>';\n        }\n\n        itemsContainer.innerHTML = html;\n        loading.hide();\n    }\n\n    function updatePageStyle(view, params) {\n        if (params.showuser == '1') {\n            view.classList.add('libraryPage');\n            view.classList.remove('standalonePage');\n            view.classList.add('noSecondaryNavPage');\n        } else {\n            view.classList.add('standalonePage');\n            view.classList.remove('libraryPage');\n            view.classList.remove('noSecondaryNavPage');\n        }\n    }\n\n    function alertText(text) {\n        alertTextWithOptions({\n            text: text\n        });\n    }\n\n    function alertTextWithOptions(options) {\n        import('alert').then(({default: alert}) => {\n            alert(options);\n        });\n    }\n\n    function showServerConnectionFailure() {\n        alertText(globalize.translate('MessageUnableToConnectToServer'));\n    }\n\n    export default function (view, params) {\n        function connectToServer(server) {\n            loading.show();\n            connectionManager.connectToServer(server, {\n                enableAutoLogin: appSettings.enableAutoLogin()\n            }).then(function (result) {\n                loading.hide();\n                const apiClient = result.ApiClient;\n\n                switch (result.State) {\n                    case 'SignedIn':\n                        Dashboard.onServerChanged(apiClient.getCurrentUserId(), apiClient.accessToken(), apiClient);\n                        Dashboard.navigate('home.html');\n                        break;\n\n                    case 'ServerSignIn':\n                        Dashboard.onServerChanged(null, null, apiClient);\n                        Dashboard.navigate('login.html?serverid=' + result.Servers[0].Id);\n                        break;\n\n                    case 'ServerUpdateNeeded':\n                        alertTextWithOptions({\n                            text: globalize.translate('core#ServerUpdateNeeded', 'https://github.com/jellyfin/jellyfin'),\n                            html: globalize.translate('core#ServerUpdateNeeded', '<a href=\"https://github.com/jellyfin/jellyfin\">https://github.com/jellyfin/jellyfin</a>')\n                        });\n                        break;\n\n                    default:\n                        showServerConnectionFailure();\n                }\n            });\n        }\n\n        function deleteServer(server) {\n            loading.show();\n            connectionManager.deleteServer(server.Id).then(function () {\n                loading.hide();\n                loadServers();\n            });\n        }\n\n        function onServerClick(server) {\n            const menuItems = [];\n            menuItems.push({\n                name: globalize.translate('Connect'),\n                id: 'connect'\n            });\n            menuItems.push({\n                name: globalize.translate('Delete'),\n                id: 'delete'\n            });\n            actionSheet.show({\n                items: menuItems,\n                title: server.Name\n            }).then(function (id) {\n                switch (id) {\n                    case 'connect':\n                        connectToServer(server);\n                        break;\n\n                    case 'delete':\n                        deleteServer(server);\n                }\n            });\n        }\n\n        function onServersRetrieved(result) {\n            servers = result;\n            renderSelectServerItems(view, result);\n\n            if (layoutManager.tv) {\n                focusManager.autoFocus(view);\n            }\n        }\n\n        function loadServers() {\n            loading.show();\n            connectionManager.getAvailableServers().then(onServersRetrieved);\n        }\n\n        let servers;\n        updatePageStyle(view, params);\n        view.addEventListener('viewshow', function (e) {\n            const isRestored = e.detail.isRestored;\n            appRouter.setTitle(null);\n            libraryMenu.setTransparentMenu(true);\n\n            if (!isRestored) {\n                loadServers();\n            }\n        });\n        view.querySelector('.servers').addEventListener('click', function (e) {\n            const card = dom.parentWithClass(e.target, 'card');\n\n            if (card) {\n                const url = card.getAttribute('data-url');\n\n                if (url) {\n                    appRouter.show(url);\n                } else {\n                    const id = card.getAttribute('data-id');\n                    onServerClick(servers.filter(function (s) {\n                        return s.Id === id;\n                    })[0]);\n                }\n            }\n        });\n    }\n\n/* eslint-enable indent */\n"]}