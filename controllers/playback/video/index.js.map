{"version":3,"sources":["controllers/playback/video/index.js"],"names":["define","_require","_exports","_playbackManager","_dom","_inputManager","_mouseManager","_datetime","_itemHelper","_mediaInfo","_focusManager","_events","_connectionManager","_browser","_globalize","_apphost","_layoutManager","userSettings","_keyboardnavigation","_scrollStyles","_embySlider","_paperIconButtonLight","_videoosd","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_getRequireWildcardCache","WeakMap","cache","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","seriesImageUrl","item","options","Type","type","SeriesPrimaryImageTag","tag","connectionManager","getApiClient","ServerId","getScaledImageUrl","SeriesId","SeriesThumbImageTag","ParentThumbImageTag","ParentThumbItemId","imageUrl","ImageTags","PrimaryImageItemId","Id","AlbumId","AlbumPrimaryImageTag","getOpenedDialog","document","querySelector","value","_default","view","params","onVerticalSwipe","e","elem","data","player","currentPlayer","deltaY","currentDeltaY","windowSize","dom","getWindowSize","supportsBrightnessChange","clientX","innerWidth","doBrightnessTouch","viewHeight","delta","newValue","playbackManager","getBrightness","Math","min","max","setBrightness","innerHeight","doVolumeTouch","getVolume","setVolume","updateRecordingButton","recordingButtonManager","destroy","classList","add","getCurrentUser","then","user","Policy","EnableLiveTvManagement","Promise","_resolve","_reject","imported","_ref","RecordingButton","refreshItem","button","remove","updateDisplayItem","itemInfo","originalItem","currentItem","displayItem","setPoster","parentName","SeriesName","Album","EpisodeTitle","IsSeries","Name","setTitle","Emby","Page","documentTitle","title","titleElement","displayName","itemHelper","getDisplayName","includeParentInfo","includeIndexNumber","innerHTML","mediaInfoHtml","mediaInfo","getPrimaryMediaInfoHtml","runtime","subtitles","tomatoes","endsAt","episodeTitle","originalAirDate","episodeTitleIndexNumber","programIndicator","osdMediaInfo","secondaryMediaInfo","secondaryMediaInfoHtml","getSecondaryMediaInfoHtml","startDate","programTime","enableProgressByTimeOfDay","setDisplayTime","startTimeText","StartDate","endTimeText","EndDate","programStartDateMs","datetime","parseISO8601Date","getTime","programEndDateMs","getDisplayTimeWithoutAmPm","date","showSeconds","toLocaleTimeString","hour","minute","second","toLowerCase","replace","trim","getDisplayTime","html","updateNowPlayingInfo","state","NowPlayingItem","nowPlayingVolumeSlider","disabled","nowPlayingPositionSlider","btnFastForward","btnRewind","shouldEnableProgressByTimeOfDay","CurrentProgram","getDisplayItem","apiClient","getItem","getCurrentUserId","refreshedItem","resolve","subtitleTracks","length","toggleSubtitleSync","audioTracks","secondaryItem","osdPoster","imgUrl","maxWidth","clientWidth","clickedElement","playPauseClickTimeout","comingUpNextDisplayed","currentUpNextDialog","isEnabled","currentVisibleMenu","statsOverlay","osdHideTimeout","lastPointerMoveData","mouseIsDown","showOsd","slideDownToShow","headerElement","showMainOsdControls","osdBottomElement","clearHideAnimationEventListeners","layoutManager","mobile","setTimeout","focusManager","focus","resetIdle","hideOsd","slideUpToHide","hideMainOsdControls","addEventListener","transitionEndEventName","onHideAnimationComplete","once","activeElement","blur","mouseManager","hideCursor","stopOsdHideTimer","clearTimeout","removeEventListener","target","startOsdHideTimer","onPointerMove","pointerType","eventX","screenX","eventY","screenY","x","y","abs","onInputCommand","detail","command","preventDefault","rewind","fastForward","nextChapter","previousChapter","onRecordingCommand","btnRecord","contains","click","toggleStats","updateFullscreenIcon","icon","isFullscreen","setAttribute","globalize","translate","onPlayerChange","bindToPlayer","getCurrentPlayer","onStateChanged","event","updatePlayerStateInternal","playState","PlayState","updatePlayPauseState","IsPaused","supportedCommands","getSupportedCommands","currentPlayerSupportedCommands","indexOf","updatePlayerVolumeState","IsMuted","VolumeLevel","dragging","CanSeek","nowPlayingItem","playbackStartTimeTicks","PlaybackStartTimeTicks","updateTimeDisplay","PositionTicks","RunTimeTicks","BufferedRanges","MediaSource","SupportsTranscoding","isProgressClear","setIsClear","setKeyboardSteps","skipBackLength","skipForwardLength","isLocalPlayer","tv","this","updatePlaylist","btnPreviousTrack","btnNextTrack","enableStopOnBack","enabled","onViewHideStopPlayback","isPlayingVideo","onPlayPauseStateChanged","paused","onVolumeChanged","isMuted","onPlaybackStart","console","debug","resetUpNextDialog","onPlaybackStopped","currentRuntimeTicks","NextMediaType","back","onMediaStreamsChanged","getPlayerState","onBeginFetch","onEndFetch","releaseCurrentPlayer","events","on","onTimeUpdate","isFetching","destroyStats","destroySubtitleSync","off","now","Date","lastUpdateTime","duration","currentTime","playbackStartTime","getBufferedRanges","refreshProgramInfoIfNeeded","program","endDate","error","showComingUpNextIfNeeded","currentTimeTicks","runtimeTicks","enableNextVideoInfoOverlay","timeRemainingTicks","showComingUpNext","_ref2","UpNextDialog","nextItem","parent","onUpNextHidden","isPaused","btnPlayPause","btnPlayPauseIcon","getDisplayPercentByTimeOfDay","programRuntimeMs","currentTimeMs","positionTicks","bufferedRanges","rangeStart","start","rangeEnd","end","setBufferedRanges","nowPlayingPositionText","nowPlayingDurationText","pct","endsAtText","getEndsAtFromPosition","updateTimeText","volumeLevel","showMuteButton","showVolumeSlider","appHost","supports","buttonMute","buttonMuteIcon","nowPlayingVolumeSliderContainer","ticks","divider","getDisplayRunningTime","onSettingsOption","selectedOption","enableShowingSubtitleOffset","_ref4","PlayerStats","toggle","action","_ref7","SubtitleSync","subtitleSyncOverlay","onKeyDown","keyboardnavigation","getKeyName","isKeyModified","ctrlKey","altKey","metaKey","keyCode","playPause","isNavigationKey","stopPropagation","volumeUp","volumeDown","toggleFullscreen","toggleMute","shiftKey","previousTrack","nextTrack","hasFocus","seekPercent","percent","parseInt","increasePlaybackRate","decreasePlaybackRate","onKeyDownCapture","onWindowMouseDown","onWindowMouseUp","onWindowTouchStart","onWindowTouchEnd","onWindowDragEnd","_ref8","disableFullscreen","stop","_ref9","enableFullscreen","self","whichTransitionEvent","enableKeyboardDragging","setTransparency","window","PointerEvent","passive","inputManager","capture","forEach","_ref10","goHome","togglePictureInPicture","toggleAirPlay","onSettingsButtonClick","btn","_ref3","playerSettingsMenu","showSubOffset","supportSubtitleOffset","canHandleOffsetOnCurrentSubtitle","show","mediaType","positionTo","stats","suboffset","onOption","finally","touchHelper","lastPointerDown","parentWithClass","toggleOsd","browser","touch","onDoubleClick","newPercent","parseFloat","seekAirTimeTicks","seek","getBubbleHtml","ms","Chapters","ImageTag","getChapterBubbleHtml","chapters","chapter","index","i","currentChapter","StartPositionTicks","src","getImgUrl","showAudioTrackSelection","currentIndex","getAudioStreamIndex","menuItems","map","stream","opt","name","DisplayTitle","id","Index","selected","_ref5","items","setAudioStreamIndex","showSubtitleTrackSelection","streams","getSubtitleStreamIndex","unshift","_ref6","setSubtitleStreamIndex","_ref11","TouchHelper","swipeYThreshold","triggerOnMove","preventDefaultOnMove","ignoreTagNames"],"mappings":"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","file":"index.js","sourcesContent":["import playbackManager from 'playbackManager';\nimport dom from 'dom';\nimport inputManager from 'inputManager';\nimport mouseManager from 'mouseManager';\nimport datetime from 'datetime';\nimport itemHelper from 'itemHelper';\nimport mediaInfo from 'mediaInfo';\nimport focusManager from 'focusManager';\nimport events from 'events';\nimport connectionManager from 'connectionManager';\nimport browser from 'browser';\nimport globalize from 'globalize';\nimport appHost from 'apphost';\nimport layoutManager from 'layoutManager';\nimport * as userSettings from 'userSettings';\nimport keyboardnavigation from 'keyboardnavigation';\nimport 'scrollStyles';\nimport 'emby-slider';\nimport 'paper-icon-button-light';\nimport 'css!assets/css/videoosd';\n\n/* eslint-disable indent */\n\n    function seriesImageUrl(item, options) {\n        if (item.Type !== 'Episode') {\n            return null;\n        }\n\n        options = options || {};\n        options.type = options.type || 'Primary';\n        if (options.type === 'Primary' && item.SeriesPrimaryImageTag) {\n            options.tag = item.SeriesPrimaryImageTag;\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n        }\n\n        if (options.type === 'Thumb') {\n            if (item.SeriesThumbImageTag) {\n                options.tag = item.SeriesThumbImageTag;\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n            }\n\n            if (item.ParentThumbImageTag) {\n                options.tag = item.ParentThumbImageTag;\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.ParentThumbItemId, options);\n            }\n        }\n\n        return null;\n    }\n\n    function imageUrl(item, options) {\n        options = options || {};\n        options.type = options.type || 'Primary';\n\n        if (item.ImageTags && item.ImageTags[options.type]) {\n            options.tag = item.ImageTags[options.type];\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.PrimaryImageItemId || item.Id, options);\n        }\n\n        if (options.type === 'Primary' && item.AlbumId && item.AlbumPrimaryImageTag) {\n            options.tag = item.AlbumPrimaryImageTag;\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.AlbumId, options);\n        }\n\n        return null;\n    }\n\n    function getOpenedDialog() {\n        return document.querySelector('.dialogContainer .dialog.opened');\n    }\n\n    export default function (view, params) {\n        function onVerticalSwipe(e, elem, data) {\n            const player = currentPlayer;\n\n            if (player) {\n                const deltaY = data.currentDeltaY;\n                const windowSize = dom.getWindowSize();\n\n                if (supportsBrightnessChange && data.clientX < windowSize.innerWidth / 2) {\n                    return void doBrightnessTouch(deltaY, player, windowSize.innerHeight);\n                }\n\n                doVolumeTouch(deltaY, player, windowSize.innerHeight);\n            }\n        }\n\n        function doBrightnessTouch(deltaY, player, viewHeight) {\n            const delta = -deltaY / viewHeight * 100;\n            let newValue = playbackManager.getBrightness(player) + delta;\n            newValue = Math.min(newValue, 100);\n            newValue = Math.max(newValue, 0);\n            playbackManager.setBrightness(newValue, player);\n        }\n\n        function doVolumeTouch(deltaY, player, viewHeight) {\n            const delta = -deltaY / viewHeight * 100;\n            let newValue = playbackManager.getVolume(player) + delta;\n            newValue = Math.min(newValue, 100);\n            newValue = Math.max(newValue, 0);\n            playbackManager.setVolume(newValue, player);\n        }\n\n        function onDoubleClick(e) {\n            const clientX = e.clientX;\n\n            if (clientX != null) {\n                if (clientX < dom.getWindowSize().innerWidth / 2) {\n                    playbackManager.rewind(currentPlayer);\n                } else {\n                    playbackManager.fastForward(currentPlayer);\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        }\n\n        function getDisplayItem(item) {\n            if (item.Type === 'TvChannel') {\n                const apiClient = connectionManager.getApiClient(item.ServerId);\n                return apiClient.getItem(apiClient.getCurrentUserId(), item.Id).then(function (refreshedItem) {\n                    return {\n                        originalItem: refreshedItem,\n                        displayItem: refreshedItem.CurrentProgram\n                    };\n                });\n            }\n\n            return Promise.resolve({\n                originalItem: item\n            });\n        }\n\n        function updateRecordingButton(item) {\n            if (!item || item.Type !== 'Program') {\n                if (recordingButtonManager) {\n                    recordingButtonManager.destroy();\n                    recordingButtonManager = null;\n                }\n\n                return void view.querySelector('.btnRecord').classList.add('hide');\n            }\n\n            connectionManager.getApiClient(item.ServerId).getCurrentUser().then(function (user) {\n                if (user.Policy.EnableLiveTvManagement) {\n                    import('recordingButton').then(({default: RecordingButton}) => {\n                        if (recordingButtonManager) {\n                            return void recordingButtonManager.refreshItem(item);\n                        }\n\n                        recordingButtonManager = new RecordingButton({\n                            item: item,\n                            button: view.querySelector('.btnRecord')\n                        });\n                        view.querySelector('.btnRecord').classList.remove('hide');\n                    });\n                }\n            });\n        }\n\n        function updateDisplayItem(itemInfo) {\n            const item = itemInfo.originalItem;\n            currentItem = item;\n            const displayItem = itemInfo.displayItem || item;\n            updateRecordingButton(displayItem);\n            setPoster(displayItem, item);\n            let parentName = displayItem.SeriesName || displayItem.Album;\n\n            if (displayItem.EpisodeTitle || displayItem.IsSeries) {\n                parentName = displayItem.Name;\n            }\n\n            setTitle(displayItem, parentName);\n            const titleElement = view.querySelector('.osdTitle');\n            let displayName = itemHelper.getDisplayName(displayItem, {\n                includeParentInfo: displayItem.Type !== 'Program',\n                includeIndexNumber: displayItem.Type !== 'Program'\n            });\n\n            if (!displayName) {\n                displayName = displayItem.Type;\n            }\n\n            titleElement.innerHTML = displayName;\n\n            if (displayName) {\n                titleElement.classList.remove('hide');\n            } else {\n                titleElement.classList.add('hide');\n            }\n\n            const mediaInfoHtml = mediaInfo.getPrimaryMediaInfoHtml(displayItem, {\n                runtime: false,\n                subtitles: false,\n                tomatoes: false,\n                endsAt: false,\n                episodeTitle: false,\n                originalAirDate: displayItem.Type !== 'Program',\n                episodeTitleIndexNumber: displayItem.Type !== 'Program',\n                programIndicator: false\n            });\n            const osdMediaInfo = view.querySelector('.osdMediaInfo');\n            osdMediaInfo.innerHTML = mediaInfoHtml;\n\n            if (mediaInfoHtml) {\n                osdMediaInfo.classList.remove('hide');\n            } else {\n                osdMediaInfo.classList.add('hide');\n            }\n\n            const secondaryMediaInfo = view.querySelector('.osdSecondaryMediaInfo');\n            const secondaryMediaInfoHtml = mediaInfo.getSecondaryMediaInfoHtml(displayItem, {\n                startDate: false,\n                programTime: false\n            });\n            secondaryMediaInfo.innerHTML = secondaryMediaInfoHtml;\n\n            if (secondaryMediaInfoHtml) {\n                secondaryMediaInfo.classList.remove('hide');\n            } else {\n                secondaryMediaInfo.classList.add('hide');\n            }\n\n            if (displayName) {\n                view.querySelector('.osdMainTextContainer').classList.remove('hide');\n            } else {\n                view.querySelector('.osdMainTextContainer').classList.add('hide');\n            }\n\n            if (enableProgressByTimeOfDay) {\n                setDisplayTime(startTimeText, displayItem.StartDate);\n                setDisplayTime(endTimeText, displayItem.EndDate);\n                startTimeText.classList.remove('hide');\n                endTimeText.classList.remove('hide');\n                programStartDateMs = displayItem.StartDate ? datetime.parseISO8601Date(displayItem.StartDate).getTime() : 0;\n                programEndDateMs = displayItem.EndDate ? datetime.parseISO8601Date(displayItem.EndDate).getTime() : 0;\n            } else {\n                startTimeText.classList.add('hide');\n                endTimeText.classList.add('hide');\n                startTimeText.innerHTML = '';\n                endTimeText.innerHTML = '';\n                programStartDateMs = 0;\n                programEndDateMs = 0;\n            }\n        }\n\n        function getDisplayTimeWithoutAmPm(date, showSeconds) {\n            if (showSeconds) {\n                return datetime.toLocaleTimeString(date, {\n                    hour: 'numeric',\n                    minute: '2-digit',\n                    second: '2-digit'\n                }).toLowerCase().replace('am', '').replace('pm', '').trim();\n            }\n\n            return datetime.getDisplayTime(date).toLowerCase().replace('am', '').replace('pm', '').trim();\n        }\n\n        function setDisplayTime(elem, date) {\n            let html;\n\n            if (date) {\n                date = datetime.parseISO8601Date(date);\n                html = getDisplayTimeWithoutAmPm(date);\n            }\n\n            elem.innerHTML = html || '';\n        }\n\n        function shouldEnableProgressByTimeOfDay(item) {\n            return !(item.Type !== 'TvChannel' || !item.CurrentProgram);\n        }\n\n        function updateNowPlayingInfo(player, state) {\n            const item = state.NowPlayingItem;\n\n            currentItem = item;\n            if (!item) {\n                setPoster(null);\n                updateRecordingButton(null);\n                Emby.Page.setTitle('');\n                nowPlayingVolumeSlider.disabled = true;\n                nowPlayingPositionSlider.disabled = true;\n                btnFastForward.disabled = true;\n                btnRewind.disabled = true;\n                view.querySelector('.btnSubtitles').classList.add('hide');\n                view.querySelector('.btnAudio').classList.add('hide');\n                view.querySelector('.osdTitle').innerHTML = '';\n                view.querySelector('.osdMediaInfo').innerHTML = '';\n                return;\n            }\n\n            enableProgressByTimeOfDay = shouldEnableProgressByTimeOfDay(item);\n            getDisplayItem(item).then(updateDisplayItem);\n            nowPlayingVolumeSlider.disabled = false;\n            nowPlayingPositionSlider.disabled = false;\n            btnFastForward.disabled = false;\n            btnRewind.disabled = false;\n\n            if (playbackManager.subtitleTracks(player).length) {\n                view.querySelector('.btnSubtitles').classList.remove('hide');\n                toggleSubtitleSync();\n            } else {\n                view.querySelector('.btnSubtitles').classList.add('hide');\n                toggleSubtitleSync('forceToHide');\n            }\n\n            if (playbackManager.audioTracks(player).length > 1) {\n                view.querySelector('.btnAudio').classList.remove('hide');\n            } else {\n                view.querySelector('.btnAudio').classList.add('hide');\n            }\n        }\n\n        function setTitle(item, parentName) {\n            Emby.Page.setTitle(parentName || '');\n\n            const documentTitle = parentName || (item ? item.Name : null);\n\n            if (documentTitle) {\n                document.title = documentTitle;\n            }\n        }\n\n        function setPoster(item, secondaryItem) {\n            const osdPoster = view.querySelector('.osdPoster');\n\n            if (item) {\n                let imgUrl = seriesImageUrl(item, {\n                    maxWidth: osdPoster.clientWidth,\n                    type: 'Primary'\n                }) || seriesImageUrl(item, {\n                    maxWidth: osdPoster.clientWidth,\n                    type: 'Thumb'\n                }) || imageUrl(item, {\n                    maxWidth: osdPoster.clientWidth,\n                    type: 'Primary'\n                });\n\n                if (!imgUrl && secondaryItem && (imgUrl = seriesImageUrl(secondaryItem, {\n                    maxWidth: osdPoster.clientWidth,\n                    type: 'Primary'\n                }) || seriesImageUrl(secondaryItem, {\n                    maxWidth: osdPoster.clientWidth,\n                    type: 'Thumb'\n                }) || imageUrl(secondaryItem, {\n                    maxWidth: osdPoster.clientWidth,\n                    type: 'Primary'\n                })), imgUrl) {\n                    return void (osdPoster.innerHTML = '<img src=\"' + imgUrl + '\" />');\n                }\n            }\n\n            osdPoster.innerHTML = '';\n        }\n\n        let mouseIsDown = false;\n\n        function showOsd() {\n            slideDownToShow(headerElement);\n            showMainOsdControls();\n            resetIdle();\n        }\n\n        function hideOsd() {\n            slideUpToHide(headerElement);\n            hideMainOsdControls();\n            mouseManager.hideCursor();\n        }\n\n        function toggleOsd() {\n            if (currentVisibleMenu === 'osd') {\n                hideOsd();\n            } else if (!currentVisibleMenu) {\n                showOsd();\n            }\n        }\n\n        function startOsdHideTimer() {\n            stopOsdHideTimer();\n            osdHideTimeout = setTimeout(hideOsd, 3e3);\n        }\n\n        function stopOsdHideTimer() {\n            if (osdHideTimeout) {\n                clearTimeout(osdHideTimeout);\n                osdHideTimeout = null;\n            }\n        }\n\n        function slideDownToShow(elem) {\n            elem.classList.remove('osdHeader-hidden');\n        }\n\n        function slideUpToHide(elem) {\n            elem.classList.add('osdHeader-hidden');\n        }\n\n        function clearHideAnimationEventListeners(elem) {\n            dom.removeEventListener(elem, transitionEndEventName, onHideAnimationComplete, {\n                once: true\n            });\n        }\n\n        function onHideAnimationComplete(e) {\n            const elem = e.target;\n            if (elem != osdBottomElement)\n                return;\n            elem.classList.add('hide');\n            dom.removeEventListener(elem, transitionEndEventName, onHideAnimationComplete, {\n                once: true\n            });\n        }\n\n        function showMainOsdControls() {\n            if (!currentVisibleMenu) {\n                const elem = osdBottomElement;\n                currentVisibleMenu = 'osd';\n                clearHideAnimationEventListeners(elem);\n                elem.classList.remove('hide');\n                elem.classList.remove('videoOsdBottom-hidden');\n\n                if (!layoutManager.mobile) {\n                    setTimeout(function () {\n                        focusManager.focus(elem.querySelector('.btnPause'));\n                    }, 50);\n                }\n                toggleSubtitleSync();\n            }\n        }\n\n        function hideMainOsdControls() {\n            if (currentVisibleMenu === 'osd') {\n                const elem = osdBottomElement;\n                clearHideAnimationEventListeners(elem);\n                elem.classList.add('videoOsdBottom-hidden');\n\n                dom.addEventListener(elem, transitionEndEventName, onHideAnimationComplete, {\n                    once: true\n                });\n                currentVisibleMenu = null;\n                toggleSubtitleSync('hide');\n\n                // Firefox does not blur by itself\n                if (document.activeElement) {\n                    document.activeElement.blur();\n                }\n            }\n        }\n\n        // TODO: Move all idle-related code to `inputManager` or `idleManager` or `idleHelper` (per dialog thing) and listen event from there.\n\n        function resetIdle() {\n            // Restart hide timer if OSD is currently visible and there is no opened dialog\n            if (currentVisibleMenu && !mouseIsDown && !getOpenedDialog()) {\n                startOsdHideTimer();\n            } else {\n                stopOsdHideTimer();\n            }\n        }\n\n        function onPointerMove(e) {\n            if ((e.pointerType || (layoutManager.mobile ? 'touch' : 'mouse')) === 'mouse') {\n                const eventX = e.screenX || 0;\n                const eventY = e.screenY || 0;\n                const obj = lastPointerMoveData;\n\n                if (!obj) {\n                    lastPointerMoveData = {\n                        x: eventX,\n                        y: eventY\n                    };\n                    return;\n                }\n\n                if (Math.abs(eventX - obj.x) < 10 && Math.abs(eventY - obj.y) < 10) {\n                    return;\n                }\n\n                obj.x = eventX;\n                obj.y = eventY;\n                showOsd();\n            }\n        }\n\n        function onInputCommand(e) {\n            const player = currentPlayer;\n\n            switch (e.detail.command) {\n                case 'left':\n                    if (currentVisibleMenu === 'osd') {\n                        showOsd();\n                    } else {\n                        if (!currentVisibleMenu) {\n                            e.preventDefault();\n                            playbackManager.rewind(player);\n                        }\n                    }\n\n                    break;\n\n                case 'right':\n                    if (currentVisibleMenu === 'osd') {\n                        showOsd();\n                    } else if (!currentVisibleMenu) {\n                        e.preventDefault();\n                        playbackManager.fastForward(player);\n                    }\n\n                    break;\n\n                case 'pageup':\n                    playbackManager.nextChapter(player);\n                    break;\n\n                case 'pagedown':\n                    playbackManager.previousChapter(player);\n                    break;\n\n                case 'up':\n                case 'down':\n                case 'select':\n                case 'menu':\n                case 'info':\n                case 'play':\n                case 'playpause':\n                case 'pause':\n                case 'fastforward':\n                case 'rewind':\n                case 'next':\n                case 'previous':\n                    showOsd();\n                    break;\n\n                case 'record':\n                    onRecordingCommand();\n                    showOsd();\n                    break;\n\n                case 'togglestats':\n                    toggleStats();\n            }\n        }\n\n        function onRecordingCommand() {\n            const btnRecord = view.querySelector('.btnRecord');\n\n            if (!btnRecord.classList.contains('hide')) {\n                btnRecord.click();\n            }\n        }\n\n        function updateFullscreenIcon() {\n            const button = view.querySelector('.btnFullscreen');\n            const icon = button.querySelector('.material-icons');\n\n            icon.classList.remove('fullscreen_exit', 'fullscreen');\n\n            if (playbackManager.isFullscreen(currentPlayer)) {\n                button.setAttribute('title', globalize.translate('ExitFullscreen') + ' (f)');\n                icon.classList.add('fullscreen_exit');\n            } else {\n                button.setAttribute('title', globalize.translate('Fullscreen') + ' (f)');\n                icon.classList.add('fullscreen');\n            }\n        }\n\n        function onPlayerChange() {\n            bindToPlayer(playbackManager.getCurrentPlayer());\n        }\n\n        function onStateChanged(event, state) {\n            const player = this;\n\n            if (state.NowPlayingItem) {\n                isEnabled = true;\n                updatePlayerStateInternal(event, player, state);\n                updatePlaylist(player);\n                enableStopOnBack(true);\n            }\n        }\n\n        function onPlayPauseStateChanged(e) {\n            if (isEnabled) {\n                updatePlayPauseState(this.paused());\n            }\n        }\n\n        function onVolumeChanged(e) {\n            if (isEnabled) {\n                const player = this;\n                updatePlayerVolumeState(player, player.isMuted(), player.getVolume());\n            }\n        }\n\n        function onPlaybackStart(e, state) {\n            console.debug('nowplaying event: ' + e.type);\n            const player = this;\n            onStateChanged.call(player, e, state);\n            resetUpNextDialog();\n        }\n\n        function resetUpNextDialog() {\n            comingUpNextDisplayed = false;\n            const dlg = currentUpNextDialog;\n\n            if (dlg) {\n                dlg.destroy();\n                currentUpNextDialog = null;\n            }\n        }\n\n        function onPlaybackStopped(e, state) {\n            currentRuntimeTicks = null;\n            resetUpNextDialog();\n            console.debug('nowplaying event: ' + e.type);\n\n            if (state.NextMediaType !== 'Video') {\n                view.removeEventListener('viewbeforehide', onViewHideStopPlayback);\n                Emby.Page.back();\n            }\n        }\n\n        function onMediaStreamsChanged(e) {\n            const player = this;\n            const state = playbackManager.getPlayerState(player);\n            onStateChanged.call(player, {\n                type: 'init'\n            }, state);\n        }\n\n        function onBeginFetch() {\n            document.querySelector('.osdMediaStatus').classList.remove('hide');\n        }\n\n        function onEndFetch() {\n            document.querySelector('.osdMediaStatus').classList.add('hide');\n        }\n\n        function bindToPlayer(player) {\n            if (player !== currentPlayer) {\n                releaseCurrentPlayer();\n                currentPlayer = player;\n                if (!player) return;\n            }\n            const state = playbackManager.getPlayerState(player);\n            onStateChanged.call(player, {\n                type: 'init'\n            }, state);\n            events.on(player, 'playbackstart', onPlaybackStart);\n            events.on(player, 'playbackstop', onPlaybackStopped);\n            events.on(player, 'volumechange', onVolumeChanged);\n            events.on(player, 'pause', onPlayPauseStateChanged);\n            events.on(player, 'unpause', onPlayPauseStateChanged);\n            events.on(player, 'timeupdate', onTimeUpdate);\n            events.on(player, 'fullscreenchange', updateFullscreenIcon);\n            events.on(player, 'mediastreamschange', onMediaStreamsChanged);\n            events.on(player, 'beginFetch', onBeginFetch);\n            events.on(player, 'endFetch', onEndFetch);\n            resetUpNextDialog();\n\n            if (player.isFetching) {\n                onBeginFetch();\n            }\n        }\n\n        function releaseCurrentPlayer() {\n            destroyStats();\n            destroySubtitleSync();\n            resetUpNextDialog();\n            const player = currentPlayer;\n\n            if (player) {\n                events.off(player, 'playbackstart', onPlaybackStart);\n                events.off(player, 'playbackstop', onPlaybackStopped);\n                events.off(player, 'volumechange', onVolumeChanged);\n                events.off(player, 'pause', onPlayPauseStateChanged);\n                events.off(player, 'unpause', onPlayPauseStateChanged);\n                events.off(player, 'timeupdate', onTimeUpdate);\n                events.off(player, 'fullscreenchange', updateFullscreenIcon);\n                events.off(player, 'mediastreamschange', onMediaStreamsChanged);\n                currentPlayer = null;\n            }\n        }\n\n        function onTimeUpdate(e) {\n            // Test for 'currentItem' is required for Firefox since its player spams 'timeupdate' events even being at breakpoint\n            if (isEnabled && currentItem) {\n                const now = new Date().getTime();\n\n                if (!(now - lastUpdateTime < 700)) {\n                    lastUpdateTime = now;\n                    const player = this;\n                    currentRuntimeTicks = playbackManager.duration(player);\n                    const currentTime = playbackManager.currentTime(player);\n                    updateTimeDisplay(currentTime, currentRuntimeTicks, playbackManager.playbackStartTime(player), playbackManager.getBufferedRanges(player));\n                    const item = currentItem;\n                    refreshProgramInfoIfNeeded(player, item);\n                    showComingUpNextIfNeeded(player, item, currentTime, currentRuntimeTicks);\n                }\n            }\n        }\n\n        function showComingUpNextIfNeeded(player, currentItem, currentTimeTicks, runtimeTicks) {\n            if (runtimeTicks && currentTimeTicks && !comingUpNextDisplayed && !currentVisibleMenu && currentItem.Type === 'Episode' && userSettings.enableNextVideoInfoOverlay()) {\n                const showAtSecondsLeft = runtimeTicks >= 3e10 ? 40 : runtimeTicks >= 24e9 ? 35 : 30;\n                const showAtTicks = runtimeTicks - 1e3 * showAtSecondsLeft * 1e4;\n                const timeRemainingTicks = runtimeTicks - currentTimeTicks;\n\n                if (currentTimeTicks >= showAtTicks && runtimeTicks >= 6e9 && timeRemainingTicks >= 2e8) {\n                    showComingUpNext(player);\n                }\n            }\n        }\n\n        function onUpNextHidden() {\n            if (currentVisibleMenu === 'upnext') {\n                currentVisibleMenu = null;\n            }\n        }\n\n        function showComingUpNext(player) {\n            import('upNextDialog').then(({default: UpNextDialog}) => {\n                if (!(currentVisibleMenu || currentUpNextDialog)) {\n                    currentVisibleMenu = 'upnext';\n                    comingUpNextDisplayed = true;\n                    playbackManager.nextItem(player).then(function (nextItem) {\n                        currentUpNextDialog = new UpNextDialog({\n                            parent: view.querySelector('.upNextContainer'),\n                            player: player,\n                            nextItem: nextItem\n                        });\n                        events.on(currentUpNextDialog, 'hide', onUpNextHidden);\n                    }, onUpNextHidden);\n                }\n            });\n        }\n\n        function refreshProgramInfoIfNeeded(player, item) {\n            if (item.Type === 'TvChannel') {\n                const program = item.CurrentProgram;\n\n                if (program && program.EndDate) {\n                    try {\n                        const endDate = datetime.parseISO8601Date(program.EndDate);\n\n                        if (new Date().getTime() >= endDate.getTime()) {\n                            console.debug('program info needs to be refreshed');\n                            const state = playbackManager.getPlayerState(player);\n                            onStateChanged.call(player, {\n                                type: 'init'\n                            }, state);\n                        }\n                    } catch (e) {\n                        console.error('error parsing date: ' + program.EndDate);\n                    }\n                }\n            }\n        }\n\n        function updatePlayPauseState(isPaused) {\n            const btnPlayPause = view.querySelector('.btnPause');\n            const btnPlayPauseIcon = btnPlayPause.querySelector('.material-icons');\n\n            btnPlayPauseIcon.classList.remove('play_arrow', 'pause');\n\n            if (isPaused) {\n                btnPlayPauseIcon.classList.add('play_arrow');\n                btnPlayPause.setAttribute('title', globalize.translate('Play') + ' (k)');\n            } else {\n                btnPlayPauseIcon.classList.add('pause');\n                btnPlayPause.setAttribute('title', globalize.translate('ButtonPause') + ' (k)');\n            }\n        }\n\n        function updatePlayerStateInternal(event, player, state) {\n            const playState = state.PlayState || {};\n            updatePlayPauseState(playState.IsPaused);\n            const supportedCommands = playbackManager.getSupportedCommands(player);\n            currentPlayerSupportedCommands = supportedCommands;\n            supportsBrightnessChange = supportedCommands.indexOf('SetBrightness') !== -1;\n            updatePlayerVolumeState(player, playState.IsMuted, playState.VolumeLevel);\n\n            if (nowPlayingPositionSlider && !nowPlayingPositionSlider.dragging) {\n                nowPlayingPositionSlider.disabled = !playState.CanSeek;\n            }\n\n            btnFastForward.disabled = !playState.CanSeek;\n            btnRewind.disabled = !playState.CanSeek;\n            const nowPlayingItem = state.NowPlayingItem || {};\n            playbackStartTimeTicks = playState.PlaybackStartTimeTicks;\n            updateTimeDisplay(playState.PositionTicks, nowPlayingItem.RunTimeTicks, playState.PlaybackStartTimeTicks, playState.BufferedRanges || []);\n            updateNowPlayingInfo(player, state);\n\n            if (state.MediaSource && state.MediaSource.SupportsTranscoding && supportedCommands.indexOf('SetMaxStreamingBitrate') !== -1) {\n                view.querySelector('.btnVideoOsdSettings').classList.remove('hide');\n            } else {\n                view.querySelector('.btnVideoOsdSettings').classList.add('hide');\n            }\n\n            const isProgressClear = state.MediaSource && state.MediaSource.RunTimeTicks == null;\n            nowPlayingPositionSlider.setIsClear(isProgressClear);\n\n            if (nowPlayingItem.RunTimeTicks) {\n                nowPlayingPositionSlider.setKeyboardSteps(userSettings.skipBackLength() * 1000000 / nowPlayingItem.RunTimeTicks,\n                    userSettings.skipForwardLength() * 1000000 / nowPlayingItem.RunTimeTicks);\n            }\n\n            if (supportedCommands.indexOf('ToggleFullscreen') === -1 || player.isLocalPlayer && layoutManager.tv && playbackManager.isFullscreen(player)) {\n                view.querySelector('.btnFullscreen').classList.add('hide');\n            } else {\n                view.querySelector('.btnFullscreen').classList.remove('hide');\n            }\n\n            if (supportedCommands.indexOf('PictureInPicture') === -1) {\n                view.querySelector('.btnPip').classList.add('hide');\n            } else {\n                view.querySelector('.btnPip').classList.remove('hide');\n            }\n\n            if (supportedCommands.indexOf('AirPlay') === -1) {\n                view.querySelector('.btnAirPlay').classList.add('hide');\n            } else {\n                view.querySelector('.btnAirPlay').classList.remove('hide');\n            }\n\n            updateFullscreenIcon();\n        }\n\n        function getDisplayPercentByTimeOfDay(programStartDateMs, programRuntimeMs, currentTimeMs) {\n            return (currentTimeMs - programStartDateMs) / programRuntimeMs * 100;\n        }\n\n        function updateTimeDisplay(positionTicks, runtimeTicks, playbackStartTimeTicks, bufferedRanges) {\n            if (enableProgressByTimeOfDay) {\n                if (nowPlayingPositionSlider && !nowPlayingPositionSlider.dragging) {\n                    if (programStartDateMs && programEndDateMs) {\n                        const currentTimeMs = (playbackStartTimeTicks + (positionTicks || 0)) / 1e4;\n                        const programRuntimeMs = programEndDateMs - programStartDateMs;\n\n                        if (nowPlayingPositionSlider.value = getDisplayPercentByTimeOfDay(programStartDateMs, programRuntimeMs, currentTimeMs), bufferedRanges.length) {\n                            const rangeStart = getDisplayPercentByTimeOfDay(programStartDateMs, programRuntimeMs, (playbackStartTimeTicks + (bufferedRanges[0].start || 0)) / 1e4);\n                            const rangeEnd = getDisplayPercentByTimeOfDay(programStartDateMs, programRuntimeMs, (playbackStartTimeTicks + (bufferedRanges[0].end || 0)) / 1e4);\n                            nowPlayingPositionSlider.setBufferedRanges([{\n                                start: rangeStart,\n                                end: rangeEnd\n                            }]);\n                        } else {\n                            nowPlayingPositionSlider.setBufferedRanges([]);\n                        }\n                    } else {\n                        nowPlayingPositionSlider.value = 0;\n                        nowPlayingPositionSlider.setBufferedRanges([]);\n                    }\n                }\n\n                nowPlayingPositionText.innerHTML = '';\n                nowPlayingDurationText.innerHTML = '';\n            } else {\n                if (nowPlayingPositionSlider && !nowPlayingPositionSlider.dragging) {\n                    if (runtimeTicks) {\n                        let pct = positionTicks / runtimeTicks;\n                        pct *= 100;\n                        nowPlayingPositionSlider.value = pct;\n                    } else {\n                        nowPlayingPositionSlider.value = 0;\n                    }\n\n                    if (runtimeTicks && positionTicks != null && currentRuntimeTicks && !enableProgressByTimeOfDay && currentItem.RunTimeTicks && currentItem.Type !== 'Recording') {\n                        endsAtText.innerHTML = '&nbsp;&nbsp;-&nbsp;&nbsp;' + mediaInfo.getEndsAtFromPosition(runtimeTicks, positionTicks, true);\n                    } else {\n                        endsAtText.innerHTML = '';\n                    }\n                }\n\n                if (nowPlayingPositionSlider) {\n                    nowPlayingPositionSlider.setBufferedRanges(bufferedRanges, runtimeTicks, positionTicks);\n                }\n\n                updateTimeText(nowPlayingPositionText, positionTicks);\n                updateTimeText(nowPlayingDurationText, runtimeTicks, true);\n            }\n        }\n\n        function updatePlayerVolumeState(player, isMuted, volumeLevel) {\n            const supportedCommands = currentPlayerSupportedCommands;\n            let showMuteButton = true;\n            let showVolumeSlider = true;\n\n            if (supportedCommands.indexOf('Mute') === -1) {\n                showMuteButton = false;\n            }\n\n            if (supportedCommands.indexOf('SetVolume') === -1) {\n                showVolumeSlider = false;\n            }\n\n            if (player.isLocalPlayer && appHost.supports('physicalvolumecontrol')) {\n                showMuteButton = false;\n                showVolumeSlider = false;\n            }\n\n            const buttonMute = view.querySelector('.buttonMute');\n            const buttonMuteIcon = buttonMute.querySelector('.material-icons');\n\n            buttonMuteIcon.classList.remove('volume_off', 'volume_up');\n\n            if (isMuted) {\n                buttonMute.setAttribute('title', globalize.translate('Unmute') + ' (m)');\n                buttonMuteIcon.classList.add('volume_off');\n            } else {\n                buttonMute.setAttribute('title', globalize.translate('Mute') + ' (m)');\n                buttonMuteIcon.classList.add('volume_up');\n            }\n\n            if (showMuteButton) {\n                buttonMute.classList.remove('hide');\n            } else {\n                buttonMute.classList.add('hide');\n            }\n\n            if (nowPlayingVolumeSlider) {\n                if (showVolumeSlider) {\n                    nowPlayingVolumeSliderContainer.classList.remove('hide');\n                } else {\n                    nowPlayingVolumeSliderContainer.classList.add('hide');\n                }\n\n                if (!nowPlayingVolumeSlider.dragging) {\n                    nowPlayingVolumeSlider.value = volumeLevel || 0;\n                }\n            }\n        }\n\n        function updatePlaylist(player) {\n            const btnPreviousTrack = view.querySelector('.btnPreviousTrack');\n            const btnNextTrack = view.querySelector('.btnNextTrack');\n            btnPreviousTrack.classList.remove('hide');\n            btnNextTrack.classList.remove('hide');\n            btnNextTrack.disabled = false;\n            btnPreviousTrack.disabled = false;\n        }\n\n        function updateTimeText(elem, ticks, divider) {\n            if (ticks == null) {\n                elem.innerHTML = '';\n                return;\n            }\n\n            let html = datetime.getDisplayRunningTime(ticks);\n\n            if (divider) {\n                html = '&nbsp;/&nbsp;' + html;\n            }\n\n            elem.innerHTML = html;\n        }\n\n        function onSettingsButtonClick(e) {\n            const btn = this;\n\n            import('playerSettingsMenu').then(({default: playerSettingsMenu}) => {\n                const player = currentPlayer;\n\n                if (player) {\n                    // show subtitle offset feature only if player and media support it\n                    const showSubOffset = playbackManager.supportSubtitleOffset(player) &&\n                        playbackManager.canHandleOffsetOnCurrentSubtitle(player);\n\n                    playerSettingsMenu.show({\n                        mediaType: 'Video',\n                        player: player,\n                        positionTo: btn,\n                        stats: true,\n                        suboffset: showSubOffset,\n                        onOption: onSettingsOption\n                    }).finally(() => {\n                        resetIdle();\n                    });\n\n                    setTimeout(resetIdle, 0);\n                }\n            });\n        }\n\n        function onSettingsOption(selectedOption) {\n            if (selectedOption === 'stats') {\n                toggleStats();\n            } else if (selectedOption === 'suboffset') {\n                const player = currentPlayer;\n                if (player) {\n                    playbackManager.enableShowingSubtitleOffset(player);\n                    toggleSubtitleSync();\n                }\n            }\n        }\n\n        function toggleStats() {\n            import('playerStats').then(({default: PlayerStats}) => {\n                const player = currentPlayer;\n\n                if (player) {\n                    if (statsOverlay) {\n                        statsOverlay.toggle();\n                    } else {\n                        statsOverlay = new PlayerStats({\n                            player: player\n                        });\n                    }\n                }\n            });\n        }\n\n        function destroyStats() {\n            if (statsOverlay) {\n                statsOverlay.destroy();\n                statsOverlay = null;\n            }\n        }\n\n        function showAudioTrackSelection() {\n            const player = currentPlayer;\n            const audioTracks = playbackManager.audioTracks(player);\n            const currentIndex = playbackManager.getAudioStreamIndex(player);\n            const menuItems = audioTracks.map(function (stream) {\n                const opt = {\n                    name: stream.DisplayTitle,\n                    id: stream.Index\n                };\n\n                if (stream.Index === currentIndex) {\n                    opt.selected = true;\n                }\n\n                return opt;\n            });\n            const positionTo = this;\n\n            import('actionsheet').then(({default: actionsheet}) => {\n                actionsheet.show({\n                    items: menuItems,\n                    title: globalize.translate('Audio'),\n                    positionTo: positionTo\n                }).then(function (id) {\n                    const index = parseInt(id);\n\n                    if (index !== currentIndex) {\n                        playbackManager.setAudioStreamIndex(index, player);\n                    }\n                }).finally(() => {\n                    resetIdle();\n                });\n\n                setTimeout(resetIdle, 0);\n            });\n        }\n\n        function showSubtitleTrackSelection() {\n            const player = currentPlayer;\n            const streams = playbackManager.subtitleTracks(player);\n            let currentIndex = playbackManager.getSubtitleStreamIndex(player);\n\n            if (currentIndex == null) {\n                currentIndex = -1;\n            }\n\n            streams.unshift({\n                Index: -1,\n                DisplayTitle: globalize.translate('Off')\n            });\n            const menuItems = streams.map(function (stream) {\n                const opt = {\n                    name: stream.DisplayTitle,\n                    id: stream.Index\n                };\n\n                if (stream.Index === currentIndex) {\n                    opt.selected = true;\n                }\n\n                return opt;\n            });\n            const positionTo = this;\n\n            import('actionsheet').then(({default: actionsheet}) => {\n                actionsheet.show({\n                    title: globalize.translate('Subtitles'),\n                    items: menuItems,\n                    positionTo: positionTo\n                }).then(function (id) {\n                    const index = parseInt(id);\n\n                    if (index !== currentIndex) {\n                        playbackManager.setSubtitleStreamIndex(index, player);\n                    }\n\n                    toggleSubtitleSync();\n                }).finally(() => {\n                    resetIdle();\n                });\n\n                setTimeout(resetIdle, 0);\n            });\n        }\n\n        function toggleSubtitleSync(action) {\n            import('subtitleSync').then(({default: SubtitleSync}) => {\n                const player = currentPlayer;\n                if (subtitleSyncOverlay) {\n                    subtitleSyncOverlay.toggle(action);\n                } else if (player) {\n                    subtitleSyncOverlay = new SubtitleSync(player);\n                }\n            });\n        }\n\n        function destroySubtitleSync() {\n            if (subtitleSyncOverlay) {\n                subtitleSyncOverlay.destroy();\n                subtitleSyncOverlay = null;\n            }\n        }\n\n        /**\n         * Clicked element.\n         * To skip 'click' handling on Firefox/Edge.\n         */\n        let clickedElement;\n\n        function onKeyDown(e) {\n            clickedElement = e.target;\n\n            const key = keyboardnavigation.getKeyName(e);\n            const isKeyModified = e.ctrlKey || e.altKey || e.metaKey;\n\n            if (!currentVisibleMenu && e.keyCode === 32) {\n                playbackManager.playPause(currentPlayer);\n                showOsd();\n                return;\n            }\n\n            if (layoutManager.tv && keyboardnavigation.isNavigationKey(key)) {\n                showOsd();\n                return;\n            }\n\n            switch (key) {\n                case 'Enter':\n                    showOsd();\n                    break;\n                case 'Escape':\n                case 'Back':\n                    // Ignore key when some dialog is opened\n                    if (currentVisibleMenu === 'osd' && !getOpenedDialog()) {\n                        hideOsd();\n                        e.stopPropagation();\n                    }\n                    break;\n                case 'k':\n                    playbackManager.playPause(currentPlayer);\n                    showOsd();\n                    break;\n                case 'ArrowUp':\n                case 'Up':\n                    playbackManager.volumeUp(currentPlayer);\n                    break;\n                case 'ArrowDown':\n                case 'Down':\n                    playbackManager.volumeDown(currentPlayer);\n                    break;\n                case 'l':\n                case 'ArrowRight':\n                case 'Right':\n                    playbackManager.fastForward(currentPlayer);\n                    showOsd();\n                    break;\n                case 'j':\n                case 'ArrowLeft':\n                case 'Left':\n                    playbackManager.rewind(currentPlayer);\n                    showOsd();\n                    break;\n                case 'f':\n                    if (!e.ctrlKey && !e.metaKey) {\n                        playbackManager.toggleFullscreen(currentPlayer);\n                        showOsd();\n                    }\n                    break;\n                case 'm':\n                    playbackManager.toggleMute(currentPlayer);\n                    showOsd();\n                    break;\n                case 'p':\n                case 'P':\n                    if (e.shiftKey) {\n                        playbackManager.previousTrack(currentPlayer);\n                    }\n                    break;\n                case 'n':\n                case 'N':\n                    if (e.shiftKey) {\n                        playbackManager.nextTrack(currentPlayer);\n                    }\n                    break;\n                case 'NavigationLeft':\n                case 'GamepadDPadLeft':\n                case 'GamepadLeftThumbstickLeft':\n                    // Ignores gamepad events that are always triggered, even when not focused.\n                    if (document.hasFocus()) { /* eslint-disable-line compat/compat */\n                        playbackManager.rewind(currentPlayer);\n                        showOsd();\n                    }\n                    break;\n                case 'NavigationRight':\n                case 'GamepadDPadRight':\n                case 'GamepadLeftThumbstickRight':\n                    // Ignores gamepad events that are always triggered, even when not focused.\n                    if (document.hasFocus()) { /* eslint-disable-line compat/compat */\n                        playbackManager.fastForward(currentPlayer);\n                        showOsd();\n                    }\n                    break;\n                case 'Home':\n                    playbackManager.seekPercent(0, currentPlayer);\n                    break;\n                case 'End':\n                    playbackManager.seekPercent(100, currentPlayer);\n                    break;\n                case '0':\n                case '1':\n                case '2':\n                case '3':\n                case '4':\n                case '5':\n                case '6':\n                case '7':\n                case '8':\n                case '9': {\n                    if (!isKeyModified) {\n                        const percent = parseInt(key, 10) * 10;\n                        playbackManager.seekPercent(percent, currentPlayer);\n                    }\n                    break;\n                }\n                case '>':\n                    playbackManager.increasePlaybackRate(currentPlayer);\n                    break;\n                case '<':\n                    playbackManager.decreasePlaybackRate(currentPlayer);\n                    break;\n            }\n        }\n\n        function onKeyDownCapture() {\n            resetIdle();\n        }\n\n        function onWindowMouseDown(e) {\n            clickedElement = e.target;\n            mouseIsDown = true;\n            resetIdle();\n        }\n\n        function onWindowMouseUp() {\n            mouseIsDown = false;\n            resetIdle();\n        }\n\n        function onWindowTouchStart(e) {\n            clickedElement = e.target;\n            mouseIsDown = true;\n            resetIdle();\n        }\n\n        function onWindowTouchEnd() {\n            mouseIsDown = false;\n            resetIdle();\n        }\n\n        function onWindowDragEnd() {\n            // mousedown -> dragstart -> dragend !!! no mouseup :(\n            mouseIsDown = false;\n            resetIdle();\n        }\n\n        function getImgUrl(item, chapter, index, maxWidth, apiClient) {\n            if (chapter.ImageTag) {\n                return apiClient.getScaledImageUrl(item.Id, {\n                    maxWidth: maxWidth,\n                    tag: chapter.ImageTag,\n                    type: 'Chapter',\n                    index: index\n                });\n            }\n\n            return null;\n        }\n\n        function getChapterBubbleHtml(apiClient, item, chapters, positionTicks) {\n            let chapter;\n            let index = -1;\n\n            for (let i = 0, length = chapters.length; i < length; i++) {\n                const currentChapter = chapters[i];\n\n                if (positionTicks >= currentChapter.StartPositionTicks) {\n                    chapter = currentChapter;\n                    index = i;\n                }\n            }\n\n            if (!chapter) {\n                return null;\n            }\n\n            const src = getImgUrl(item, chapter, index, 400, apiClient);\n\n            if (src) {\n                let html = '<div class=\"chapterThumbContainer\">';\n                html += '<img class=\"chapterThumb\" src=\"' + src + '\" />';\n                html += '<div class=\"chapterThumbTextContainer\">';\n                html += '<div class=\"chapterThumbText chapterThumbText-dim\">';\n                html += chapter.Name;\n                html += '</div>';\n                html += '<h2 class=\"chapterThumbText\">';\n                html += datetime.getDisplayRunningTime(positionTicks);\n                html += '</h2>';\n                html += '</div>';\n                return html + '</div>';\n            }\n\n            return null;\n        }\n\n        let playPauseClickTimeout;\n        function onViewHideStopPlayback() {\n            if (playbackManager.isPlayingVideo()) {\n                import('shell').then(({default: shell}) => {\n                    shell.disableFullscreen();\n                });\n\n                clearTimeout(playPauseClickTimeout);\n                const player = currentPlayer;\n                view.removeEventListener('viewbeforehide', onViewHideStopPlayback);\n                releaseCurrentPlayer();\n                playbackManager.stop(player);\n            }\n        }\n\n        function enableStopOnBack(enabled) {\n            view.removeEventListener('viewbeforehide', onViewHideStopPlayback);\n\n            if (enabled && playbackManager.isPlayingVideo(currentPlayer)) {\n                view.addEventListener('viewbeforehide', onViewHideStopPlayback);\n            }\n        }\n\n        import('shell').then(({default: shell}) => {\n            shell.enableFullscreen();\n        });\n\n        let currentPlayer;\n        let comingUpNextDisplayed;\n        let currentUpNextDialog;\n        let isEnabled;\n        let currentItem;\n        let recordingButtonManager;\n        let enableProgressByTimeOfDay;\n        let supportsBrightnessChange;\n        let currentVisibleMenu;\n        let statsOverlay;\n        let osdHideTimeout;\n        let lastPointerMoveData;\n        const self = this;\n        let currentPlayerSupportedCommands = [];\n        let currentRuntimeTicks = 0;\n        let lastUpdateTime = 0;\n        let programStartDateMs = 0;\n        let programEndDateMs = 0;\n        let playbackStartTimeTicks = 0;\n        let subtitleSyncOverlay;\n        const nowPlayingVolumeSlider = view.querySelector('.osdVolumeSlider');\n        const nowPlayingVolumeSliderContainer = view.querySelector('.osdVolumeSliderContainer');\n        const nowPlayingPositionSlider = view.querySelector('.osdPositionSlider');\n        const nowPlayingPositionText = view.querySelector('.osdPositionText');\n        const nowPlayingDurationText = view.querySelector('.osdDurationText');\n        const startTimeText = view.querySelector('.startTimeText');\n        const endTimeText = view.querySelector('.endTimeText');\n        const endsAtText = view.querySelector('.endsAtText');\n        const btnRewind = view.querySelector('.btnRewind');\n        const btnFastForward = view.querySelector('.btnFastForward');\n        const transitionEndEventName = dom.whichTransitionEvent();\n        const headerElement = document.querySelector('.skinHeader');\n        const osdBottomElement = document.querySelector('.videoOsdBottom-maincontrols');\n\n        nowPlayingPositionSlider.enableKeyboardDragging();\n        nowPlayingVolumeSlider.enableKeyboardDragging();\n\n        if (layoutManager.tv) {\n            nowPlayingPositionSlider.classList.add('focusable');\n        }\n\n        view.addEventListener('viewbeforeshow', function (e) {\n            headerElement.classList.add('osdHeader');\n            Emby.Page.setTransparency('full');\n        });\n        view.addEventListener('viewshow', function (e) {\n            try {\n                events.on(playbackManager, 'playerchange', onPlayerChange);\n                bindToPlayer(playbackManager.getCurrentPlayer());\n                /* eslint-disable-next-line compat/compat */\n                dom.addEventListener(document, window.PointerEvent ? 'pointermove' : 'mousemove', onPointerMove, {\n                    passive: true\n                });\n                showOsd();\n                inputManager.on(window, onInputCommand);\n                document.addEventListener('keydown', onKeyDown);\n                dom.addEventListener(document, 'keydown', onKeyDownCapture, {\n                    capture: true,\n                    passive: true\n                });\n                /* eslint-disable-next-line compat/compat */\n                dom.addEventListener(window, window.PointerEvent ? 'pointerdown' : 'mousedown', onWindowMouseDown, {\n                    capture: true,\n                    passive: true\n                });\n                /* eslint-disable-next-line compat/compat */\n                dom.addEventListener(window, window.PointerEvent ? 'pointerup' : 'mouseup', onWindowMouseUp, {\n                    capture: true,\n                    passive: true\n                });\n                dom.addEventListener(window, 'touchstart', onWindowTouchStart, {\n                    capture: true,\n                    passive: true\n                });\n                ['touchend', 'touchcancel'].forEach((event) => {\n                    dom.addEventListener(window, event, onWindowTouchEnd, {\n                        capture: true,\n                        passive: true\n                    });\n                });\n                dom.addEventListener(window, 'dragend', onWindowDragEnd, {\n                    capture: true,\n                    passive: true\n                });\n            } catch (e) {\n                import('appRouter').then(({default: appRouter}) => {\n                    appRouter.goHome();\n                });\n            }\n        });\n        view.addEventListener('viewbeforehide', function () {\n            if (statsOverlay) {\n                statsOverlay.enabled(false);\n            }\n\n            document.removeEventListener('keydown', onKeyDown);\n            dom.removeEventListener(document, 'keydown', onKeyDownCapture, {\n                capture: true,\n                passive: true\n            });\n            /* eslint-disable-next-line compat/compat */\n            dom.removeEventListener(window, window.PointerEvent ? 'pointerdown' : 'mousedown', onWindowMouseDown, {\n                capture: true,\n                passive: true\n            });\n            /* eslint-disable-next-line compat/compat */\n            dom.removeEventListener(window, window.PointerEvent ? 'pointerup' : 'mouseup', onWindowMouseUp, {\n                capture: true,\n                passive: true\n            });\n            dom.removeEventListener(window, 'touchstart', onWindowTouchStart, {\n                capture: true,\n                passive: true\n            });\n            ['touchend', 'touchcancel'].forEach((event) => {\n                dom.removeEventListener(window, event, onWindowTouchEnd, {\n                    capture: true,\n                    passive: true\n                });\n            });\n            dom.removeEventListener(window, 'dragend', onWindowDragEnd, {\n                capture: true,\n                passive: true\n            });\n            stopOsdHideTimer();\n            headerElement.classList.remove('osdHeader');\n            headerElement.classList.remove('osdHeader-hidden');\n            /* eslint-disable-next-line compat/compat */\n            dom.removeEventListener(document, window.PointerEvent ? 'pointermove' : 'mousemove', onPointerMove, {\n                passive: true\n            });\n            inputManager.off(window, onInputCommand);\n            events.off(playbackManager, 'playerchange', onPlayerChange);\n            releaseCurrentPlayer();\n        });\n        view.querySelector('.btnFullscreen').addEventListener('click', function () {\n            playbackManager.toggleFullscreen(currentPlayer);\n        });\n        view.querySelector('.btnPip').addEventListener('click', function () {\n            playbackManager.togglePictureInPicture(currentPlayer);\n        });\n        view.querySelector('.btnAirPlay').addEventListener('click', function () {\n            playbackManager.toggleAirPlay(currentPlayer);\n        });\n        view.querySelector('.btnVideoOsdSettings').addEventListener('click', onSettingsButtonClick);\n        view.addEventListener('viewhide', function () {\n            headerElement.classList.remove('hide');\n        });\n        view.addEventListener('viewdestroy', function () {\n            if (self.touchHelper) {\n                self.touchHelper.destroy();\n                self.touchHelper = null;\n            }\n\n            if (recordingButtonManager) {\n                recordingButtonManager.destroy();\n                recordingButtonManager = null;\n            }\n\n            destroyStats();\n            destroySubtitleSync();\n        });\n        let lastPointerDown = 0;\n        /* eslint-disable-next-line compat/compat */\n        dom.addEventListener(view, window.PointerEvent ? 'pointerdown' : 'click', function (e) {\n            if (dom.parentWithClass(e.target, ['videoOsdBottom', 'upNextContainer'])) {\n                return void showOsd();\n            }\n\n            const pointerType = e.pointerType || (layoutManager.mobile ? 'touch' : 'mouse');\n            const now = new Date().getTime();\n\n            switch (pointerType) {\n                case 'touch':\n                    if (now - lastPointerDown > 300) {\n                        lastPointerDown = now;\n                        toggleOsd();\n                    }\n\n                    break;\n\n                case 'mouse':\n                    if (!e.button) {\n                        if (playPauseClickTimeout) {\n                            clearTimeout(playPauseClickTimeout);\n                            playPauseClickTimeout = 0;\n                        } else {\n                            playPauseClickTimeout = setTimeout(function() {\n                                playbackManager.playPause(currentPlayer);\n                                showOsd();\n                                playPauseClickTimeout = 0;\n                            }, 300);\n                        }\n                    }\n\n                    break;\n\n                default:\n                    playbackManager.playPause(currentPlayer);\n                    showOsd();\n            }\n        }, {\n            passive: true\n        });\n\n        if (browser.touch) {\n            dom.addEventListener(view, 'dblclick', onDoubleClick, {});\n        } else {\n            const options = { passive: true };\n            dom.addEventListener(view, 'dblclick', function () {\n                playbackManager.toggleFullscreen(currentPlayer);\n            }, options);\n        }\n\n        view.querySelector('.buttonMute').addEventListener('click', function () {\n            playbackManager.toggleMute(currentPlayer);\n        });\n\n        nowPlayingVolumeSlider.addEventListener('input', (e) => {\n            playbackManager.setVolume(e.target.value, currentPlayer);\n        });\n\n        nowPlayingPositionSlider.addEventListener('change', function () {\n            const player = currentPlayer;\n\n            if (player) {\n                const newPercent = parseFloat(this.value);\n\n                if (enableProgressByTimeOfDay) {\n                    let seekAirTimeTicks = newPercent / 100 * (programEndDateMs - programStartDateMs) * 1e4;\n                    seekAirTimeTicks += 1e4 * programStartDateMs;\n                    seekAirTimeTicks -= playbackStartTimeTicks;\n                    playbackManager.seek(seekAirTimeTicks, player);\n                } else {\n                    playbackManager.seekPercent(newPercent, player);\n                }\n            }\n        });\n\n        nowPlayingPositionSlider.getBubbleHtml = function (value) {\n            showOsd();\n            if (enableProgressByTimeOfDay) {\n                if (programStartDateMs && programEndDateMs) {\n                    let ms = programEndDateMs - programStartDateMs;\n                    ms /= 100;\n                    ms *= value;\n                    ms += programStartDateMs;\n                    return '<h1 class=\"sliderBubbleText\">' + getDisplayTimeWithoutAmPm(new Date(parseInt(ms)), true) + '</h1>';\n                }\n\n                return '--:--';\n            }\n\n            if (!currentRuntimeTicks) {\n                return '--:--';\n            }\n\n            let ticks = currentRuntimeTicks;\n            ticks /= 100;\n            ticks *= value;\n            const item = currentItem;\n\n            if (item && item.Chapters && item.Chapters.length && item.Chapters[0].ImageTag) {\n                const html = getChapterBubbleHtml(connectionManager.getApiClient(item.ServerId), item, item.Chapters, ticks);\n\n                if (html) {\n                    return html;\n                }\n            }\n\n            return '<h1 class=\"sliderBubbleText\">' + datetime.getDisplayRunningTime(ticks) + '</h1>';\n        };\n\n        view.querySelector('.btnPreviousTrack').addEventListener('click', function () {\n            playbackManager.previousTrack(currentPlayer);\n        });\n        view.querySelector('.btnPause').addEventListener('click', function () {\n            // Ignore 'click' if another element was originally clicked (Firefox/Edge issue)\n            if (this.contains(clickedElement)) {\n                playbackManager.playPause(currentPlayer);\n            }\n        });\n        view.querySelector('.btnNextTrack').addEventListener('click', function () {\n            playbackManager.nextTrack(currentPlayer);\n        });\n        btnRewind.addEventListener('click', function () {\n            playbackManager.rewind(currentPlayer);\n        });\n        btnFastForward.addEventListener('click', function () {\n            playbackManager.fastForward(currentPlayer);\n        });\n        view.querySelector('.btnAudio').addEventListener('click', showAudioTrackSelection);\n        view.querySelector('.btnSubtitles').addEventListener('click', showSubtitleTrackSelection);\n\n        if (browser.touch) {\n            (function () {\n                import('touchHelper').then(({default: TouchHelper}) => {\n                    self.touchHelper = new TouchHelper(view, {\n                        swipeYThreshold: 30,\n                        triggerOnMove: true,\n                        preventDefaultOnMove: true,\n                        ignoreTagNames: ['BUTTON', 'INPUT', 'TEXTAREA']\n                    });\n                    events.on(self.touchHelper, 'swipeup', onVerticalSwipe);\n                    events.on(self.touchHelper, 'swipedown', onVerticalSwipe);\n                });\n            })();\n        }\n    }\n\n/* eslint-enable indent */\n"]}